
SHT31_read.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aa48  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006a4  0800ab08  0800ab08  0001ab08  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b1ac  0800b1ac  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800b1ac  0800b1ac  0001b1ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b1b4  0800b1b4  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b1b4  0800b1b4  0001b1b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b1b8  0800b1b8  0001b1b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800b1bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000178  200001e0  0800b39c  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000358  0800b39c  00020358  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ef1f  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000026bb  00000000  00000000  0002f127  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c70  00000000  00000000  000317e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b38  00000000  00000000  00032458  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017870  00000000  00000000  00032f90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001139c  00000000  00000000  0004a800  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d4b9  00000000  00000000  0005bb9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e9055  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004074  00000000  00000000  000e90a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	200001e0 	.word	0x200001e0
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0800aaec 	.word	0x0800aaec

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	200001e4 	.word	0x200001e4
 8000100:	0800aaec 	.word	0x0800aaec

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__gnu_thumb1_case_uqi>:
 8000114:	b402      	push	{r1}
 8000116:	4671      	mov	r1, lr
 8000118:	0849      	lsrs	r1, r1, #1
 800011a:	0049      	lsls	r1, r1, #1
 800011c:	5c09      	ldrb	r1, [r1, r0]
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	448e      	add	lr, r1
 8000122:	bc02      	pop	{r1}
 8000124:	4770      	bx	lr
 8000126:	46c0      	nop			; (mov r8, r8)

08000128 <__gnu_thumb1_case_shi>:
 8000128:	b403      	push	{r0, r1}
 800012a:	4671      	mov	r1, lr
 800012c:	0849      	lsrs	r1, r1, #1
 800012e:	0040      	lsls	r0, r0, #1
 8000130:	0049      	lsls	r1, r1, #1
 8000132:	5e09      	ldrsh	r1, [r1, r0]
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	448e      	add	lr, r1
 8000138:	bc03      	pop	{r0, r1}
 800013a:	4770      	bx	lr

0800013c <__udivsi3>:
 800013c:	2200      	movs	r2, #0
 800013e:	0843      	lsrs	r3, r0, #1
 8000140:	428b      	cmp	r3, r1
 8000142:	d374      	bcc.n	800022e <__udivsi3+0xf2>
 8000144:	0903      	lsrs	r3, r0, #4
 8000146:	428b      	cmp	r3, r1
 8000148:	d35f      	bcc.n	800020a <__udivsi3+0xce>
 800014a:	0a03      	lsrs	r3, r0, #8
 800014c:	428b      	cmp	r3, r1
 800014e:	d344      	bcc.n	80001da <__udivsi3+0x9e>
 8000150:	0b03      	lsrs	r3, r0, #12
 8000152:	428b      	cmp	r3, r1
 8000154:	d328      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000156:	0c03      	lsrs	r3, r0, #16
 8000158:	428b      	cmp	r3, r1
 800015a:	d30d      	bcc.n	8000178 <__udivsi3+0x3c>
 800015c:	22ff      	movs	r2, #255	; 0xff
 800015e:	0209      	lsls	r1, r1, #8
 8000160:	ba12      	rev	r2, r2
 8000162:	0c03      	lsrs	r3, r0, #16
 8000164:	428b      	cmp	r3, r1
 8000166:	d302      	bcc.n	800016e <__udivsi3+0x32>
 8000168:	1212      	asrs	r2, r2, #8
 800016a:	0209      	lsls	r1, r1, #8
 800016c:	d065      	beq.n	800023a <__udivsi3+0xfe>
 800016e:	0b03      	lsrs	r3, r0, #12
 8000170:	428b      	cmp	r3, r1
 8000172:	d319      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000174:	e000      	b.n	8000178 <__udivsi3+0x3c>
 8000176:	0a09      	lsrs	r1, r1, #8
 8000178:	0bc3      	lsrs	r3, r0, #15
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x46>
 800017e:	03cb      	lsls	r3, r1, #15
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0b83      	lsrs	r3, r0, #14
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x52>
 800018a:	038b      	lsls	r3, r1, #14
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0b43      	lsrs	r3, r0, #13
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x5e>
 8000196:	034b      	lsls	r3, r1, #13
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0b03      	lsrs	r3, r0, #12
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x6a>
 80001a2:	030b      	lsls	r3, r1, #12
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0ac3      	lsrs	r3, r0, #11
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x76>
 80001ae:	02cb      	lsls	r3, r1, #11
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0a83      	lsrs	r3, r0, #10
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x82>
 80001ba:	028b      	lsls	r3, r1, #10
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0a43      	lsrs	r3, r0, #9
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x8e>
 80001c6:	024b      	lsls	r3, r1, #9
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	0a03      	lsrs	r3, r0, #8
 80001ce:	428b      	cmp	r3, r1
 80001d0:	d301      	bcc.n	80001d6 <__udivsi3+0x9a>
 80001d2:	020b      	lsls	r3, r1, #8
 80001d4:	1ac0      	subs	r0, r0, r3
 80001d6:	4152      	adcs	r2, r2
 80001d8:	d2cd      	bcs.n	8000176 <__udivsi3+0x3a>
 80001da:	09c3      	lsrs	r3, r0, #7
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xa8>
 80001e0:	01cb      	lsls	r3, r1, #7
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0983      	lsrs	r3, r0, #6
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xb4>
 80001ec:	018b      	lsls	r3, r1, #6
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0943      	lsrs	r3, r0, #5
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xc0>
 80001f8:	014b      	lsls	r3, r1, #5
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0903      	lsrs	r3, r0, #4
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xcc>
 8000204:	010b      	lsls	r3, r1, #4
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	08c3      	lsrs	r3, r0, #3
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xd8>
 8000210:	00cb      	lsls	r3, r1, #3
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0883      	lsrs	r3, r0, #2
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xe4>
 800021c:	008b      	lsls	r3, r1, #2
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	0843      	lsrs	r3, r0, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d301      	bcc.n	800022c <__udivsi3+0xf0>
 8000228:	004b      	lsls	r3, r1, #1
 800022a:	1ac0      	subs	r0, r0, r3
 800022c:	4152      	adcs	r2, r2
 800022e:	1a41      	subs	r1, r0, r1
 8000230:	d200      	bcs.n	8000234 <__udivsi3+0xf8>
 8000232:	4601      	mov	r1, r0
 8000234:	4152      	adcs	r2, r2
 8000236:	4610      	mov	r0, r2
 8000238:	4770      	bx	lr
 800023a:	e7ff      	b.n	800023c <__udivsi3+0x100>
 800023c:	b501      	push	{r0, lr}
 800023e:	2000      	movs	r0, #0
 8000240:	f000 f8f0 	bl	8000424 <__aeabi_idiv0>
 8000244:	bd02      	pop	{r1, pc}
 8000246:	46c0      	nop			; (mov r8, r8)

08000248 <__aeabi_uidivmod>:
 8000248:	2900      	cmp	r1, #0
 800024a:	d0f7      	beq.n	800023c <__udivsi3+0x100>
 800024c:	e776      	b.n	800013c <__udivsi3>
 800024e:	4770      	bx	lr

08000250 <__divsi3>:
 8000250:	4603      	mov	r3, r0
 8000252:	430b      	orrs	r3, r1
 8000254:	d47f      	bmi.n	8000356 <__divsi3+0x106>
 8000256:	2200      	movs	r2, #0
 8000258:	0843      	lsrs	r3, r0, #1
 800025a:	428b      	cmp	r3, r1
 800025c:	d374      	bcc.n	8000348 <__divsi3+0xf8>
 800025e:	0903      	lsrs	r3, r0, #4
 8000260:	428b      	cmp	r3, r1
 8000262:	d35f      	bcc.n	8000324 <__divsi3+0xd4>
 8000264:	0a03      	lsrs	r3, r0, #8
 8000266:	428b      	cmp	r3, r1
 8000268:	d344      	bcc.n	80002f4 <__divsi3+0xa4>
 800026a:	0b03      	lsrs	r3, r0, #12
 800026c:	428b      	cmp	r3, r1
 800026e:	d328      	bcc.n	80002c2 <__divsi3+0x72>
 8000270:	0c03      	lsrs	r3, r0, #16
 8000272:	428b      	cmp	r3, r1
 8000274:	d30d      	bcc.n	8000292 <__divsi3+0x42>
 8000276:	22ff      	movs	r2, #255	; 0xff
 8000278:	0209      	lsls	r1, r1, #8
 800027a:	ba12      	rev	r2, r2
 800027c:	0c03      	lsrs	r3, r0, #16
 800027e:	428b      	cmp	r3, r1
 8000280:	d302      	bcc.n	8000288 <__divsi3+0x38>
 8000282:	1212      	asrs	r2, r2, #8
 8000284:	0209      	lsls	r1, r1, #8
 8000286:	d065      	beq.n	8000354 <__divsi3+0x104>
 8000288:	0b03      	lsrs	r3, r0, #12
 800028a:	428b      	cmp	r3, r1
 800028c:	d319      	bcc.n	80002c2 <__divsi3+0x72>
 800028e:	e000      	b.n	8000292 <__divsi3+0x42>
 8000290:	0a09      	lsrs	r1, r1, #8
 8000292:	0bc3      	lsrs	r3, r0, #15
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x4c>
 8000298:	03cb      	lsls	r3, r1, #15
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0b83      	lsrs	r3, r0, #14
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x58>
 80002a4:	038b      	lsls	r3, r1, #14
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0b43      	lsrs	r3, r0, #13
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x64>
 80002b0:	034b      	lsls	r3, r1, #13
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0b03      	lsrs	r3, r0, #12
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x70>
 80002bc:	030b      	lsls	r3, r1, #12
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0ac3      	lsrs	r3, r0, #11
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x7c>
 80002c8:	02cb      	lsls	r3, r1, #11
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0a83      	lsrs	r3, r0, #10
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0x88>
 80002d4:	028b      	lsls	r3, r1, #10
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	0a43      	lsrs	r3, r0, #9
 80002dc:	428b      	cmp	r3, r1
 80002de:	d301      	bcc.n	80002e4 <__divsi3+0x94>
 80002e0:	024b      	lsls	r3, r1, #9
 80002e2:	1ac0      	subs	r0, r0, r3
 80002e4:	4152      	adcs	r2, r2
 80002e6:	0a03      	lsrs	r3, r0, #8
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d301      	bcc.n	80002f0 <__divsi3+0xa0>
 80002ec:	020b      	lsls	r3, r1, #8
 80002ee:	1ac0      	subs	r0, r0, r3
 80002f0:	4152      	adcs	r2, r2
 80002f2:	d2cd      	bcs.n	8000290 <__divsi3+0x40>
 80002f4:	09c3      	lsrs	r3, r0, #7
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xae>
 80002fa:	01cb      	lsls	r3, r1, #7
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0983      	lsrs	r3, r0, #6
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xba>
 8000306:	018b      	lsls	r3, r1, #6
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0943      	lsrs	r3, r0, #5
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xc6>
 8000312:	014b      	lsls	r3, r1, #5
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0903      	lsrs	r3, r0, #4
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xd2>
 800031e:	010b      	lsls	r3, r1, #4
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	08c3      	lsrs	r3, r0, #3
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xde>
 800032a:	00cb      	lsls	r3, r1, #3
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	0883      	lsrs	r3, r0, #2
 8000332:	428b      	cmp	r3, r1
 8000334:	d301      	bcc.n	800033a <__divsi3+0xea>
 8000336:	008b      	lsls	r3, r1, #2
 8000338:	1ac0      	subs	r0, r0, r3
 800033a:	4152      	adcs	r2, r2
 800033c:	0843      	lsrs	r3, r0, #1
 800033e:	428b      	cmp	r3, r1
 8000340:	d301      	bcc.n	8000346 <__divsi3+0xf6>
 8000342:	004b      	lsls	r3, r1, #1
 8000344:	1ac0      	subs	r0, r0, r3
 8000346:	4152      	adcs	r2, r2
 8000348:	1a41      	subs	r1, r0, r1
 800034a:	d200      	bcs.n	800034e <__divsi3+0xfe>
 800034c:	4601      	mov	r1, r0
 800034e:	4152      	adcs	r2, r2
 8000350:	4610      	mov	r0, r2
 8000352:	4770      	bx	lr
 8000354:	e05d      	b.n	8000412 <__divsi3+0x1c2>
 8000356:	0fca      	lsrs	r2, r1, #31
 8000358:	d000      	beq.n	800035c <__divsi3+0x10c>
 800035a:	4249      	negs	r1, r1
 800035c:	1003      	asrs	r3, r0, #32
 800035e:	d300      	bcc.n	8000362 <__divsi3+0x112>
 8000360:	4240      	negs	r0, r0
 8000362:	4053      	eors	r3, r2
 8000364:	2200      	movs	r2, #0
 8000366:	469c      	mov	ip, r3
 8000368:	0903      	lsrs	r3, r0, #4
 800036a:	428b      	cmp	r3, r1
 800036c:	d32d      	bcc.n	80003ca <__divsi3+0x17a>
 800036e:	0a03      	lsrs	r3, r0, #8
 8000370:	428b      	cmp	r3, r1
 8000372:	d312      	bcc.n	800039a <__divsi3+0x14a>
 8000374:	22fc      	movs	r2, #252	; 0xfc
 8000376:	0189      	lsls	r1, r1, #6
 8000378:	ba12      	rev	r2, r2
 800037a:	0a03      	lsrs	r3, r0, #8
 800037c:	428b      	cmp	r3, r1
 800037e:	d30c      	bcc.n	800039a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	1192      	asrs	r2, r2, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d308      	bcc.n	800039a <__divsi3+0x14a>
 8000388:	0189      	lsls	r1, r1, #6
 800038a:	1192      	asrs	r2, r2, #6
 800038c:	428b      	cmp	r3, r1
 800038e:	d304      	bcc.n	800039a <__divsi3+0x14a>
 8000390:	0189      	lsls	r1, r1, #6
 8000392:	d03a      	beq.n	800040a <__divsi3+0x1ba>
 8000394:	1192      	asrs	r2, r2, #6
 8000396:	e000      	b.n	800039a <__divsi3+0x14a>
 8000398:	0989      	lsrs	r1, r1, #6
 800039a:	09c3      	lsrs	r3, r0, #7
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x154>
 80003a0:	01cb      	lsls	r3, r1, #7
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	0983      	lsrs	r3, r0, #6
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x160>
 80003ac:	018b      	lsls	r3, r1, #6
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0943      	lsrs	r3, r0, #5
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x16c>
 80003b8:	014b      	lsls	r3, r1, #5
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	0903      	lsrs	r3, r0, #4
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x178>
 80003c4:	010b      	lsls	r3, r1, #4
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	08c3      	lsrs	r3, r0, #3
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d301      	bcc.n	80003d4 <__divsi3+0x184>
 80003d0:	00cb      	lsls	r3, r1, #3
 80003d2:	1ac0      	subs	r0, r0, r3
 80003d4:	4152      	adcs	r2, r2
 80003d6:	0883      	lsrs	r3, r0, #2
 80003d8:	428b      	cmp	r3, r1
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x190>
 80003dc:	008b      	lsls	r3, r1, #2
 80003de:	1ac0      	subs	r0, r0, r3
 80003e0:	4152      	adcs	r2, r2
 80003e2:	d2d9      	bcs.n	8000398 <__divsi3+0x148>
 80003e4:	0843      	lsrs	r3, r0, #1
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d301      	bcc.n	80003ee <__divsi3+0x19e>
 80003ea:	004b      	lsls	r3, r1, #1
 80003ec:	1ac0      	subs	r0, r0, r3
 80003ee:	4152      	adcs	r2, r2
 80003f0:	1a41      	subs	r1, r0, r1
 80003f2:	d200      	bcs.n	80003f6 <__divsi3+0x1a6>
 80003f4:	4601      	mov	r1, r0
 80003f6:	4663      	mov	r3, ip
 80003f8:	4152      	adcs	r2, r2
 80003fa:	105b      	asrs	r3, r3, #1
 80003fc:	4610      	mov	r0, r2
 80003fe:	d301      	bcc.n	8000404 <__divsi3+0x1b4>
 8000400:	4240      	negs	r0, r0
 8000402:	2b00      	cmp	r3, #0
 8000404:	d500      	bpl.n	8000408 <__divsi3+0x1b8>
 8000406:	4249      	negs	r1, r1
 8000408:	4770      	bx	lr
 800040a:	4663      	mov	r3, ip
 800040c:	105b      	asrs	r3, r3, #1
 800040e:	d300      	bcc.n	8000412 <__divsi3+0x1c2>
 8000410:	4240      	negs	r0, r0
 8000412:	b501      	push	{r0, lr}
 8000414:	2000      	movs	r0, #0
 8000416:	f000 f805 	bl	8000424 <__aeabi_idiv0>
 800041a:	bd02      	pop	{r1, pc}

0800041c <__aeabi_idivmod>:
 800041c:	2900      	cmp	r1, #0
 800041e:	d0f8      	beq.n	8000412 <__divsi3+0x1c2>
 8000420:	e716      	b.n	8000250 <__divsi3>
 8000422:	4770      	bx	lr

08000424 <__aeabi_idiv0>:
 8000424:	4770      	bx	lr
 8000426:	46c0      	nop			; (mov r8, r8)

08000428 <__aeabi_cdrcmple>:
 8000428:	4684      	mov	ip, r0
 800042a:	0010      	movs	r0, r2
 800042c:	4662      	mov	r2, ip
 800042e:	468c      	mov	ip, r1
 8000430:	0019      	movs	r1, r3
 8000432:	4663      	mov	r3, ip
 8000434:	e000      	b.n	8000438 <__aeabi_cdcmpeq>
 8000436:	46c0      	nop			; (mov r8, r8)

08000438 <__aeabi_cdcmpeq>:
 8000438:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043a:	f001 fc97 	bl	8001d6c <__ledf2>
 800043e:	2800      	cmp	r0, #0
 8000440:	d401      	bmi.n	8000446 <__aeabi_cdcmpeq+0xe>
 8000442:	2100      	movs	r1, #0
 8000444:	42c8      	cmn	r0, r1
 8000446:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000448 <__aeabi_dcmpeq>:
 8000448:	b510      	push	{r4, lr}
 800044a:	f001 fbe7 	bl	8001c1c <__eqdf2>
 800044e:	4240      	negs	r0, r0
 8000450:	3001      	adds	r0, #1
 8000452:	bd10      	pop	{r4, pc}

08000454 <__aeabi_dcmplt>:
 8000454:	b510      	push	{r4, lr}
 8000456:	f001 fc89 	bl	8001d6c <__ledf2>
 800045a:	2800      	cmp	r0, #0
 800045c:	db01      	blt.n	8000462 <__aeabi_dcmplt+0xe>
 800045e:	2000      	movs	r0, #0
 8000460:	bd10      	pop	{r4, pc}
 8000462:	2001      	movs	r0, #1
 8000464:	bd10      	pop	{r4, pc}
 8000466:	46c0      	nop			; (mov r8, r8)

08000468 <__aeabi_dcmple>:
 8000468:	b510      	push	{r4, lr}
 800046a:	f001 fc7f 	bl	8001d6c <__ledf2>
 800046e:	2800      	cmp	r0, #0
 8000470:	dd01      	ble.n	8000476 <__aeabi_dcmple+0xe>
 8000472:	2000      	movs	r0, #0
 8000474:	bd10      	pop	{r4, pc}
 8000476:	2001      	movs	r0, #1
 8000478:	bd10      	pop	{r4, pc}
 800047a:	46c0      	nop			; (mov r8, r8)

0800047c <__aeabi_dcmpgt>:
 800047c:	b510      	push	{r4, lr}
 800047e:	f001 fc0f 	bl	8001ca0 <__gedf2>
 8000482:	2800      	cmp	r0, #0
 8000484:	dc01      	bgt.n	800048a <__aeabi_dcmpgt+0xe>
 8000486:	2000      	movs	r0, #0
 8000488:	bd10      	pop	{r4, pc}
 800048a:	2001      	movs	r0, #1
 800048c:	bd10      	pop	{r4, pc}
 800048e:	46c0      	nop			; (mov r8, r8)

08000490 <__aeabi_dcmpge>:
 8000490:	b510      	push	{r4, lr}
 8000492:	f001 fc05 	bl	8001ca0 <__gedf2>
 8000496:	2800      	cmp	r0, #0
 8000498:	da01      	bge.n	800049e <__aeabi_dcmpge+0xe>
 800049a:	2000      	movs	r0, #0
 800049c:	bd10      	pop	{r4, pc}
 800049e:	2001      	movs	r0, #1
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	46c0      	nop			; (mov r8, r8)

080004a4 <__aeabi_uldivmod>:
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	d111      	bne.n	80004cc <__aeabi_uldivmod+0x28>
 80004a8:	2a00      	cmp	r2, #0
 80004aa:	d10f      	bne.n	80004cc <__aeabi_uldivmod+0x28>
 80004ac:	2900      	cmp	r1, #0
 80004ae:	d100      	bne.n	80004b2 <__aeabi_uldivmod+0xe>
 80004b0:	2800      	cmp	r0, #0
 80004b2:	d002      	beq.n	80004ba <__aeabi_uldivmod+0x16>
 80004b4:	2100      	movs	r1, #0
 80004b6:	43c9      	mvns	r1, r1
 80004b8:	0008      	movs	r0, r1
 80004ba:	b407      	push	{r0, r1, r2}
 80004bc:	4802      	ldr	r0, [pc, #8]	; (80004c8 <__aeabi_uldivmod+0x24>)
 80004be:	a102      	add	r1, pc, #8	; (adr r1, 80004c8 <__aeabi_uldivmod+0x24>)
 80004c0:	1840      	adds	r0, r0, r1
 80004c2:	9002      	str	r0, [sp, #8]
 80004c4:	bd03      	pop	{r0, r1, pc}
 80004c6:	46c0      	nop			; (mov r8, r8)
 80004c8:	ffffff5d 	.word	0xffffff5d
 80004cc:	b403      	push	{r0, r1}
 80004ce:	4668      	mov	r0, sp
 80004d0:	b501      	push	{r0, lr}
 80004d2:	9802      	ldr	r0, [sp, #8]
 80004d4:	f000 f876 	bl	80005c4 <__udivmoddi4>
 80004d8:	9b01      	ldr	r3, [sp, #4]
 80004da:	469e      	mov	lr, r3
 80004dc:	b002      	add	sp, #8
 80004de:	bc0c      	pop	{r2, r3}
 80004e0:	4770      	bx	lr
 80004e2:	46c0      	nop			; (mov r8, r8)

080004e4 <__aeabi_d2uiz>:
 80004e4:	b570      	push	{r4, r5, r6, lr}
 80004e6:	2200      	movs	r2, #0
 80004e8:	4b0c      	ldr	r3, [pc, #48]	; (800051c <__aeabi_d2uiz+0x38>)
 80004ea:	0004      	movs	r4, r0
 80004ec:	000d      	movs	r5, r1
 80004ee:	f7ff ffcf 	bl	8000490 <__aeabi_dcmpge>
 80004f2:	2800      	cmp	r0, #0
 80004f4:	d104      	bne.n	8000500 <__aeabi_d2uiz+0x1c>
 80004f6:	0020      	movs	r0, r4
 80004f8:	0029      	movs	r1, r5
 80004fa:	f002 fab7 	bl	8002a6c <__aeabi_d2iz>
 80004fe:	bd70      	pop	{r4, r5, r6, pc}
 8000500:	4b06      	ldr	r3, [pc, #24]	; (800051c <__aeabi_d2uiz+0x38>)
 8000502:	2200      	movs	r2, #0
 8000504:	0020      	movs	r0, r4
 8000506:	0029      	movs	r1, r5
 8000508:	f001 ff00 	bl	800230c <__aeabi_dsub>
 800050c:	f002 faae 	bl	8002a6c <__aeabi_d2iz>
 8000510:	2380      	movs	r3, #128	; 0x80
 8000512:	061b      	lsls	r3, r3, #24
 8000514:	469c      	mov	ip, r3
 8000516:	4460      	add	r0, ip
 8000518:	e7f1      	b.n	80004fe <__aeabi_d2uiz+0x1a>
 800051a:	46c0      	nop			; (mov r8, r8)
 800051c:	41e00000 	.word	0x41e00000

08000520 <__aeabi_d2lz>:
 8000520:	b570      	push	{r4, r5, r6, lr}
 8000522:	0005      	movs	r5, r0
 8000524:	000c      	movs	r4, r1
 8000526:	2200      	movs	r2, #0
 8000528:	2300      	movs	r3, #0
 800052a:	0028      	movs	r0, r5
 800052c:	0021      	movs	r1, r4
 800052e:	f7ff ff91 	bl	8000454 <__aeabi_dcmplt>
 8000532:	2800      	cmp	r0, #0
 8000534:	d108      	bne.n	8000548 <__aeabi_d2lz+0x28>
 8000536:	0028      	movs	r0, r5
 8000538:	0021      	movs	r1, r4
 800053a:	f000 f80f 	bl	800055c <__aeabi_d2ulz>
 800053e:	0002      	movs	r2, r0
 8000540:	000b      	movs	r3, r1
 8000542:	0010      	movs	r0, r2
 8000544:	0019      	movs	r1, r3
 8000546:	bd70      	pop	{r4, r5, r6, pc}
 8000548:	2380      	movs	r3, #128	; 0x80
 800054a:	061b      	lsls	r3, r3, #24
 800054c:	18e1      	adds	r1, r4, r3
 800054e:	0028      	movs	r0, r5
 8000550:	f000 f804 	bl	800055c <__aeabi_d2ulz>
 8000554:	2300      	movs	r3, #0
 8000556:	4242      	negs	r2, r0
 8000558:	418b      	sbcs	r3, r1
 800055a:	e7f2      	b.n	8000542 <__aeabi_d2lz+0x22>

0800055c <__aeabi_d2ulz>:
 800055c:	b570      	push	{r4, r5, r6, lr}
 800055e:	2200      	movs	r2, #0
 8000560:	4b0b      	ldr	r3, [pc, #44]	; (8000590 <__aeabi_d2ulz+0x34>)
 8000562:	000d      	movs	r5, r1
 8000564:	0004      	movs	r4, r0
 8000566:	f001 fc65 	bl	8001e34 <__aeabi_dmul>
 800056a:	f7ff ffbb 	bl	80004e4 <__aeabi_d2uiz>
 800056e:	0006      	movs	r6, r0
 8000570:	f002 fae2 	bl	8002b38 <__aeabi_ui2d>
 8000574:	2200      	movs	r2, #0
 8000576:	4b07      	ldr	r3, [pc, #28]	; (8000594 <__aeabi_d2ulz+0x38>)
 8000578:	f001 fc5c 	bl	8001e34 <__aeabi_dmul>
 800057c:	0002      	movs	r2, r0
 800057e:	000b      	movs	r3, r1
 8000580:	0020      	movs	r0, r4
 8000582:	0029      	movs	r1, r5
 8000584:	f001 fec2 	bl	800230c <__aeabi_dsub>
 8000588:	f7ff ffac 	bl	80004e4 <__aeabi_d2uiz>
 800058c:	0031      	movs	r1, r6
 800058e:	bd70      	pop	{r4, r5, r6, pc}
 8000590:	3df00000 	.word	0x3df00000
 8000594:	41f00000 	.word	0x41f00000

08000598 <__aeabi_l2d>:
 8000598:	b570      	push	{r4, r5, r6, lr}
 800059a:	0006      	movs	r6, r0
 800059c:	0008      	movs	r0, r1
 800059e:	f002 fa9b 	bl	8002ad8 <__aeabi_i2d>
 80005a2:	2200      	movs	r2, #0
 80005a4:	4b06      	ldr	r3, [pc, #24]	; (80005c0 <__aeabi_l2d+0x28>)
 80005a6:	f001 fc45 	bl	8001e34 <__aeabi_dmul>
 80005aa:	000d      	movs	r5, r1
 80005ac:	0004      	movs	r4, r0
 80005ae:	0030      	movs	r0, r6
 80005b0:	f002 fac2 	bl	8002b38 <__aeabi_ui2d>
 80005b4:	002b      	movs	r3, r5
 80005b6:	0022      	movs	r2, r4
 80005b8:	f000 fcfe 	bl	8000fb8 <__aeabi_dadd>
 80005bc:	bd70      	pop	{r4, r5, r6, pc}
 80005be:	46c0      	nop			; (mov r8, r8)
 80005c0:	41f00000 	.word	0x41f00000

080005c4 <__udivmoddi4>:
 80005c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005c6:	4657      	mov	r7, sl
 80005c8:	464e      	mov	r6, r9
 80005ca:	4645      	mov	r5, r8
 80005cc:	46de      	mov	lr, fp
 80005ce:	b5e0      	push	{r5, r6, r7, lr}
 80005d0:	0004      	movs	r4, r0
 80005d2:	000d      	movs	r5, r1
 80005d4:	4692      	mov	sl, r2
 80005d6:	4699      	mov	r9, r3
 80005d8:	b083      	sub	sp, #12
 80005da:	428b      	cmp	r3, r1
 80005dc:	d830      	bhi.n	8000640 <__udivmoddi4+0x7c>
 80005de:	d02d      	beq.n	800063c <__udivmoddi4+0x78>
 80005e0:	4649      	mov	r1, r9
 80005e2:	4650      	mov	r0, sl
 80005e4:	f002 fbbc 	bl	8002d60 <__clzdi2>
 80005e8:	0029      	movs	r1, r5
 80005ea:	0006      	movs	r6, r0
 80005ec:	0020      	movs	r0, r4
 80005ee:	f002 fbb7 	bl	8002d60 <__clzdi2>
 80005f2:	1a33      	subs	r3, r6, r0
 80005f4:	4698      	mov	r8, r3
 80005f6:	3b20      	subs	r3, #32
 80005f8:	469b      	mov	fp, r3
 80005fa:	d433      	bmi.n	8000664 <__udivmoddi4+0xa0>
 80005fc:	465a      	mov	r2, fp
 80005fe:	4653      	mov	r3, sl
 8000600:	4093      	lsls	r3, r2
 8000602:	4642      	mov	r2, r8
 8000604:	001f      	movs	r7, r3
 8000606:	4653      	mov	r3, sl
 8000608:	4093      	lsls	r3, r2
 800060a:	001e      	movs	r6, r3
 800060c:	42af      	cmp	r7, r5
 800060e:	d83a      	bhi.n	8000686 <__udivmoddi4+0xc2>
 8000610:	42af      	cmp	r7, r5
 8000612:	d100      	bne.n	8000616 <__udivmoddi4+0x52>
 8000614:	e078      	b.n	8000708 <__udivmoddi4+0x144>
 8000616:	465b      	mov	r3, fp
 8000618:	1ba4      	subs	r4, r4, r6
 800061a:	41bd      	sbcs	r5, r7
 800061c:	2b00      	cmp	r3, #0
 800061e:	da00      	bge.n	8000622 <__udivmoddi4+0x5e>
 8000620:	e075      	b.n	800070e <__udivmoddi4+0x14a>
 8000622:	2200      	movs	r2, #0
 8000624:	2300      	movs	r3, #0
 8000626:	9200      	str	r2, [sp, #0]
 8000628:	9301      	str	r3, [sp, #4]
 800062a:	2301      	movs	r3, #1
 800062c:	465a      	mov	r2, fp
 800062e:	4093      	lsls	r3, r2
 8000630:	9301      	str	r3, [sp, #4]
 8000632:	2301      	movs	r3, #1
 8000634:	4642      	mov	r2, r8
 8000636:	4093      	lsls	r3, r2
 8000638:	9300      	str	r3, [sp, #0]
 800063a:	e028      	b.n	800068e <__udivmoddi4+0xca>
 800063c:	4282      	cmp	r2, r0
 800063e:	d9cf      	bls.n	80005e0 <__udivmoddi4+0x1c>
 8000640:	2200      	movs	r2, #0
 8000642:	2300      	movs	r3, #0
 8000644:	9200      	str	r2, [sp, #0]
 8000646:	9301      	str	r3, [sp, #4]
 8000648:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800064a:	2b00      	cmp	r3, #0
 800064c:	d001      	beq.n	8000652 <__udivmoddi4+0x8e>
 800064e:	601c      	str	r4, [r3, #0]
 8000650:	605d      	str	r5, [r3, #4]
 8000652:	9800      	ldr	r0, [sp, #0]
 8000654:	9901      	ldr	r1, [sp, #4]
 8000656:	b003      	add	sp, #12
 8000658:	bcf0      	pop	{r4, r5, r6, r7}
 800065a:	46bb      	mov	fp, r7
 800065c:	46b2      	mov	sl, r6
 800065e:	46a9      	mov	r9, r5
 8000660:	46a0      	mov	r8, r4
 8000662:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000664:	4642      	mov	r2, r8
 8000666:	2320      	movs	r3, #32
 8000668:	1a9b      	subs	r3, r3, r2
 800066a:	4652      	mov	r2, sl
 800066c:	40da      	lsrs	r2, r3
 800066e:	4641      	mov	r1, r8
 8000670:	0013      	movs	r3, r2
 8000672:	464a      	mov	r2, r9
 8000674:	408a      	lsls	r2, r1
 8000676:	0017      	movs	r7, r2
 8000678:	4642      	mov	r2, r8
 800067a:	431f      	orrs	r7, r3
 800067c:	4653      	mov	r3, sl
 800067e:	4093      	lsls	r3, r2
 8000680:	001e      	movs	r6, r3
 8000682:	42af      	cmp	r7, r5
 8000684:	d9c4      	bls.n	8000610 <__udivmoddi4+0x4c>
 8000686:	2200      	movs	r2, #0
 8000688:	2300      	movs	r3, #0
 800068a:	9200      	str	r2, [sp, #0]
 800068c:	9301      	str	r3, [sp, #4]
 800068e:	4643      	mov	r3, r8
 8000690:	2b00      	cmp	r3, #0
 8000692:	d0d9      	beq.n	8000648 <__udivmoddi4+0x84>
 8000694:	07fb      	lsls	r3, r7, #31
 8000696:	0872      	lsrs	r2, r6, #1
 8000698:	431a      	orrs	r2, r3
 800069a:	4646      	mov	r6, r8
 800069c:	087b      	lsrs	r3, r7, #1
 800069e:	e00e      	b.n	80006be <__udivmoddi4+0xfa>
 80006a0:	42ab      	cmp	r3, r5
 80006a2:	d101      	bne.n	80006a8 <__udivmoddi4+0xe4>
 80006a4:	42a2      	cmp	r2, r4
 80006a6:	d80c      	bhi.n	80006c2 <__udivmoddi4+0xfe>
 80006a8:	1aa4      	subs	r4, r4, r2
 80006aa:	419d      	sbcs	r5, r3
 80006ac:	2001      	movs	r0, #1
 80006ae:	1924      	adds	r4, r4, r4
 80006b0:	416d      	adcs	r5, r5
 80006b2:	2100      	movs	r1, #0
 80006b4:	3e01      	subs	r6, #1
 80006b6:	1824      	adds	r4, r4, r0
 80006b8:	414d      	adcs	r5, r1
 80006ba:	2e00      	cmp	r6, #0
 80006bc:	d006      	beq.n	80006cc <__udivmoddi4+0x108>
 80006be:	42ab      	cmp	r3, r5
 80006c0:	d9ee      	bls.n	80006a0 <__udivmoddi4+0xdc>
 80006c2:	3e01      	subs	r6, #1
 80006c4:	1924      	adds	r4, r4, r4
 80006c6:	416d      	adcs	r5, r5
 80006c8:	2e00      	cmp	r6, #0
 80006ca:	d1f8      	bne.n	80006be <__udivmoddi4+0xfa>
 80006cc:	9800      	ldr	r0, [sp, #0]
 80006ce:	9901      	ldr	r1, [sp, #4]
 80006d0:	465b      	mov	r3, fp
 80006d2:	1900      	adds	r0, r0, r4
 80006d4:	4169      	adcs	r1, r5
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	db24      	blt.n	8000724 <__udivmoddi4+0x160>
 80006da:	002b      	movs	r3, r5
 80006dc:	465a      	mov	r2, fp
 80006de:	4644      	mov	r4, r8
 80006e0:	40d3      	lsrs	r3, r2
 80006e2:	002a      	movs	r2, r5
 80006e4:	40e2      	lsrs	r2, r4
 80006e6:	001c      	movs	r4, r3
 80006e8:	465b      	mov	r3, fp
 80006ea:	0015      	movs	r5, r2
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	db2a      	blt.n	8000746 <__udivmoddi4+0x182>
 80006f0:	0026      	movs	r6, r4
 80006f2:	409e      	lsls	r6, r3
 80006f4:	0033      	movs	r3, r6
 80006f6:	0026      	movs	r6, r4
 80006f8:	4647      	mov	r7, r8
 80006fa:	40be      	lsls	r6, r7
 80006fc:	0032      	movs	r2, r6
 80006fe:	1a80      	subs	r0, r0, r2
 8000700:	4199      	sbcs	r1, r3
 8000702:	9000      	str	r0, [sp, #0]
 8000704:	9101      	str	r1, [sp, #4]
 8000706:	e79f      	b.n	8000648 <__udivmoddi4+0x84>
 8000708:	42a3      	cmp	r3, r4
 800070a:	d8bc      	bhi.n	8000686 <__udivmoddi4+0xc2>
 800070c:	e783      	b.n	8000616 <__udivmoddi4+0x52>
 800070e:	4642      	mov	r2, r8
 8000710:	2320      	movs	r3, #32
 8000712:	2100      	movs	r1, #0
 8000714:	1a9b      	subs	r3, r3, r2
 8000716:	2200      	movs	r2, #0
 8000718:	9100      	str	r1, [sp, #0]
 800071a:	9201      	str	r2, [sp, #4]
 800071c:	2201      	movs	r2, #1
 800071e:	40da      	lsrs	r2, r3
 8000720:	9201      	str	r2, [sp, #4]
 8000722:	e786      	b.n	8000632 <__udivmoddi4+0x6e>
 8000724:	4642      	mov	r2, r8
 8000726:	2320      	movs	r3, #32
 8000728:	1a9b      	subs	r3, r3, r2
 800072a:	002a      	movs	r2, r5
 800072c:	4646      	mov	r6, r8
 800072e:	409a      	lsls	r2, r3
 8000730:	0023      	movs	r3, r4
 8000732:	40f3      	lsrs	r3, r6
 8000734:	4644      	mov	r4, r8
 8000736:	4313      	orrs	r3, r2
 8000738:	002a      	movs	r2, r5
 800073a:	40e2      	lsrs	r2, r4
 800073c:	001c      	movs	r4, r3
 800073e:	465b      	mov	r3, fp
 8000740:	0015      	movs	r5, r2
 8000742:	2b00      	cmp	r3, #0
 8000744:	dad4      	bge.n	80006f0 <__udivmoddi4+0x12c>
 8000746:	4642      	mov	r2, r8
 8000748:	002f      	movs	r7, r5
 800074a:	2320      	movs	r3, #32
 800074c:	0026      	movs	r6, r4
 800074e:	4097      	lsls	r7, r2
 8000750:	1a9b      	subs	r3, r3, r2
 8000752:	40de      	lsrs	r6, r3
 8000754:	003b      	movs	r3, r7
 8000756:	4333      	orrs	r3, r6
 8000758:	e7cd      	b.n	80006f6 <__udivmoddi4+0x132>
 800075a:	46c0      	nop			; (mov r8, r8)

0800075c <__aeabi_fdiv>:
 800075c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800075e:	464f      	mov	r7, r9
 8000760:	4646      	mov	r6, r8
 8000762:	46d6      	mov	lr, sl
 8000764:	0245      	lsls	r5, r0, #9
 8000766:	b5c0      	push	{r6, r7, lr}
 8000768:	0047      	lsls	r7, r0, #1
 800076a:	1c0c      	adds	r4, r1, #0
 800076c:	0a6d      	lsrs	r5, r5, #9
 800076e:	0e3f      	lsrs	r7, r7, #24
 8000770:	0fc6      	lsrs	r6, r0, #31
 8000772:	2f00      	cmp	r7, #0
 8000774:	d100      	bne.n	8000778 <__aeabi_fdiv+0x1c>
 8000776:	e070      	b.n	800085a <__aeabi_fdiv+0xfe>
 8000778:	2fff      	cmp	r7, #255	; 0xff
 800077a:	d100      	bne.n	800077e <__aeabi_fdiv+0x22>
 800077c:	e075      	b.n	800086a <__aeabi_fdiv+0x10e>
 800077e:	00eb      	lsls	r3, r5, #3
 8000780:	2580      	movs	r5, #128	; 0x80
 8000782:	04ed      	lsls	r5, r5, #19
 8000784:	431d      	orrs	r5, r3
 8000786:	2300      	movs	r3, #0
 8000788:	4699      	mov	r9, r3
 800078a:	469a      	mov	sl, r3
 800078c:	3f7f      	subs	r7, #127	; 0x7f
 800078e:	0260      	lsls	r0, r4, #9
 8000790:	0a43      	lsrs	r3, r0, #9
 8000792:	4698      	mov	r8, r3
 8000794:	0063      	lsls	r3, r4, #1
 8000796:	0e1b      	lsrs	r3, r3, #24
 8000798:	0fe4      	lsrs	r4, r4, #31
 800079a:	2b00      	cmp	r3, #0
 800079c:	d04e      	beq.n	800083c <__aeabi_fdiv+0xe0>
 800079e:	2bff      	cmp	r3, #255	; 0xff
 80007a0:	d046      	beq.n	8000830 <__aeabi_fdiv+0xd4>
 80007a2:	4642      	mov	r2, r8
 80007a4:	00d0      	lsls	r0, r2, #3
 80007a6:	2280      	movs	r2, #128	; 0x80
 80007a8:	04d2      	lsls	r2, r2, #19
 80007aa:	4302      	orrs	r2, r0
 80007ac:	4690      	mov	r8, r2
 80007ae:	2200      	movs	r2, #0
 80007b0:	3b7f      	subs	r3, #127	; 0x7f
 80007b2:	0031      	movs	r1, r6
 80007b4:	1aff      	subs	r7, r7, r3
 80007b6:	464b      	mov	r3, r9
 80007b8:	4061      	eors	r1, r4
 80007ba:	b2c9      	uxtb	r1, r1
 80007bc:	4313      	orrs	r3, r2
 80007be:	2b0f      	cmp	r3, #15
 80007c0:	d900      	bls.n	80007c4 <__aeabi_fdiv+0x68>
 80007c2:	e0b5      	b.n	8000930 <__aeabi_fdiv+0x1d4>
 80007c4:	486e      	ldr	r0, [pc, #440]	; (8000980 <__aeabi_fdiv+0x224>)
 80007c6:	009b      	lsls	r3, r3, #2
 80007c8:	58c3      	ldr	r3, [r0, r3]
 80007ca:	469f      	mov	pc, r3
 80007cc:	2300      	movs	r3, #0
 80007ce:	4698      	mov	r8, r3
 80007d0:	0026      	movs	r6, r4
 80007d2:	4645      	mov	r5, r8
 80007d4:	4692      	mov	sl, r2
 80007d6:	4653      	mov	r3, sl
 80007d8:	2b02      	cmp	r3, #2
 80007da:	d100      	bne.n	80007de <__aeabi_fdiv+0x82>
 80007dc:	e089      	b.n	80008f2 <__aeabi_fdiv+0x196>
 80007de:	2b03      	cmp	r3, #3
 80007e0:	d100      	bne.n	80007e4 <__aeabi_fdiv+0x88>
 80007e2:	e09e      	b.n	8000922 <__aeabi_fdiv+0x1c6>
 80007e4:	2b01      	cmp	r3, #1
 80007e6:	d018      	beq.n	800081a <__aeabi_fdiv+0xbe>
 80007e8:	003b      	movs	r3, r7
 80007ea:	337f      	adds	r3, #127	; 0x7f
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	dd69      	ble.n	80008c4 <__aeabi_fdiv+0x168>
 80007f0:	076a      	lsls	r2, r5, #29
 80007f2:	d004      	beq.n	80007fe <__aeabi_fdiv+0xa2>
 80007f4:	220f      	movs	r2, #15
 80007f6:	402a      	ands	r2, r5
 80007f8:	2a04      	cmp	r2, #4
 80007fa:	d000      	beq.n	80007fe <__aeabi_fdiv+0xa2>
 80007fc:	3504      	adds	r5, #4
 80007fe:	012a      	lsls	r2, r5, #4
 8000800:	d503      	bpl.n	800080a <__aeabi_fdiv+0xae>
 8000802:	4b60      	ldr	r3, [pc, #384]	; (8000984 <__aeabi_fdiv+0x228>)
 8000804:	401d      	ands	r5, r3
 8000806:	003b      	movs	r3, r7
 8000808:	3380      	adds	r3, #128	; 0x80
 800080a:	2bfe      	cmp	r3, #254	; 0xfe
 800080c:	dd00      	ble.n	8000810 <__aeabi_fdiv+0xb4>
 800080e:	e070      	b.n	80008f2 <__aeabi_fdiv+0x196>
 8000810:	01ad      	lsls	r5, r5, #6
 8000812:	0a6d      	lsrs	r5, r5, #9
 8000814:	b2d8      	uxtb	r0, r3
 8000816:	e002      	b.n	800081e <__aeabi_fdiv+0xc2>
 8000818:	000e      	movs	r6, r1
 800081a:	2000      	movs	r0, #0
 800081c:	2500      	movs	r5, #0
 800081e:	05c0      	lsls	r0, r0, #23
 8000820:	4328      	orrs	r0, r5
 8000822:	07f6      	lsls	r6, r6, #31
 8000824:	4330      	orrs	r0, r6
 8000826:	bce0      	pop	{r5, r6, r7}
 8000828:	46ba      	mov	sl, r7
 800082a:	46b1      	mov	r9, r6
 800082c:	46a8      	mov	r8, r5
 800082e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000830:	4643      	mov	r3, r8
 8000832:	2b00      	cmp	r3, #0
 8000834:	d13f      	bne.n	80008b6 <__aeabi_fdiv+0x15a>
 8000836:	2202      	movs	r2, #2
 8000838:	3fff      	subs	r7, #255	; 0xff
 800083a:	e003      	b.n	8000844 <__aeabi_fdiv+0xe8>
 800083c:	4643      	mov	r3, r8
 800083e:	2b00      	cmp	r3, #0
 8000840:	d12d      	bne.n	800089e <__aeabi_fdiv+0x142>
 8000842:	2201      	movs	r2, #1
 8000844:	0031      	movs	r1, r6
 8000846:	464b      	mov	r3, r9
 8000848:	4061      	eors	r1, r4
 800084a:	b2c9      	uxtb	r1, r1
 800084c:	4313      	orrs	r3, r2
 800084e:	2b0f      	cmp	r3, #15
 8000850:	d834      	bhi.n	80008bc <__aeabi_fdiv+0x160>
 8000852:	484d      	ldr	r0, [pc, #308]	; (8000988 <__aeabi_fdiv+0x22c>)
 8000854:	009b      	lsls	r3, r3, #2
 8000856:	58c3      	ldr	r3, [r0, r3]
 8000858:	469f      	mov	pc, r3
 800085a:	2d00      	cmp	r5, #0
 800085c:	d113      	bne.n	8000886 <__aeabi_fdiv+0x12a>
 800085e:	2304      	movs	r3, #4
 8000860:	4699      	mov	r9, r3
 8000862:	3b03      	subs	r3, #3
 8000864:	2700      	movs	r7, #0
 8000866:	469a      	mov	sl, r3
 8000868:	e791      	b.n	800078e <__aeabi_fdiv+0x32>
 800086a:	2d00      	cmp	r5, #0
 800086c:	d105      	bne.n	800087a <__aeabi_fdiv+0x11e>
 800086e:	2308      	movs	r3, #8
 8000870:	4699      	mov	r9, r3
 8000872:	3b06      	subs	r3, #6
 8000874:	27ff      	movs	r7, #255	; 0xff
 8000876:	469a      	mov	sl, r3
 8000878:	e789      	b.n	800078e <__aeabi_fdiv+0x32>
 800087a:	230c      	movs	r3, #12
 800087c:	4699      	mov	r9, r3
 800087e:	3b09      	subs	r3, #9
 8000880:	27ff      	movs	r7, #255	; 0xff
 8000882:	469a      	mov	sl, r3
 8000884:	e783      	b.n	800078e <__aeabi_fdiv+0x32>
 8000886:	0028      	movs	r0, r5
 8000888:	f002 fa4c 	bl	8002d24 <__clzsi2>
 800088c:	2776      	movs	r7, #118	; 0x76
 800088e:	1f43      	subs	r3, r0, #5
 8000890:	409d      	lsls	r5, r3
 8000892:	2300      	movs	r3, #0
 8000894:	427f      	negs	r7, r7
 8000896:	4699      	mov	r9, r3
 8000898:	469a      	mov	sl, r3
 800089a:	1a3f      	subs	r7, r7, r0
 800089c:	e777      	b.n	800078e <__aeabi_fdiv+0x32>
 800089e:	4640      	mov	r0, r8
 80008a0:	f002 fa40 	bl	8002d24 <__clzsi2>
 80008a4:	4642      	mov	r2, r8
 80008a6:	1f43      	subs	r3, r0, #5
 80008a8:	409a      	lsls	r2, r3
 80008aa:	2376      	movs	r3, #118	; 0x76
 80008ac:	425b      	negs	r3, r3
 80008ae:	4690      	mov	r8, r2
 80008b0:	1a1b      	subs	r3, r3, r0
 80008b2:	2200      	movs	r2, #0
 80008b4:	e77d      	b.n	80007b2 <__aeabi_fdiv+0x56>
 80008b6:	23ff      	movs	r3, #255	; 0xff
 80008b8:	2203      	movs	r2, #3
 80008ba:	e77a      	b.n	80007b2 <__aeabi_fdiv+0x56>
 80008bc:	000e      	movs	r6, r1
 80008be:	20ff      	movs	r0, #255	; 0xff
 80008c0:	2500      	movs	r5, #0
 80008c2:	e7ac      	b.n	800081e <__aeabi_fdiv+0xc2>
 80008c4:	2001      	movs	r0, #1
 80008c6:	1ac0      	subs	r0, r0, r3
 80008c8:	281b      	cmp	r0, #27
 80008ca:	dca6      	bgt.n	800081a <__aeabi_fdiv+0xbe>
 80008cc:	379e      	adds	r7, #158	; 0x9e
 80008ce:	002a      	movs	r2, r5
 80008d0:	40bd      	lsls	r5, r7
 80008d2:	40c2      	lsrs	r2, r0
 80008d4:	1e6b      	subs	r3, r5, #1
 80008d6:	419d      	sbcs	r5, r3
 80008d8:	4315      	orrs	r5, r2
 80008da:	076b      	lsls	r3, r5, #29
 80008dc:	d004      	beq.n	80008e8 <__aeabi_fdiv+0x18c>
 80008de:	230f      	movs	r3, #15
 80008e0:	402b      	ands	r3, r5
 80008e2:	2b04      	cmp	r3, #4
 80008e4:	d000      	beq.n	80008e8 <__aeabi_fdiv+0x18c>
 80008e6:	3504      	adds	r5, #4
 80008e8:	016b      	lsls	r3, r5, #5
 80008ea:	d544      	bpl.n	8000976 <__aeabi_fdiv+0x21a>
 80008ec:	2001      	movs	r0, #1
 80008ee:	2500      	movs	r5, #0
 80008f0:	e795      	b.n	800081e <__aeabi_fdiv+0xc2>
 80008f2:	20ff      	movs	r0, #255	; 0xff
 80008f4:	2500      	movs	r5, #0
 80008f6:	e792      	b.n	800081e <__aeabi_fdiv+0xc2>
 80008f8:	2580      	movs	r5, #128	; 0x80
 80008fa:	2600      	movs	r6, #0
 80008fc:	20ff      	movs	r0, #255	; 0xff
 80008fe:	03ed      	lsls	r5, r5, #15
 8000900:	e78d      	b.n	800081e <__aeabi_fdiv+0xc2>
 8000902:	2300      	movs	r3, #0
 8000904:	4698      	mov	r8, r3
 8000906:	2080      	movs	r0, #128	; 0x80
 8000908:	03c0      	lsls	r0, r0, #15
 800090a:	4205      	tst	r5, r0
 800090c:	d009      	beq.n	8000922 <__aeabi_fdiv+0x1c6>
 800090e:	4643      	mov	r3, r8
 8000910:	4203      	tst	r3, r0
 8000912:	d106      	bne.n	8000922 <__aeabi_fdiv+0x1c6>
 8000914:	4645      	mov	r5, r8
 8000916:	4305      	orrs	r5, r0
 8000918:	026d      	lsls	r5, r5, #9
 800091a:	0026      	movs	r6, r4
 800091c:	20ff      	movs	r0, #255	; 0xff
 800091e:	0a6d      	lsrs	r5, r5, #9
 8000920:	e77d      	b.n	800081e <__aeabi_fdiv+0xc2>
 8000922:	2080      	movs	r0, #128	; 0x80
 8000924:	03c0      	lsls	r0, r0, #15
 8000926:	4305      	orrs	r5, r0
 8000928:	026d      	lsls	r5, r5, #9
 800092a:	20ff      	movs	r0, #255	; 0xff
 800092c:	0a6d      	lsrs	r5, r5, #9
 800092e:	e776      	b.n	800081e <__aeabi_fdiv+0xc2>
 8000930:	4642      	mov	r2, r8
 8000932:	016b      	lsls	r3, r5, #5
 8000934:	0150      	lsls	r0, r2, #5
 8000936:	4283      	cmp	r3, r0
 8000938:	d219      	bcs.n	800096e <__aeabi_fdiv+0x212>
 800093a:	221b      	movs	r2, #27
 800093c:	2500      	movs	r5, #0
 800093e:	3f01      	subs	r7, #1
 8000940:	2601      	movs	r6, #1
 8000942:	001c      	movs	r4, r3
 8000944:	006d      	lsls	r5, r5, #1
 8000946:	005b      	lsls	r3, r3, #1
 8000948:	2c00      	cmp	r4, #0
 800094a:	db01      	blt.n	8000950 <__aeabi_fdiv+0x1f4>
 800094c:	4298      	cmp	r0, r3
 800094e:	d801      	bhi.n	8000954 <__aeabi_fdiv+0x1f8>
 8000950:	1a1b      	subs	r3, r3, r0
 8000952:	4335      	orrs	r5, r6
 8000954:	3a01      	subs	r2, #1
 8000956:	2a00      	cmp	r2, #0
 8000958:	d1f3      	bne.n	8000942 <__aeabi_fdiv+0x1e6>
 800095a:	1e5a      	subs	r2, r3, #1
 800095c:	4193      	sbcs	r3, r2
 800095e:	431d      	orrs	r5, r3
 8000960:	003b      	movs	r3, r7
 8000962:	337f      	adds	r3, #127	; 0x7f
 8000964:	000e      	movs	r6, r1
 8000966:	2b00      	cmp	r3, #0
 8000968:	dd00      	ble.n	800096c <__aeabi_fdiv+0x210>
 800096a:	e741      	b.n	80007f0 <__aeabi_fdiv+0x94>
 800096c:	e7aa      	b.n	80008c4 <__aeabi_fdiv+0x168>
 800096e:	221a      	movs	r2, #26
 8000970:	2501      	movs	r5, #1
 8000972:	1a1b      	subs	r3, r3, r0
 8000974:	e7e4      	b.n	8000940 <__aeabi_fdiv+0x1e4>
 8000976:	01ad      	lsls	r5, r5, #6
 8000978:	2000      	movs	r0, #0
 800097a:	0a6d      	lsrs	r5, r5, #9
 800097c:	e74f      	b.n	800081e <__aeabi_fdiv+0xc2>
 800097e:	46c0      	nop			; (mov r8, r8)
 8000980:	0800ab3c 	.word	0x0800ab3c
 8000984:	f7ffffff 	.word	0xf7ffffff
 8000988:	0800ab7c 	.word	0x0800ab7c

0800098c <__aeabi_fmul>:
 800098c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800098e:	464f      	mov	r7, r9
 8000990:	4646      	mov	r6, r8
 8000992:	46d6      	mov	lr, sl
 8000994:	0244      	lsls	r4, r0, #9
 8000996:	0045      	lsls	r5, r0, #1
 8000998:	b5c0      	push	{r6, r7, lr}
 800099a:	0a64      	lsrs	r4, r4, #9
 800099c:	1c0f      	adds	r7, r1, #0
 800099e:	0e2d      	lsrs	r5, r5, #24
 80009a0:	0fc6      	lsrs	r6, r0, #31
 80009a2:	2d00      	cmp	r5, #0
 80009a4:	d100      	bne.n	80009a8 <__aeabi_fmul+0x1c>
 80009a6:	e08d      	b.n	8000ac4 <__aeabi_fmul+0x138>
 80009a8:	2dff      	cmp	r5, #255	; 0xff
 80009aa:	d100      	bne.n	80009ae <__aeabi_fmul+0x22>
 80009ac:	e092      	b.n	8000ad4 <__aeabi_fmul+0x148>
 80009ae:	2300      	movs	r3, #0
 80009b0:	2080      	movs	r0, #128	; 0x80
 80009b2:	4699      	mov	r9, r3
 80009b4:	469a      	mov	sl, r3
 80009b6:	00e4      	lsls	r4, r4, #3
 80009b8:	04c0      	lsls	r0, r0, #19
 80009ba:	4304      	orrs	r4, r0
 80009bc:	3d7f      	subs	r5, #127	; 0x7f
 80009be:	0278      	lsls	r0, r7, #9
 80009c0:	0a43      	lsrs	r3, r0, #9
 80009c2:	4698      	mov	r8, r3
 80009c4:	007b      	lsls	r3, r7, #1
 80009c6:	0e1b      	lsrs	r3, r3, #24
 80009c8:	0fff      	lsrs	r7, r7, #31
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d100      	bne.n	80009d0 <__aeabi_fmul+0x44>
 80009ce:	e070      	b.n	8000ab2 <__aeabi_fmul+0x126>
 80009d0:	2bff      	cmp	r3, #255	; 0xff
 80009d2:	d100      	bne.n	80009d6 <__aeabi_fmul+0x4a>
 80009d4:	e086      	b.n	8000ae4 <__aeabi_fmul+0x158>
 80009d6:	4642      	mov	r2, r8
 80009d8:	00d0      	lsls	r0, r2, #3
 80009da:	2280      	movs	r2, #128	; 0x80
 80009dc:	3b7f      	subs	r3, #127	; 0x7f
 80009de:	18ed      	adds	r5, r5, r3
 80009e0:	2300      	movs	r3, #0
 80009e2:	04d2      	lsls	r2, r2, #19
 80009e4:	4302      	orrs	r2, r0
 80009e6:	4690      	mov	r8, r2
 80009e8:	469c      	mov	ip, r3
 80009ea:	0031      	movs	r1, r6
 80009ec:	464b      	mov	r3, r9
 80009ee:	4079      	eors	r1, r7
 80009f0:	1c68      	adds	r0, r5, #1
 80009f2:	2b0f      	cmp	r3, #15
 80009f4:	d81c      	bhi.n	8000a30 <__aeabi_fmul+0xa4>
 80009f6:	4a76      	ldr	r2, [pc, #472]	; (8000bd0 <__aeabi_fmul+0x244>)
 80009f8:	009b      	lsls	r3, r3, #2
 80009fa:	58d3      	ldr	r3, [r2, r3]
 80009fc:	469f      	mov	pc, r3
 80009fe:	0039      	movs	r1, r7
 8000a00:	4644      	mov	r4, r8
 8000a02:	46e2      	mov	sl, ip
 8000a04:	4653      	mov	r3, sl
 8000a06:	2b02      	cmp	r3, #2
 8000a08:	d00f      	beq.n	8000a2a <__aeabi_fmul+0x9e>
 8000a0a:	2b03      	cmp	r3, #3
 8000a0c:	d100      	bne.n	8000a10 <__aeabi_fmul+0x84>
 8000a0e:	e0d7      	b.n	8000bc0 <__aeabi_fmul+0x234>
 8000a10:	2b01      	cmp	r3, #1
 8000a12:	d137      	bne.n	8000a84 <__aeabi_fmul+0xf8>
 8000a14:	2000      	movs	r0, #0
 8000a16:	2400      	movs	r4, #0
 8000a18:	05c0      	lsls	r0, r0, #23
 8000a1a:	4320      	orrs	r0, r4
 8000a1c:	07c9      	lsls	r1, r1, #31
 8000a1e:	4308      	orrs	r0, r1
 8000a20:	bce0      	pop	{r5, r6, r7}
 8000a22:	46ba      	mov	sl, r7
 8000a24:	46b1      	mov	r9, r6
 8000a26:	46a8      	mov	r8, r5
 8000a28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a2a:	20ff      	movs	r0, #255	; 0xff
 8000a2c:	2400      	movs	r4, #0
 8000a2e:	e7f3      	b.n	8000a18 <__aeabi_fmul+0x8c>
 8000a30:	0c26      	lsrs	r6, r4, #16
 8000a32:	0424      	lsls	r4, r4, #16
 8000a34:	0c22      	lsrs	r2, r4, #16
 8000a36:	4644      	mov	r4, r8
 8000a38:	0424      	lsls	r4, r4, #16
 8000a3a:	0c24      	lsrs	r4, r4, #16
 8000a3c:	4643      	mov	r3, r8
 8000a3e:	0027      	movs	r7, r4
 8000a40:	0c1b      	lsrs	r3, r3, #16
 8000a42:	4357      	muls	r7, r2
 8000a44:	4374      	muls	r4, r6
 8000a46:	435a      	muls	r2, r3
 8000a48:	435e      	muls	r6, r3
 8000a4a:	1912      	adds	r2, r2, r4
 8000a4c:	0c3b      	lsrs	r3, r7, #16
 8000a4e:	189b      	adds	r3, r3, r2
 8000a50:	429c      	cmp	r4, r3
 8000a52:	d903      	bls.n	8000a5c <__aeabi_fmul+0xd0>
 8000a54:	2280      	movs	r2, #128	; 0x80
 8000a56:	0252      	lsls	r2, r2, #9
 8000a58:	4694      	mov	ip, r2
 8000a5a:	4466      	add	r6, ip
 8000a5c:	043f      	lsls	r7, r7, #16
 8000a5e:	041a      	lsls	r2, r3, #16
 8000a60:	0c3f      	lsrs	r7, r7, #16
 8000a62:	19d2      	adds	r2, r2, r7
 8000a64:	0194      	lsls	r4, r2, #6
 8000a66:	1e67      	subs	r7, r4, #1
 8000a68:	41bc      	sbcs	r4, r7
 8000a6a:	0c1b      	lsrs	r3, r3, #16
 8000a6c:	0e92      	lsrs	r2, r2, #26
 8000a6e:	199b      	adds	r3, r3, r6
 8000a70:	4314      	orrs	r4, r2
 8000a72:	019b      	lsls	r3, r3, #6
 8000a74:	431c      	orrs	r4, r3
 8000a76:	011b      	lsls	r3, r3, #4
 8000a78:	d400      	bmi.n	8000a7c <__aeabi_fmul+0xf0>
 8000a7a:	e09b      	b.n	8000bb4 <__aeabi_fmul+0x228>
 8000a7c:	2301      	movs	r3, #1
 8000a7e:	0862      	lsrs	r2, r4, #1
 8000a80:	401c      	ands	r4, r3
 8000a82:	4314      	orrs	r4, r2
 8000a84:	0002      	movs	r2, r0
 8000a86:	327f      	adds	r2, #127	; 0x7f
 8000a88:	2a00      	cmp	r2, #0
 8000a8a:	dd64      	ble.n	8000b56 <__aeabi_fmul+0x1ca>
 8000a8c:	0763      	lsls	r3, r4, #29
 8000a8e:	d004      	beq.n	8000a9a <__aeabi_fmul+0x10e>
 8000a90:	230f      	movs	r3, #15
 8000a92:	4023      	ands	r3, r4
 8000a94:	2b04      	cmp	r3, #4
 8000a96:	d000      	beq.n	8000a9a <__aeabi_fmul+0x10e>
 8000a98:	3404      	adds	r4, #4
 8000a9a:	0123      	lsls	r3, r4, #4
 8000a9c:	d503      	bpl.n	8000aa6 <__aeabi_fmul+0x11a>
 8000a9e:	0002      	movs	r2, r0
 8000aa0:	4b4c      	ldr	r3, [pc, #304]	; (8000bd4 <__aeabi_fmul+0x248>)
 8000aa2:	3280      	adds	r2, #128	; 0x80
 8000aa4:	401c      	ands	r4, r3
 8000aa6:	2afe      	cmp	r2, #254	; 0xfe
 8000aa8:	dcbf      	bgt.n	8000a2a <__aeabi_fmul+0x9e>
 8000aaa:	01a4      	lsls	r4, r4, #6
 8000aac:	0a64      	lsrs	r4, r4, #9
 8000aae:	b2d0      	uxtb	r0, r2
 8000ab0:	e7b2      	b.n	8000a18 <__aeabi_fmul+0x8c>
 8000ab2:	4643      	mov	r3, r8
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d13d      	bne.n	8000b34 <__aeabi_fmul+0x1a8>
 8000ab8:	464a      	mov	r2, r9
 8000aba:	3301      	adds	r3, #1
 8000abc:	431a      	orrs	r2, r3
 8000abe:	4691      	mov	r9, r2
 8000ac0:	469c      	mov	ip, r3
 8000ac2:	e792      	b.n	80009ea <__aeabi_fmul+0x5e>
 8000ac4:	2c00      	cmp	r4, #0
 8000ac6:	d129      	bne.n	8000b1c <__aeabi_fmul+0x190>
 8000ac8:	2304      	movs	r3, #4
 8000aca:	4699      	mov	r9, r3
 8000acc:	3b03      	subs	r3, #3
 8000ace:	2500      	movs	r5, #0
 8000ad0:	469a      	mov	sl, r3
 8000ad2:	e774      	b.n	80009be <__aeabi_fmul+0x32>
 8000ad4:	2c00      	cmp	r4, #0
 8000ad6:	d11b      	bne.n	8000b10 <__aeabi_fmul+0x184>
 8000ad8:	2308      	movs	r3, #8
 8000ada:	4699      	mov	r9, r3
 8000adc:	3b06      	subs	r3, #6
 8000ade:	25ff      	movs	r5, #255	; 0xff
 8000ae0:	469a      	mov	sl, r3
 8000ae2:	e76c      	b.n	80009be <__aeabi_fmul+0x32>
 8000ae4:	4643      	mov	r3, r8
 8000ae6:	35ff      	adds	r5, #255	; 0xff
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d10b      	bne.n	8000b04 <__aeabi_fmul+0x178>
 8000aec:	2302      	movs	r3, #2
 8000aee:	464a      	mov	r2, r9
 8000af0:	431a      	orrs	r2, r3
 8000af2:	4691      	mov	r9, r2
 8000af4:	469c      	mov	ip, r3
 8000af6:	e778      	b.n	80009ea <__aeabi_fmul+0x5e>
 8000af8:	4653      	mov	r3, sl
 8000afa:	0031      	movs	r1, r6
 8000afc:	2b02      	cmp	r3, #2
 8000afe:	d000      	beq.n	8000b02 <__aeabi_fmul+0x176>
 8000b00:	e783      	b.n	8000a0a <__aeabi_fmul+0x7e>
 8000b02:	e792      	b.n	8000a2a <__aeabi_fmul+0x9e>
 8000b04:	2303      	movs	r3, #3
 8000b06:	464a      	mov	r2, r9
 8000b08:	431a      	orrs	r2, r3
 8000b0a:	4691      	mov	r9, r2
 8000b0c:	469c      	mov	ip, r3
 8000b0e:	e76c      	b.n	80009ea <__aeabi_fmul+0x5e>
 8000b10:	230c      	movs	r3, #12
 8000b12:	4699      	mov	r9, r3
 8000b14:	3b09      	subs	r3, #9
 8000b16:	25ff      	movs	r5, #255	; 0xff
 8000b18:	469a      	mov	sl, r3
 8000b1a:	e750      	b.n	80009be <__aeabi_fmul+0x32>
 8000b1c:	0020      	movs	r0, r4
 8000b1e:	f002 f901 	bl	8002d24 <__clzsi2>
 8000b22:	2576      	movs	r5, #118	; 0x76
 8000b24:	1f43      	subs	r3, r0, #5
 8000b26:	409c      	lsls	r4, r3
 8000b28:	2300      	movs	r3, #0
 8000b2a:	426d      	negs	r5, r5
 8000b2c:	4699      	mov	r9, r3
 8000b2e:	469a      	mov	sl, r3
 8000b30:	1a2d      	subs	r5, r5, r0
 8000b32:	e744      	b.n	80009be <__aeabi_fmul+0x32>
 8000b34:	4640      	mov	r0, r8
 8000b36:	f002 f8f5 	bl	8002d24 <__clzsi2>
 8000b3a:	4642      	mov	r2, r8
 8000b3c:	1f43      	subs	r3, r0, #5
 8000b3e:	409a      	lsls	r2, r3
 8000b40:	2300      	movs	r3, #0
 8000b42:	1a2d      	subs	r5, r5, r0
 8000b44:	4690      	mov	r8, r2
 8000b46:	469c      	mov	ip, r3
 8000b48:	3d76      	subs	r5, #118	; 0x76
 8000b4a:	e74e      	b.n	80009ea <__aeabi_fmul+0x5e>
 8000b4c:	2480      	movs	r4, #128	; 0x80
 8000b4e:	2100      	movs	r1, #0
 8000b50:	20ff      	movs	r0, #255	; 0xff
 8000b52:	03e4      	lsls	r4, r4, #15
 8000b54:	e760      	b.n	8000a18 <__aeabi_fmul+0x8c>
 8000b56:	2301      	movs	r3, #1
 8000b58:	1a9b      	subs	r3, r3, r2
 8000b5a:	2b1b      	cmp	r3, #27
 8000b5c:	dd00      	ble.n	8000b60 <__aeabi_fmul+0x1d4>
 8000b5e:	e759      	b.n	8000a14 <__aeabi_fmul+0x88>
 8000b60:	0022      	movs	r2, r4
 8000b62:	309e      	adds	r0, #158	; 0x9e
 8000b64:	40da      	lsrs	r2, r3
 8000b66:	4084      	lsls	r4, r0
 8000b68:	0013      	movs	r3, r2
 8000b6a:	1e62      	subs	r2, r4, #1
 8000b6c:	4194      	sbcs	r4, r2
 8000b6e:	431c      	orrs	r4, r3
 8000b70:	0763      	lsls	r3, r4, #29
 8000b72:	d004      	beq.n	8000b7e <__aeabi_fmul+0x1f2>
 8000b74:	230f      	movs	r3, #15
 8000b76:	4023      	ands	r3, r4
 8000b78:	2b04      	cmp	r3, #4
 8000b7a:	d000      	beq.n	8000b7e <__aeabi_fmul+0x1f2>
 8000b7c:	3404      	adds	r4, #4
 8000b7e:	0163      	lsls	r3, r4, #5
 8000b80:	d51a      	bpl.n	8000bb8 <__aeabi_fmul+0x22c>
 8000b82:	2001      	movs	r0, #1
 8000b84:	2400      	movs	r4, #0
 8000b86:	e747      	b.n	8000a18 <__aeabi_fmul+0x8c>
 8000b88:	2080      	movs	r0, #128	; 0x80
 8000b8a:	03c0      	lsls	r0, r0, #15
 8000b8c:	4204      	tst	r4, r0
 8000b8e:	d009      	beq.n	8000ba4 <__aeabi_fmul+0x218>
 8000b90:	4643      	mov	r3, r8
 8000b92:	4203      	tst	r3, r0
 8000b94:	d106      	bne.n	8000ba4 <__aeabi_fmul+0x218>
 8000b96:	4644      	mov	r4, r8
 8000b98:	4304      	orrs	r4, r0
 8000b9a:	0264      	lsls	r4, r4, #9
 8000b9c:	0039      	movs	r1, r7
 8000b9e:	20ff      	movs	r0, #255	; 0xff
 8000ba0:	0a64      	lsrs	r4, r4, #9
 8000ba2:	e739      	b.n	8000a18 <__aeabi_fmul+0x8c>
 8000ba4:	2080      	movs	r0, #128	; 0x80
 8000ba6:	03c0      	lsls	r0, r0, #15
 8000ba8:	4304      	orrs	r4, r0
 8000baa:	0264      	lsls	r4, r4, #9
 8000bac:	0031      	movs	r1, r6
 8000bae:	20ff      	movs	r0, #255	; 0xff
 8000bb0:	0a64      	lsrs	r4, r4, #9
 8000bb2:	e731      	b.n	8000a18 <__aeabi_fmul+0x8c>
 8000bb4:	0028      	movs	r0, r5
 8000bb6:	e765      	b.n	8000a84 <__aeabi_fmul+0xf8>
 8000bb8:	01a4      	lsls	r4, r4, #6
 8000bba:	2000      	movs	r0, #0
 8000bbc:	0a64      	lsrs	r4, r4, #9
 8000bbe:	e72b      	b.n	8000a18 <__aeabi_fmul+0x8c>
 8000bc0:	2080      	movs	r0, #128	; 0x80
 8000bc2:	03c0      	lsls	r0, r0, #15
 8000bc4:	4304      	orrs	r4, r0
 8000bc6:	0264      	lsls	r4, r4, #9
 8000bc8:	20ff      	movs	r0, #255	; 0xff
 8000bca:	0a64      	lsrs	r4, r4, #9
 8000bcc:	e724      	b.n	8000a18 <__aeabi_fmul+0x8c>
 8000bce:	46c0      	nop			; (mov r8, r8)
 8000bd0:	0800abbc 	.word	0x0800abbc
 8000bd4:	f7ffffff 	.word	0xf7ffffff

08000bd8 <__aeabi_fsub>:
 8000bd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000bda:	46ce      	mov	lr, r9
 8000bdc:	4647      	mov	r7, r8
 8000bde:	0243      	lsls	r3, r0, #9
 8000be0:	0a5b      	lsrs	r3, r3, #9
 8000be2:	024e      	lsls	r6, r1, #9
 8000be4:	00da      	lsls	r2, r3, #3
 8000be6:	4694      	mov	ip, r2
 8000be8:	0a72      	lsrs	r2, r6, #9
 8000bea:	4691      	mov	r9, r2
 8000bec:	0045      	lsls	r5, r0, #1
 8000bee:	004a      	lsls	r2, r1, #1
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	0e2d      	lsrs	r5, r5, #24
 8000bf4:	001f      	movs	r7, r3
 8000bf6:	0fc4      	lsrs	r4, r0, #31
 8000bf8:	0e12      	lsrs	r2, r2, #24
 8000bfa:	0fc9      	lsrs	r1, r1, #31
 8000bfc:	09b6      	lsrs	r6, r6, #6
 8000bfe:	2aff      	cmp	r2, #255	; 0xff
 8000c00:	d05b      	beq.n	8000cba <__aeabi_fsub+0xe2>
 8000c02:	2001      	movs	r0, #1
 8000c04:	4041      	eors	r1, r0
 8000c06:	428c      	cmp	r4, r1
 8000c08:	d039      	beq.n	8000c7e <__aeabi_fsub+0xa6>
 8000c0a:	1aa8      	subs	r0, r5, r2
 8000c0c:	2800      	cmp	r0, #0
 8000c0e:	dd5a      	ble.n	8000cc6 <__aeabi_fsub+0xee>
 8000c10:	2a00      	cmp	r2, #0
 8000c12:	d06a      	beq.n	8000cea <__aeabi_fsub+0x112>
 8000c14:	2dff      	cmp	r5, #255	; 0xff
 8000c16:	d100      	bne.n	8000c1a <__aeabi_fsub+0x42>
 8000c18:	e0d9      	b.n	8000dce <__aeabi_fsub+0x1f6>
 8000c1a:	2280      	movs	r2, #128	; 0x80
 8000c1c:	04d2      	lsls	r2, r2, #19
 8000c1e:	4316      	orrs	r6, r2
 8000c20:	281b      	cmp	r0, #27
 8000c22:	dc00      	bgt.n	8000c26 <__aeabi_fsub+0x4e>
 8000c24:	e0e9      	b.n	8000dfa <__aeabi_fsub+0x222>
 8000c26:	2001      	movs	r0, #1
 8000c28:	4663      	mov	r3, ip
 8000c2a:	1a18      	subs	r0, r3, r0
 8000c2c:	0143      	lsls	r3, r0, #5
 8000c2e:	d400      	bmi.n	8000c32 <__aeabi_fsub+0x5a>
 8000c30:	e0b4      	b.n	8000d9c <__aeabi_fsub+0x1c4>
 8000c32:	0180      	lsls	r0, r0, #6
 8000c34:	0987      	lsrs	r7, r0, #6
 8000c36:	0038      	movs	r0, r7
 8000c38:	f002 f874 	bl	8002d24 <__clzsi2>
 8000c3c:	3805      	subs	r0, #5
 8000c3e:	4087      	lsls	r7, r0
 8000c40:	4285      	cmp	r5, r0
 8000c42:	dc00      	bgt.n	8000c46 <__aeabi_fsub+0x6e>
 8000c44:	e0cc      	b.n	8000de0 <__aeabi_fsub+0x208>
 8000c46:	1a2d      	subs	r5, r5, r0
 8000c48:	48b5      	ldr	r0, [pc, #724]	; (8000f20 <__aeabi_fsub+0x348>)
 8000c4a:	4038      	ands	r0, r7
 8000c4c:	0743      	lsls	r3, r0, #29
 8000c4e:	d004      	beq.n	8000c5a <__aeabi_fsub+0x82>
 8000c50:	230f      	movs	r3, #15
 8000c52:	4003      	ands	r3, r0
 8000c54:	2b04      	cmp	r3, #4
 8000c56:	d000      	beq.n	8000c5a <__aeabi_fsub+0x82>
 8000c58:	3004      	adds	r0, #4
 8000c5a:	0143      	lsls	r3, r0, #5
 8000c5c:	d400      	bmi.n	8000c60 <__aeabi_fsub+0x88>
 8000c5e:	e0a0      	b.n	8000da2 <__aeabi_fsub+0x1ca>
 8000c60:	1c6a      	adds	r2, r5, #1
 8000c62:	2dfe      	cmp	r5, #254	; 0xfe
 8000c64:	d100      	bne.n	8000c68 <__aeabi_fsub+0x90>
 8000c66:	e08d      	b.n	8000d84 <__aeabi_fsub+0x1ac>
 8000c68:	0180      	lsls	r0, r0, #6
 8000c6a:	0a47      	lsrs	r7, r0, #9
 8000c6c:	b2d2      	uxtb	r2, r2
 8000c6e:	05d0      	lsls	r0, r2, #23
 8000c70:	4338      	orrs	r0, r7
 8000c72:	07e4      	lsls	r4, r4, #31
 8000c74:	4320      	orrs	r0, r4
 8000c76:	bcc0      	pop	{r6, r7}
 8000c78:	46b9      	mov	r9, r7
 8000c7a:	46b0      	mov	r8, r6
 8000c7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000c7e:	1aa8      	subs	r0, r5, r2
 8000c80:	4680      	mov	r8, r0
 8000c82:	2800      	cmp	r0, #0
 8000c84:	dd45      	ble.n	8000d12 <__aeabi_fsub+0x13a>
 8000c86:	2a00      	cmp	r2, #0
 8000c88:	d070      	beq.n	8000d6c <__aeabi_fsub+0x194>
 8000c8a:	2dff      	cmp	r5, #255	; 0xff
 8000c8c:	d100      	bne.n	8000c90 <__aeabi_fsub+0xb8>
 8000c8e:	e09e      	b.n	8000dce <__aeabi_fsub+0x1f6>
 8000c90:	2380      	movs	r3, #128	; 0x80
 8000c92:	04db      	lsls	r3, r3, #19
 8000c94:	431e      	orrs	r6, r3
 8000c96:	4643      	mov	r3, r8
 8000c98:	2b1b      	cmp	r3, #27
 8000c9a:	dc00      	bgt.n	8000c9e <__aeabi_fsub+0xc6>
 8000c9c:	e0d2      	b.n	8000e44 <__aeabi_fsub+0x26c>
 8000c9e:	2001      	movs	r0, #1
 8000ca0:	4460      	add	r0, ip
 8000ca2:	0143      	lsls	r3, r0, #5
 8000ca4:	d57a      	bpl.n	8000d9c <__aeabi_fsub+0x1c4>
 8000ca6:	3501      	adds	r5, #1
 8000ca8:	2dff      	cmp	r5, #255	; 0xff
 8000caa:	d06b      	beq.n	8000d84 <__aeabi_fsub+0x1ac>
 8000cac:	2301      	movs	r3, #1
 8000cae:	4a9d      	ldr	r2, [pc, #628]	; (8000f24 <__aeabi_fsub+0x34c>)
 8000cb0:	4003      	ands	r3, r0
 8000cb2:	0840      	lsrs	r0, r0, #1
 8000cb4:	4010      	ands	r0, r2
 8000cb6:	4318      	orrs	r0, r3
 8000cb8:	e7c8      	b.n	8000c4c <__aeabi_fsub+0x74>
 8000cba:	2e00      	cmp	r6, #0
 8000cbc:	d020      	beq.n	8000d00 <__aeabi_fsub+0x128>
 8000cbe:	428c      	cmp	r4, r1
 8000cc0:	d023      	beq.n	8000d0a <__aeabi_fsub+0x132>
 8000cc2:	0028      	movs	r0, r5
 8000cc4:	38ff      	subs	r0, #255	; 0xff
 8000cc6:	2800      	cmp	r0, #0
 8000cc8:	d039      	beq.n	8000d3e <__aeabi_fsub+0x166>
 8000cca:	1b57      	subs	r7, r2, r5
 8000ccc:	2d00      	cmp	r5, #0
 8000cce:	d000      	beq.n	8000cd2 <__aeabi_fsub+0xfa>
 8000cd0:	e09d      	b.n	8000e0e <__aeabi_fsub+0x236>
 8000cd2:	4663      	mov	r3, ip
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d100      	bne.n	8000cda <__aeabi_fsub+0x102>
 8000cd8:	e0db      	b.n	8000e92 <__aeabi_fsub+0x2ba>
 8000cda:	1e7b      	subs	r3, r7, #1
 8000cdc:	2f01      	cmp	r7, #1
 8000cde:	d100      	bne.n	8000ce2 <__aeabi_fsub+0x10a>
 8000ce0:	e10d      	b.n	8000efe <__aeabi_fsub+0x326>
 8000ce2:	2fff      	cmp	r7, #255	; 0xff
 8000ce4:	d071      	beq.n	8000dca <__aeabi_fsub+0x1f2>
 8000ce6:	001f      	movs	r7, r3
 8000ce8:	e098      	b.n	8000e1c <__aeabi_fsub+0x244>
 8000cea:	2e00      	cmp	r6, #0
 8000cec:	d100      	bne.n	8000cf0 <__aeabi_fsub+0x118>
 8000cee:	e0a7      	b.n	8000e40 <__aeabi_fsub+0x268>
 8000cf0:	1e42      	subs	r2, r0, #1
 8000cf2:	2801      	cmp	r0, #1
 8000cf4:	d100      	bne.n	8000cf8 <__aeabi_fsub+0x120>
 8000cf6:	e0e6      	b.n	8000ec6 <__aeabi_fsub+0x2ee>
 8000cf8:	28ff      	cmp	r0, #255	; 0xff
 8000cfa:	d068      	beq.n	8000dce <__aeabi_fsub+0x1f6>
 8000cfc:	0010      	movs	r0, r2
 8000cfe:	e78f      	b.n	8000c20 <__aeabi_fsub+0x48>
 8000d00:	2001      	movs	r0, #1
 8000d02:	4041      	eors	r1, r0
 8000d04:	42a1      	cmp	r1, r4
 8000d06:	d000      	beq.n	8000d0a <__aeabi_fsub+0x132>
 8000d08:	e77f      	b.n	8000c0a <__aeabi_fsub+0x32>
 8000d0a:	20ff      	movs	r0, #255	; 0xff
 8000d0c:	4240      	negs	r0, r0
 8000d0e:	4680      	mov	r8, r0
 8000d10:	44a8      	add	r8, r5
 8000d12:	4640      	mov	r0, r8
 8000d14:	2800      	cmp	r0, #0
 8000d16:	d038      	beq.n	8000d8a <__aeabi_fsub+0x1b2>
 8000d18:	1b51      	subs	r1, r2, r5
 8000d1a:	2d00      	cmp	r5, #0
 8000d1c:	d100      	bne.n	8000d20 <__aeabi_fsub+0x148>
 8000d1e:	e0ae      	b.n	8000e7e <__aeabi_fsub+0x2a6>
 8000d20:	2aff      	cmp	r2, #255	; 0xff
 8000d22:	d100      	bne.n	8000d26 <__aeabi_fsub+0x14e>
 8000d24:	e0df      	b.n	8000ee6 <__aeabi_fsub+0x30e>
 8000d26:	2380      	movs	r3, #128	; 0x80
 8000d28:	4660      	mov	r0, ip
 8000d2a:	04db      	lsls	r3, r3, #19
 8000d2c:	4318      	orrs	r0, r3
 8000d2e:	4684      	mov	ip, r0
 8000d30:	291b      	cmp	r1, #27
 8000d32:	dc00      	bgt.n	8000d36 <__aeabi_fsub+0x15e>
 8000d34:	e0d9      	b.n	8000eea <__aeabi_fsub+0x312>
 8000d36:	2001      	movs	r0, #1
 8000d38:	0015      	movs	r5, r2
 8000d3a:	1980      	adds	r0, r0, r6
 8000d3c:	e7b1      	b.n	8000ca2 <__aeabi_fsub+0xca>
 8000d3e:	20fe      	movs	r0, #254	; 0xfe
 8000d40:	1c6a      	adds	r2, r5, #1
 8000d42:	4210      	tst	r0, r2
 8000d44:	d171      	bne.n	8000e2a <__aeabi_fsub+0x252>
 8000d46:	2d00      	cmp	r5, #0
 8000d48:	d000      	beq.n	8000d4c <__aeabi_fsub+0x174>
 8000d4a:	e0a6      	b.n	8000e9a <__aeabi_fsub+0x2c2>
 8000d4c:	4663      	mov	r3, ip
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d100      	bne.n	8000d54 <__aeabi_fsub+0x17c>
 8000d52:	e0d9      	b.n	8000f08 <__aeabi_fsub+0x330>
 8000d54:	2200      	movs	r2, #0
 8000d56:	2e00      	cmp	r6, #0
 8000d58:	d100      	bne.n	8000d5c <__aeabi_fsub+0x184>
 8000d5a:	e788      	b.n	8000c6e <__aeabi_fsub+0x96>
 8000d5c:	1b98      	subs	r0, r3, r6
 8000d5e:	0143      	lsls	r3, r0, #5
 8000d60:	d400      	bmi.n	8000d64 <__aeabi_fsub+0x18c>
 8000d62:	e0e1      	b.n	8000f28 <__aeabi_fsub+0x350>
 8000d64:	4663      	mov	r3, ip
 8000d66:	000c      	movs	r4, r1
 8000d68:	1af0      	subs	r0, r6, r3
 8000d6a:	e76f      	b.n	8000c4c <__aeabi_fsub+0x74>
 8000d6c:	2e00      	cmp	r6, #0
 8000d6e:	d100      	bne.n	8000d72 <__aeabi_fsub+0x19a>
 8000d70:	e0b7      	b.n	8000ee2 <__aeabi_fsub+0x30a>
 8000d72:	0002      	movs	r2, r0
 8000d74:	3a01      	subs	r2, #1
 8000d76:	2801      	cmp	r0, #1
 8000d78:	d100      	bne.n	8000d7c <__aeabi_fsub+0x1a4>
 8000d7a:	e09c      	b.n	8000eb6 <__aeabi_fsub+0x2de>
 8000d7c:	28ff      	cmp	r0, #255	; 0xff
 8000d7e:	d026      	beq.n	8000dce <__aeabi_fsub+0x1f6>
 8000d80:	4690      	mov	r8, r2
 8000d82:	e788      	b.n	8000c96 <__aeabi_fsub+0xbe>
 8000d84:	22ff      	movs	r2, #255	; 0xff
 8000d86:	2700      	movs	r7, #0
 8000d88:	e771      	b.n	8000c6e <__aeabi_fsub+0x96>
 8000d8a:	20fe      	movs	r0, #254	; 0xfe
 8000d8c:	1c6a      	adds	r2, r5, #1
 8000d8e:	4210      	tst	r0, r2
 8000d90:	d064      	beq.n	8000e5c <__aeabi_fsub+0x284>
 8000d92:	2aff      	cmp	r2, #255	; 0xff
 8000d94:	d0f6      	beq.n	8000d84 <__aeabi_fsub+0x1ac>
 8000d96:	0015      	movs	r5, r2
 8000d98:	4466      	add	r6, ip
 8000d9a:	0870      	lsrs	r0, r6, #1
 8000d9c:	0743      	lsls	r3, r0, #29
 8000d9e:	d000      	beq.n	8000da2 <__aeabi_fsub+0x1ca>
 8000da0:	e756      	b.n	8000c50 <__aeabi_fsub+0x78>
 8000da2:	08c3      	lsrs	r3, r0, #3
 8000da4:	2dff      	cmp	r5, #255	; 0xff
 8000da6:	d012      	beq.n	8000dce <__aeabi_fsub+0x1f6>
 8000da8:	025b      	lsls	r3, r3, #9
 8000daa:	0a5f      	lsrs	r7, r3, #9
 8000dac:	b2ea      	uxtb	r2, r5
 8000dae:	e75e      	b.n	8000c6e <__aeabi_fsub+0x96>
 8000db0:	4662      	mov	r2, ip
 8000db2:	2a00      	cmp	r2, #0
 8000db4:	d100      	bne.n	8000db8 <__aeabi_fsub+0x1e0>
 8000db6:	e096      	b.n	8000ee6 <__aeabi_fsub+0x30e>
 8000db8:	2e00      	cmp	r6, #0
 8000dba:	d008      	beq.n	8000dce <__aeabi_fsub+0x1f6>
 8000dbc:	2280      	movs	r2, #128	; 0x80
 8000dbe:	03d2      	lsls	r2, r2, #15
 8000dc0:	4213      	tst	r3, r2
 8000dc2:	d004      	beq.n	8000dce <__aeabi_fsub+0x1f6>
 8000dc4:	4648      	mov	r0, r9
 8000dc6:	4210      	tst	r0, r2
 8000dc8:	d101      	bne.n	8000dce <__aeabi_fsub+0x1f6>
 8000dca:	000c      	movs	r4, r1
 8000dcc:	464b      	mov	r3, r9
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d0d8      	beq.n	8000d84 <__aeabi_fsub+0x1ac>
 8000dd2:	2780      	movs	r7, #128	; 0x80
 8000dd4:	03ff      	lsls	r7, r7, #15
 8000dd6:	431f      	orrs	r7, r3
 8000dd8:	027f      	lsls	r7, r7, #9
 8000dda:	22ff      	movs	r2, #255	; 0xff
 8000ddc:	0a7f      	lsrs	r7, r7, #9
 8000dde:	e746      	b.n	8000c6e <__aeabi_fsub+0x96>
 8000de0:	2320      	movs	r3, #32
 8000de2:	003a      	movs	r2, r7
 8000de4:	1b45      	subs	r5, r0, r5
 8000de6:	0038      	movs	r0, r7
 8000de8:	3501      	adds	r5, #1
 8000dea:	40ea      	lsrs	r2, r5
 8000dec:	1b5d      	subs	r5, r3, r5
 8000dee:	40a8      	lsls	r0, r5
 8000df0:	1e43      	subs	r3, r0, #1
 8000df2:	4198      	sbcs	r0, r3
 8000df4:	2500      	movs	r5, #0
 8000df6:	4310      	orrs	r0, r2
 8000df8:	e728      	b.n	8000c4c <__aeabi_fsub+0x74>
 8000dfa:	2320      	movs	r3, #32
 8000dfc:	1a1b      	subs	r3, r3, r0
 8000dfe:	0032      	movs	r2, r6
 8000e00:	409e      	lsls	r6, r3
 8000e02:	40c2      	lsrs	r2, r0
 8000e04:	0030      	movs	r0, r6
 8000e06:	1e43      	subs	r3, r0, #1
 8000e08:	4198      	sbcs	r0, r3
 8000e0a:	4310      	orrs	r0, r2
 8000e0c:	e70c      	b.n	8000c28 <__aeabi_fsub+0x50>
 8000e0e:	2aff      	cmp	r2, #255	; 0xff
 8000e10:	d0db      	beq.n	8000dca <__aeabi_fsub+0x1f2>
 8000e12:	2380      	movs	r3, #128	; 0x80
 8000e14:	4660      	mov	r0, ip
 8000e16:	04db      	lsls	r3, r3, #19
 8000e18:	4318      	orrs	r0, r3
 8000e1a:	4684      	mov	ip, r0
 8000e1c:	2f1b      	cmp	r7, #27
 8000e1e:	dd56      	ble.n	8000ece <__aeabi_fsub+0x2f6>
 8000e20:	2001      	movs	r0, #1
 8000e22:	000c      	movs	r4, r1
 8000e24:	0015      	movs	r5, r2
 8000e26:	1a30      	subs	r0, r6, r0
 8000e28:	e700      	b.n	8000c2c <__aeabi_fsub+0x54>
 8000e2a:	4663      	mov	r3, ip
 8000e2c:	1b9f      	subs	r7, r3, r6
 8000e2e:	017b      	lsls	r3, r7, #5
 8000e30:	d43d      	bmi.n	8000eae <__aeabi_fsub+0x2d6>
 8000e32:	2f00      	cmp	r7, #0
 8000e34:	d000      	beq.n	8000e38 <__aeabi_fsub+0x260>
 8000e36:	e6fe      	b.n	8000c36 <__aeabi_fsub+0x5e>
 8000e38:	2400      	movs	r4, #0
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	2700      	movs	r7, #0
 8000e3e:	e716      	b.n	8000c6e <__aeabi_fsub+0x96>
 8000e40:	0005      	movs	r5, r0
 8000e42:	e7af      	b.n	8000da4 <__aeabi_fsub+0x1cc>
 8000e44:	0032      	movs	r2, r6
 8000e46:	4643      	mov	r3, r8
 8000e48:	4641      	mov	r1, r8
 8000e4a:	40da      	lsrs	r2, r3
 8000e4c:	2320      	movs	r3, #32
 8000e4e:	1a5b      	subs	r3, r3, r1
 8000e50:	409e      	lsls	r6, r3
 8000e52:	0030      	movs	r0, r6
 8000e54:	1e43      	subs	r3, r0, #1
 8000e56:	4198      	sbcs	r0, r3
 8000e58:	4310      	orrs	r0, r2
 8000e5a:	e721      	b.n	8000ca0 <__aeabi_fsub+0xc8>
 8000e5c:	2d00      	cmp	r5, #0
 8000e5e:	d1a7      	bne.n	8000db0 <__aeabi_fsub+0x1d8>
 8000e60:	4663      	mov	r3, ip
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d059      	beq.n	8000f1a <__aeabi_fsub+0x342>
 8000e66:	2200      	movs	r2, #0
 8000e68:	2e00      	cmp	r6, #0
 8000e6a:	d100      	bne.n	8000e6e <__aeabi_fsub+0x296>
 8000e6c:	e6ff      	b.n	8000c6e <__aeabi_fsub+0x96>
 8000e6e:	0030      	movs	r0, r6
 8000e70:	4460      	add	r0, ip
 8000e72:	0143      	lsls	r3, r0, #5
 8000e74:	d592      	bpl.n	8000d9c <__aeabi_fsub+0x1c4>
 8000e76:	4b2a      	ldr	r3, [pc, #168]	; (8000f20 <__aeabi_fsub+0x348>)
 8000e78:	3501      	adds	r5, #1
 8000e7a:	4018      	ands	r0, r3
 8000e7c:	e78e      	b.n	8000d9c <__aeabi_fsub+0x1c4>
 8000e7e:	4663      	mov	r3, ip
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d047      	beq.n	8000f14 <__aeabi_fsub+0x33c>
 8000e84:	1e4b      	subs	r3, r1, #1
 8000e86:	2901      	cmp	r1, #1
 8000e88:	d015      	beq.n	8000eb6 <__aeabi_fsub+0x2de>
 8000e8a:	29ff      	cmp	r1, #255	; 0xff
 8000e8c:	d02b      	beq.n	8000ee6 <__aeabi_fsub+0x30e>
 8000e8e:	0019      	movs	r1, r3
 8000e90:	e74e      	b.n	8000d30 <__aeabi_fsub+0x158>
 8000e92:	000c      	movs	r4, r1
 8000e94:	464b      	mov	r3, r9
 8000e96:	003d      	movs	r5, r7
 8000e98:	e784      	b.n	8000da4 <__aeabi_fsub+0x1cc>
 8000e9a:	4662      	mov	r2, ip
 8000e9c:	2a00      	cmp	r2, #0
 8000e9e:	d18b      	bne.n	8000db8 <__aeabi_fsub+0x1e0>
 8000ea0:	2e00      	cmp	r6, #0
 8000ea2:	d192      	bne.n	8000dca <__aeabi_fsub+0x1f2>
 8000ea4:	2780      	movs	r7, #128	; 0x80
 8000ea6:	2400      	movs	r4, #0
 8000ea8:	22ff      	movs	r2, #255	; 0xff
 8000eaa:	03ff      	lsls	r7, r7, #15
 8000eac:	e6df      	b.n	8000c6e <__aeabi_fsub+0x96>
 8000eae:	4663      	mov	r3, ip
 8000eb0:	000c      	movs	r4, r1
 8000eb2:	1af7      	subs	r7, r6, r3
 8000eb4:	e6bf      	b.n	8000c36 <__aeabi_fsub+0x5e>
 8000eb6:	0030      	movs	r0, r6
 8000eb8:	4460      	add	r0, ip
 8000eba:	2501      	movs	r5, #1
 8000ebc:	0143      	lsls	r3, r0, #5
 8000ebe:	d400      	bmi.n	8000ec2 <__aeabi_fsub+0x2ea>
 8000ec0:	e76c      	b.n	8000d9c <__aeabi_fsub+0x1c4>
 8000ec2:	2502      	movs	r5, #2
 8000ec4:	e6f2      	b.n	8000cac <__aeabi_fsub+0xd4>
 8000ec6:	4663      	mov	r3, ip
 8000ec8:	2501      	movs	r5, #1
 8000eca:	1b98      	subs	r0, r3, r6
 8000ecc:	e6ae      	b.n	8000c2c <__aeabi_fsub+0x54>
 8000ece:	2320      	movs	r3, #32
 8000ed0:	4664      	mov	r4, ip
 8000ed2:	4660      	mov	r0, ip
 8000ed4:	40fc      	lsrs	r4, r7
 8000ed6:	1bdf      	subs	r7, r3, r7
 8000ed8:	40b8      	lsls	r0, r7
 8000eda:	1e43      	subs	r3, r0, #1
 8000edc:	4198      	sbcs	r0, r3
 8000ede:	4320      	orrs	r0, r4
 8000ee0:	e79f      	b.n	8000e22 <__aeabi_fsub+0x24a>
 8000ee2:	0005      	movs	r5, r0
 8000ee4:	e75e      	b.n	8000da4 <__aeabi_fsub+0x1cc>
 8000ee6:	464b      	mov	r3, r9
 8000ee8:	e771      	b.n	8000dce <__aeabi_fsub+0x1f6>
 8000eea:	2320      	movs	r3, #32
 8000eec:	4665      	mov	r5, ip
 8000eee:	4660      	mov	r0, ip
 8000ef0:	40cd      	lsrs	r5, r1
 8000ef2:	1a59      	subs	r1, r3, r1
 8000ef4:	4088      	lsls	r0, r1
 8000ef6:	1e43      	subs	r3, r0, #1
 8000ef8:	4198      	sbcs	r0, r3
 8000efa:	4328      	orrs	r0, r5
 8000efc:	e71c      	b.n	8000d38 <__aeabi_fsub+0x160>
 8000efe:	4663      	mov	r3, ip
 8000f00:	000c      	movs	r4, r1
 8000f02:	2501      	movs	r5, #1
 8000f04:	1af0      	subs	r0, r6, r3
 8000f06:	e691      	b.n	8000c2c <__aeabi_fsub+0x54>
 8000f08:	2e00      	cmp	r6, #0
 8000f0a:	d095      	beq.n	8000e38 <__aeabi_fsub+0x260>
 8000f0c:	000c      	movs	r4, r1
 8000f0e:	464f      	mov	r7, r9
 8000f10:	2200      	movs	r2, #0
 8000f12:	e6ac      	b.n	8000c6e <__aeabi_fsub+0x96>
 8000f14:	464b      	mov	r3, r9
 8000f16:	000d      	movs	r5, r1
 8000f18:	e744      	b.n	8000da4 <__aeabi_fsub+0x1cc>
 8000f1a:	464f      	mov	r7, r9
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	e6a6      	b.n	8000c6e <__aeabi_fsub+0x96>
 8000f20:	fbffffff 	.word	0xfbffffff
 8000f24:	7dffffff 	.word	0x7dffffff
 8000f28:	2800      	cmp	r0, #0
 8000f2a:	d000      	beq.n	8000f2e <__aeabi_fsub+0x356>
 8000f2c:	e736      	b.n	8000d9c <__aeabi_fsub+0x1c4>
 8000f2e:	2400      	movs	r4, #0
 8000f30:	2700      	movs	r7, #0
 8000f32:	e69c      	b.n	8000c6e <__aeabi_fsub+0x96>

08000f34 <__aeabi_ui2f>:
 8000f34:	b570      	push	{r4, r5, r6, lr}
 8000f36:	1e05      	subs	r5, r0, #0
 8000f38:	d00e      	beq.n	8000f58 <__aeabi_ui2f+0x24>
 8000f3a:	f001 fef3 	bl	8002d24 <__clzsi2>
 8000f3e:	239e      	movs	r3, #158	; 0x9e
 8000f40:	0004      	movs	r4, r0
 8000f42:	1a1b      	subs	r3, r3, r0
 8000f44:	2b96      	cmp	r3, #150	; 0x96
 8000f46:	dc0c      	bgt.n	8000f62 <__aeabi_ui2f+0x2e>
 8000f48:	2808      	cmp	r0, #8
 8000f4a:	dd01      	ble.n	8000f50 <__aeabi_ui2f+0x1c>
 8000f4c:	3c08      	subs	r4, #8
 8000f4e:	40a5      	lsls	r5, r4
 8000f50:	026d      	lsls	r5, r5, #9
 8000f52:	0a6d      	lsrs	r5, r5, #9
 8000f54:	b2d8      	uxtb	r0, r3
 8000f56:	e001      	b.n	8000f5c <__aeabi_ui2f+0x28>
 8000f58:	2000      	movs	r0, #0
 8000f5a:	2500      	movs	r5, #0
 8000f5c:	05c0      	lsls	r0, r0, #23
 8000f5e:	4328      	orrs	r0, r5
 8000f60:	bd70      	pop	{r4, r5, r6, pc}
 8000f62:	2b99      	cmp	r3, #153	; 0x99
 8000f64:	dd09      	ble.n	8000f7a <__aeabi_ui2f+0x46>
 8000f66:	0002      	movs	r2, r0
 8000f68:	0029      	movs	r1, r5
 8000f6a:	321b      	adds	r2, #27
 8000f6c:	4091      	lsls	r1, r2
 8000f6e:	1e4a      	subs	r2, r1, #1
 8000f70:	4191      	sbcs	r1, r2
 8000f72:	2205      	movs	r2, #5
 8000f74:	1a12      	subs	r2, r2, r0
 8000f76:	40d5      	lsrs	r5, r2
 8000f78:	430d      	orrs	r5, r1
 8000f7a:	2c05      	cmp	r4, #5
 8000f7c:	dc12      	bgt.n	8000fa4 <__aeabi_ui2f+0x70>
 8000f7e:	0029      	movs	r1, r5
 8000f80:	4e0c      	ldr	r6, [pc, #48]	; (8000fb4 <__aeabi_ui2f+0x80>)
 8000f82:	4031      	ands	r1, r6
 8000f84:	076a      	lsls	r2, r5, #29
 8000f86:	d009      	beq.n	8000f9c <__aeabi_ui2f+0x68>
 8000f88:	200f      	movs	r0, #15
 8000f8a:	4028      	ands	r0, r5
 8000f8c:	2804      	cmp	r0, #4
 8000f8e:	d005      	beq.n	8000f9c <__aeabi_ui2f+0x68>
 8000f90:	3104      	adds	r1, #4
 8000f92:	014a      	lsls	r2, r1, #5
 8000f94:	d502      	bpl.n	8000f9c <__aeabi_ui2f+0x68>
 8000f96:	239f      	movs	r3, #159	; 0x9f
 8000f98:	4031      	ands	r1, r6
 8000f9a:	1b1b      	subs	r3, r3, r4
 8000f9c:	0189      	lsls	r1, r1, #6
 8000f9e:	0a4d      	lsrs	r5, r1, #9
 8000fa0:	b2d8      	uxtb	r0, r3
 8000fa2:	e7db      	b.n	8000f5c <__aeabi_ui2f+0x28>
 8000fa4:	1f62      	subs	r2, r4, #5
 8000fa6:	4095      	lsls	r5, r2
 8000fa8:	0029      	movs	r1, r5
 8000faa:	4e02      	ldr	r6, [pc, #8]	; (8000fb4 <__aeabi_ui2f+0x80>)
 8000fac:	4031      	ands	r1, r6
 8000fae:	076a      	lsls	r2, r5, #29
 8000fb0:	d0f4      	beq.n	8000f9c <__aeabi_ui2f+0x68>
 8000fb2:	e7e9      	b.n	8000f88 <__aeabi_ui2f+0x54>
 8000fb4:	fbffffff 	.word	0xfbffffff

08000fb8 <__aeabi_dadd>:
 8000fb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fba:	464f      	mov	r7, r9
 8000fbc:	4646      	mov	r6, r8
 8000fbe:	46d6      	mov	lr, sl
 8000fc0:	000d      	movs	r5, r1
 8000fc2:	0004      	movs	r4, r0
 8000fc4:	b5c0      	push	{r6, r7, lr}
 8000fc6:	001f      	movs	r7, r3
 8000fc8:	0011      	movs	r1, r2
 8000fca:	0328      	lsls	r0, r5, #12
 8000fcc:	0f62      	lsrs	r2, r4, #29
 8000fce:	0a40      	lsrs	r0, r0, #9
 8000fd0:	4310      	orrs	r0, r2
 8000fd2:	007a      	lsls	r2, r7, #1
 8000fd4:	0d52      	lsrs	r2, r2, #21
 8000fd6:	00e3      	lsls	r3, r4, #3
 8000fd8:	033c      	lsls	r4, r7, #12
 8000fda:	4691      	mov	r9, r2
 8000fdc:	0a64      	lsrs	r4, r4, #9
 8000fde:	0ffa      	lsrs	r2, r7, #31
 8000fe0:	0f4f      	lsrs	r7, r1, #29
 8000fe2:	006e      	lsls	r6, r5, #1
 8000fe4:	4327      	orrs	r7, r4
 8000fe6:	4692      	mov	sl, r2
 8000fe8:	46b8      	mov	r8, r7
 8000fea:	0d76      	lsrs	r6, r6, #21
 8000fec:	0fed      	lsrs	r5, r5, #31
 8000fee:	00c9      	lsls	r1, r1, #3
 8000ff0:	4295      	cmp	r5, r2
 8000ff2:	d100      	bne.n	8000ff6 <__aeabi_dadd+0x3e>
 8000ff4:	e099      	b.n	800112a <__aeabi_dadd+0x172>
 8000ff6:	464c      	mov	r4, r9
 8000ff8:	1b34      	subs	r4, r6, r4
 8000ffa:	46a4      	mov	ip, r4
 8000ffc:	2c00      	cmp	r4, #0
 8000ffe:	dc00      	bgt.n	8001002 <__aeabi_dadd+0x4a>
 8001000:	e07c      	b.n	80010fc <__aeabi_dadd+0x144>
 8001002:	464a      	mov	r2, r9
 8001004:	2a00      	cmp	r2, #0
 8001006:	d100      	bne.n	800100a <__aeabi_dadd+0x52>
 8001008:	e0b8      	b.n	800117c <__aeabi_dadd+0x1c4>
 800100a:	4ac5      	ldr	r2, [pc, #788]	; (8001320 <__aeabi_dadd+0x368>)
 800100c:	4296      	cmp	r6, r2
 800100e:	d100      	bne.n	8001012 <__aeabi_dadd+0x5a>
 8001010:	e11c      	b.n	800124c <__aeabi_dadd+0x294>
 8001012:	2280      	movs	r2, #128	; 0x80
 8001014:	003c      	movs	r4, r7
 8001016:	0412      	lsls	r2, r2, #16
 8001018:	4314      	orrs	r4, r2
 800101a:	46a0      	mov	r8, r4
 800101c:	4662      	mov	r2, ip
 800101e:	2a38      	cmp	r2, #56	; 0x38
 8001020:	dd00      	ble.n	8001024 <__aeabi_dadd+0x6c>
 8001022:	e161      	b.n	80012e8 <__aeabi_dadd+0x330>
 8001024:	2a1f      	cmp	r2, #31
 8001026:	dd00      	ble.n	800102a <__aeabi_dadd+0x72>
 8001028:	e1cc      	b.n	80013c4 <__aeabi_dadd+0x40c>
 800102a:	4664      	mov	r4, ip
 800102c:	2220      	movs	r2, #32
 800102e:	1b12      	subs	r2, r2, r4
 8001030:	4644      	mov	r4, r8
 8001032:	4094      	lsls	r4, r2
 8001034:	000f      	movs	r7, r1
 8001036:	46a1      	mov	r9, r4
 8001038:	4664      	mov	r4, ip
 800103a:	4091      	lsls	r1, r2
 800103c:	40e7      	lsrs	r7, r4
 800103e:	464c      	mov	r4, r9
 8001040:	1e4a      	subs	r2, r1, #1
 8001042:	4191      	sbcs	r1, r2
 8001044:	433c      	orrs	r4, r7
 8001046:	4642      	mov	r2, r8
 8001048:	4321      	orrs	r1, r4
 800104a:	4664      	mov	r4, ip
 800104c:	40e2      	lsrs	r2, r4
 800104e:	1a80      	subs	r0, r0, r2
 8001050:	1a5c      	subs	r4, r3, r1
 8001052:	42a3      	cmp	r3, r4
 8001054:	419b      	sbcs	r3, r3
 8001056:	425f      	negs	r7, r3
 8001058:	1bc7      	subs	r7, r0, r7
 800105a:	023b      	lsls	r3, r7, #8
 800105c:	d400      	bmi.n	8001060 <__aeabi_dadd+0xa8>
 800105e:	e0d0      	b.n	8001202 <__aeabi_dadd+0x24a>
 8001060:	027f      	lsls	r7, r7, #9
 8001062:	0a7f      	lsrs	r7, r7, #9
 8001064:	2f00      	cmp	r7, #0
 8001066:	d100      	bne.n	800106a <__aeabi_dadd+0xb2>
 8001068:	e0ff      	b.n	800126a <__aeabi_dadd+0x2b2>
 800106a:	0038      	movs	r0, r7
 800106c:	f001 fe5a 	bl	8002d24 <__clzsi2>
 8001070:	0001      	movs	r1, r0
 8001072:	3908      	subs	r1, #8
 8001074:	2320      	movs	r3, #32
 8001076:	0022      	movs	r2, r4
 8001078:	1a5b      	subs	r3, r3, r1
 800107a:	408f      	lsls	r7, r1
 800107c:	40da      	lsrs	r2, r3
 800107e:	408c      	lsls	r4, r1
 8001080:	4317      	orrs	r7, r2
 8001082:	42b1      	cmp	r1, r6
 8001084:	da00      	bge.n	8001088 <__aeabi_dadd+0xd0>
 8001086:	e0ff      	b.n	8001288 <__aeabi_dadd+0x2d0>
 8001088:	1b89      	subs	r1, r1, r6
 800108a:	1c4b      	adds	r3, r1, #1
 800108c:	2b1f      	cmp	r3, #31
 800108e:	dd00      	ble.n	8001092 <__aeabi_dadd+0xda>
 8001090:	e0a8      	b.n	80011e4 <__aeabi_dadd+0x22c>
 8001092:	2220      	movs	r2, #32
 8001094:	0039      	movs	r1, r7
 8001096:	1ad2      	subs	r2, r2, r3
 8001098:	0020      	movs	r0, r4
 800109a:	4094      	lsls	r4, r2
 800109c:	4091      	lsls	r1, r2
 800109e:	40d8      	lsrs	r0, r3
 80010a0:	1e62      	subs	r2, r4, #1
 80010a2:	4194      	sbcs	r4, r2
 80010a4:	40df      	lsrs	r7, r3
 80010a6:	2600      	movs	r6, #0
 80010a8:	4301      	orrs	r1, r0
 80010aa:	430c      	orrs	r4, r1
 80010ac:	0763      	lsls	r3, r4, #29
 80010ae:	d009      	beq.n	80010c4 <__aeabi_dadd+0x10c>
 80010b0:	230f      	movs	r3, #15
 80010b2:	4023      	ands	r3, r4
 80010b4:	2b04      	cmp	r3, #4
 80010b6:	d005      	beq.n	80010c4 <__aeabi_dadd+0x10c>
 80010b8:	1d23      	adds	r3, r4, #4
 80010ba:	42a3      	cmp	r3, r4
 80010bc:	41a4      	sbcs	r4, r4
 80010be:	4264      	negs	r4, r4
 80010c0:	193f      	adds	r7, r7, r4
 80010c2:	001c      	movs	r4, r3
 80010c4:	023b      	lsls	r3, r7, #8
 80010c6:	d400      	bmi.n	80010ca <__aeabi_dadd+0x112>
 80010c8:	e09e      	b.n	8001208 <__aeabi_dadd+0x250>
 80010ca:	4b95      	ldr	r3, [pc, #596]	; (8001320 <__aeabi_dadd+0x368>)
 80010cc:	3601      	adds	r6, #1
 80010ce:	429e      	cmp	r6, r3
 80010d0:	d100      	bne.n	80010d4 <__aeabi_dadd+0x11c>
 80010d2:	e0b7      	b.n	8001244 <__aeabi_dadd+0x28c>
 80010d4:	4a93      	ldr	r2, [pc, #588]	; (8001324 <__aeabi_dadd+0x36c>)
 80010d6:	08e4      	lsrs	r4, r4, #3
 80010d8:	4017      	ands	r7, r2
 80010da:	077b      	lsls	r3, r7, #29
 80010dc:	0571      	lsls	r1, r6, #21
 80010de:	027f      	lsls	r7, r7, #9
 80010e0:	4323      	orrs	r3, r4
 80010e2:	0b3f      	lsrs	r7, r7, #12
 80010e4:	0d4a      	lsrs	r2, r1, #21
 80010e6:	0512      	lsls	r2, r2, #20
 80010e8:	433a      	orrs	r2, r7
 80010ea:	07ed      	lsls	r5, r5, #31
 80010ec:	432a      	orrs	r2, r5
 80010ee:	0018      	movs	r0, r3
 80010f0:	0011      	movs	r1, r2
 80010f2:	bce0      	pop	{r5, r6, r7}
 80010f4:	46ba      	mov	sl, r7
 80010f6:	46b1      	mov	r9, r6
 80010f8:	46a8      	mov	r8, r5
 80010fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80010fc:	2c00      	cmp	r4, #0
 80010fe:	d04b      	beq.n	8001198 <__aeabi_dadd+0x1e0>
 8001100:	464c      	mov	r4, r9
 8001102:	1ba4      	subs	r4, r4, r6
 8001104:	46a4      	mov	ip, r4
 8001106:	2e00      	cmp	r6, #0
 8001108:	d000      	beq.n	800110c <__aeabi_dadd+0x154>
 800110a:	e123      	b.n	8001354 <__aeabi_dadd+0x39c>
 800110c:	0004      	movs	r4, r0
 800110e:	431c      	orrs	r4, r3
 8001110:	d100      	bne.n	8001114 <__aeabi_dadd+0x15c>
 8001112:	e1af      	b.n	8001474 <__aeabi_dadd+0x4bc>
 8001114:	4662      	mov	r2, ip
 8001116:	1e54      	subs	r4, r2, #1
 8001118:	2a01      	cmp	r2, #1
 800111a:	d100      	bne.n	800111e <__aeabi_dadd+0x166>
 800111c:	e215      	b.n	800154a <__aeabi_dadd+0x592>
 800111e:	4d80      	ldr	r5, [pc, #512]	; (8001320 <__aeabi_dadd+0x368>)
 8001120:	45ac      	cmp	ip, r5
 8001122:	d100      	bne.n	8001126 <__aeabi_dadd+0x16e>
 8001124:	e1c8      	b.n	80014b8 <__aeabi_dadd+0x500>
 8001126:	46a4      	mov	ip, r4
 8001128:	e11b      	b.n	8001362 <__aeabi_dadd+0x3aa>
 800112a:	464a      	mov	r2, r9
 800112c:	1ab2      	subs	r2, r6, r2
 800112e:	4694      	mov	ip, r2
 8001130:	2a00      	cmp	r2, #0
 8001132:	dc00      	bgt.n	8001136 <__aeabi_dadd+0x17e>
 8001134:	e0ac      	b.n	8001290 <__aeabi_dadd+0x2d8>
 8001136:	464a      	mov	r2, r9
 8001138:	2a00      	cmp	r2, #0
 800113a:	d043      	beq.n	80011c4 <__aeabi_dadd+0x20c>
 800113c:	4a78      	ldr	r2, [pc, #480]	; (8001320 <__aeabi_dadd+0x368>)
 800113e:	4296      	cmp	r6, r2
 8001140:	d100      	bne.n	8001144 <__aeabi_dadd+0x18c>
 8001142:	e1af      	b.n	80014a4 <__aeabi_dadd+0x4ec>
 8001144:	2280      	movs	r2, #128	; 0x80
 8001146:	003c      	movs	r4, r7
 8001148:	0412      	lsls	r2, r2, #16
 800114a:	4314      	orrs	r4, r2
 800114c:	46a0      	mov	r8, r4
 800114e:	4662      	mov	r2, ip
 8001150:	2a38      	cmp	r2, #56	; 0x38
 8001152:	dc67      	bgt.n	8001224 <__aeabi_dadd+0x26c>
 8001154:	2a1f      	cmp	r2, #31
 8001156:	dc00      	bgt.n	800115a <__aeabi_dadd+0x1a2>
 8001158:	e15f      	b.n	800141a <__aeabi_dadd+0x462>
 800115a:	4647      	mov	r7, r8
 800115c:	3a20      	subs	r2, #32
 800115e:	40d7      	lsrs	r7, r2
 8001160:	4662      	mov	r2, ip
 8001162:	2a20      	cmp	r2, #32
 8001164:	d005      	beq.n	8001172 <__aeabi_dadd+0x1ba>
 8001166:	4664      	mov	r4, ip
 8001168:	2240      	movs	r2, #64	; 0x40
 800116a:	1b12      	subs	r2, r2, r4
 800116c:	4644      	mov	r4, r8
 800116e:	4094      	lsls	r4, r2
 8001170:	4321      	orrs	r1, r4
 8001172:	1e4a      	subs	r2, r1, #1
 8001174:	4191      	sbcs	r1, r2
 8001176:	000c      	movs	r4, r1
 8001178:	433c      	orrs	r4, r7
 800117a:	e057      	b.n	800122c <__aeabi_dadd+0x274>
 800117c:	003a      	movs	r2, r7
 800117e:	430a      	orrs	r2, r1
 8001180:	d100      	bne.n	8001184 <__aeabi_dadd+0x1cc>
 8001182:	e105      	b.n	8001390 <__aeabi_dadd+0x3d8>
 8001184:	0022      	movs	r2, r4
 8001186:	3a01      	subs	r2, #1
 8001188:	2c01      	cmp	r4, #1
 800118a:	d100      	bne.n	800118e <__aeabi_dadd+0x1d6>
 800118c:	e182      	b.n	8001494 <__aeabi_dadd+0x4dc>
 800118e:	4c64      	ldr	r4, [pc, #400]	; (8001320 <__aeabi_dadd+0x368>)
 8001190:	45a4      	cmp	ip, r4
 8001192:	d05b      	beq.n	800124c <__aeabi_dadd+0x294>
 8001194:	4694      	mov	ip, r2
 8001196:	e741      	b.n	800101c <__aeabi_dadd+0x64>
 8001198:	4c63      	ldr	r4, [pc, #396]	; (8001328 <__aeabi_dadd+0x370>)
 800119a:	1c77      	adds	r7, r6, #1
 800119c:	4227      	tst	r7, r4
 800119e:	d000      	beq.n	80011a2 <__aeabi_dadd+0x1ea>
 80011a0:	e0c4      	b.n	800132c <__aeabi_dadd+0x374>
 80011a2:	0004      	movs	r4, r0
 80011a4:	431c      	orrs	r4, r3
 80011a6:	2e00      	cmp	r6, #0
 80011a8:	d000      	beq.n	80011ac <__aeabi_dadd+0x1f4>
 80011aa:	e169      	b.n	8001480 <__aeabi_dadd+0x4c8>
 80011ac:	2c00      	cmp	r4, #0
 80011ae:	d100      	bne.n	80011b2 <__aeabi_dadd+0x1fa>
 80011b0:	e1bf      	b.n	8001532 <__aeabi_dadd+0x57a>
 80011b2:	4644      	mov	r4, r8
 80011b4:	430c      	orrs	r4, r1
 80011b6:	d000      	beq.n	80011ba <__aeabi_dadd+0x202>
 80011b8:	e1d0      	b.n	800155c <__aeabi_dadd+0x5a4>
 80011ba:	0742      	lsls	r2, r0, #29
 80011bc:	08db      	lsrs	r3, r3, #3
 80011be:	4313      	orrs	r3, r2
 80011c0:	08c0      	lsrs	r0, r0, #3
 80011c2:	e029      	b.n	8001218 <__aeabi_dadd+0x260>
 80011c4:	003a      	movs	r2, r7
 80011c6:	430a      	orrs	r2, r1
 80011c8:	d100      	bne.n	80011cc <__aeabi_dadd+0x214>
 80011ca:	e170      	b.n	80014ae <__aeabi_dadd+0x4f6>
 80011cc:	4662      	mov	r2, ip
 80011ce:	4664      	mov	r4, ip
 80011d0:	3a01      	subs	r2, #1
 80011d2:	2c01      	cmp	r4, #1
 80011d4:	d100      	bne.n	80011d8 <__aeabi_dadd+0x220>
 80011d6:	e0e0      	b.n	800139a <__aeabi_dadd+0x3e2>
 80011d8:	4c51      	ldr	r4, [pc, #324]	; (8001320 <__aeabi_dadd+0x368>)
 80011da:	45a4      	cmp	ip, r4
 80011dc:	d100      	bne.n	80011e0 <__aeabi_dadd+0x228>
 80011de:	e161      	b.n	80014a4 <__aeabi_dadd+0x4ec>
 80011e0:	4694      	mov	ip, r2
 80011e2:	e7b4      	b.n	800114e <__aeabi_dadd+0x196>
 80011e4:	003a      	movs	r2, r7
 80011e6:	391f      	subs	r1, #31
 80011e8:	40ca      	lsrs	r2, r1
 80011ea:	0011      	movs	r1, r2
 80011ec:	2b20      	cmp	r3, #32
 80011ee:	d003      	beq.n	80011f8 <__aeabi_dadd+0x240>
 80011f0:	2240      	movs	r2, #64	; 0x40
 80011f2:	1ad3      	subs	r3, r2, r3
 80011f4:	409f      	lsls	r7, r3
 80011f6:	433c      	orrs	r4, r7
 80011f8:	1e63      	subs	r3, r4, #1
 80011fa:	419c      	sbcs	r4, r3
 80011fc:	2700      	movs	r7, #0
 80011fe:	2600      	movs	r6, #0
 8001200:	430c      	orrs	r4, r1
 8001202:	0763      	lsls	r3, r4, #29
 8001204:	d000      	beq.n	8001208 <__aeabi_dadd+0x250>
 8001206:	e753      	b.n	80010b0 <__aeabi_dadd+0xf8>
 8001208:	46b4      	mov	ip, r6
 800120a:	08e4      	lsrs	r4, r4, #3
 800120c:	077b      	lsls	r3, r7, #29
 800120e:	4323      	orrs	r3, r4
 8001210:	08f8      	lsrs	r0, r7, #3
 8001212:	4a43      	ldr	r2, [pc, #268]	; (8001320 <__aeabi_dadd+0x368>)
 8001214:	4594      	cmp	ip, r2
 8001216:	d01d      	beq.n	8001254 <__aeabi_dadd+0x29c>
 8001218:	4662      	mov	r2, ip
 800121a:	0307      	lsls	r7, r0, #12
 800121c:	0552      	lsls	r2, r2, #21
 800121e:	0b3f      	lsrs	r7, r7, #12
 8001220:	0d52      	lsrs	r2, r2, #21
 8001222:	e760      	b.n	80010e6 <__aeabi_dadd+0x12e>
 8001224:	4644      	mov	r4, r8
 8001226:	430c      	orrs	r4, r1
 8001228:	1e62      	subs	r2, r4, #1
 800122a:	4194      	sbcs	r4, r2
 800122c:	18e4      	adds	r4, r4, r3
 800122e:	429c      	cmp	r4, r3
 8001230:	419b      	sbcs	r3, r3
 8001232:	425f      	negs	r7, r3
 8001234:	183f      	adds	r7, r7, r0
 8001236:	023b      	lsls	r3, r7, #8
 8001238:	d5e3      	bpl.n	8001202 <__aeabi_dadd+0x24a>
 800123a:	4b39      	ldr	r3, [pc, #228]	; (8001320 <__aeabi_dadd+0x368>)
 800123c:	3601      	adds	r6, #1
 800123e:	429e      	cmp	r6, r3
 8001240:	d000      	beq.n	8001244 <__aeabi_dadd+0x28c>
 8001242:	e0b5      	b.n	80013b0 <__aeabi_dadd+0x3f8>
 8001244:	0032      	movs	r2, r6
 8001246:	2700      	movs	r7, #0
 8001248:	2300      	movs	r3, #0
 800124a:	e74c      	b.n	80010e6 <__aeabi_dadd+0x12e>
 800124c:	0742      	lsls	r2, r0, #29
 800124e:	08db      	lsrs	r3, r3, #3
 8001250:	4313      	orrs	r3, r2
 8001252:	08c0      	lsrs	r0, r0, #3
 8001254:	001a      	movs	r2, r3
 8001256:	4302      	orrs	r2, r0
 8001258:	d100      	bne.n	800125c <__aeabi_dadd+0x2a4>
 800125a:	e1e1      	b.n	8001620 <__aeabi_dadd+0x668>
 800125c:	2780      	movs	r7, #128	; 0x80
 800125e:	033f      	lsls	r7, r7, #12
 8001260:	4307      	orrs	r7, r0
 8001262:	033f      	lsls	r7, r7, #12
 8001264:	4a2e      	ldr	r2, [pc, #184]	; (8001320 <__aeabi_dadd+0x368>)
 8001266:	0b3f      	lsrs	r7, r7, #12
 8001268:	e73d      	b.n	80010e6 <__aeabi_dadd+0x12e>
 800126a:	0020      	movs	r0, r4
 800126c:	f001 fd5a 	bl	8002d24 <__clzsi2>
 8001270:	0001      	movs	r1, r0
 8001272:	3118      	adds	r1, #24
 8001274:	291f      	cmp	r1, #31
 8001276:	dc00      	bgt.n	800127a <__aeabi_dadd+0x2c2>
 8001278:	e6fc      	b.n	8001074 <__aeabi_dadd+0xbc>
 800127a:	3808      	subs	r0, #8
 800127c:	4084      	lsls	r4, r0
 800127e:	0027      	movs	r7, r4
 8001280:	2400      	movs	r4, #0
 8001282:	42b1      	cmp	r1, r6
 8001284:	db00      	blt.n	8001288 <__aeabi_dadd+0x2d0>
 8001286:	e6ff      	b.n	8001088 <__aeabi_dadd+0xd0>
 8001288:	4a26      	ldr	r2, [pc, #152]	; (8001324 <__aeabi_dadd+0x36c>)
 800128a:	1a76      	subs	r6, r6, r1
 800128c:	4017      	ands	r7, r2
 800128e:	e70d      	b.n	80010ac <__aeabi_dadd+0xf4>
 8001290:	2a00      	cmp	r2, #0
 8001292:	d02f      	beq.n	80012f4 <__aeabi_dadd+0x33c>
 8001294:	464a      	mov	r2, r9
 8001296:	1b92      	subs	r2, r2, r6
 8001298:	4694      	mov	ip, r2
 800129a:	2e00      	cmp	r6, #0
 800129c:	d100      	bne.n	80012a0 <__aeabi_dadd+0x2e8>
 800129e:	e0ad      	b.n	80013fc <__aeabi_dadd+0x444>
 80012a0:	4a1f      	ldr	r2, [pc, #124]	; (8001320 <__aeabi_dadd+0x368>)
 80012a2:	4591      	cmp	r9, r2
 80012a4:	d100      	bne.n	80012a8 <__aeabi_dadd+0x2f0>
 80012a6:	e10f      	b.n	80014c8 <__aeabi_dadd+0x510>
 80012a8:	2280      	movs	r2, #128	; 0x80
 80012aa:	0412      	lsls	r2, r2, #16
 80012ac:	4310      	orrs	r0, r2
 80012ae:	4662      	mov	r2, ip
 80012b0:	2a38      	cmp	r2, #56	; 0x38
 80012b2:	dd00      	ble.n	80012b6 <__aeabi_dadd+0x2fe>
 80012b4:	e10f      	b.n	80014d6 <__aeabi_dadd+0x51e>
 80012b6:	2a1f      	cmp	r2, #31
 80012b8:	dd00      	ble.n	80012bc <__aeabi_dadd+0x304>
 80012ba:	e180      	b.n	80015be <__aeabi_dadd+0x606>
 80012bc:	4664      	mov	r4, ip
 80012be:	2220      	movs	r2, #32
 80012c0:	001e      	movs	r6, r3
 80012c2:	1b12      	subs	r2, r2, r4
 80012c4:	4667      	mov	r7, ip
 80012c6:	0004      	movs	r4, r0
 80012c8:	4093      	lsls	r3, r2
 80012ca:	4094      	lsls	r4, r2
 80012cc:	40fe      	lsrs	r6, r7
 80012ce:	1e5a      	subs	r2, r3, #1
 80012d0:	4193      	sbcs	r3, r2
 80012d2:	40f8      	lsrs	r0, r7
 80012d4:	4334      	orrs	r4, r6
 80012d6:	431c      	orrs	r4, r3
 80012d8:	4480      	add	r8, r0
 80012da:	1864      	adds	r4, r4, r1
 80012dc:	428c      	cmp	r4, r1
 80012de:	41bf      	sbcs	r7, r7
 80012e0:	427f      	negs	r7, r7
 80012e2:	464e      	mov	r6, r9
 80012e4:	4447      	add	r7, r8
 80012e6:	e7a6      	b.n	8001236 <__aeabi_dadd+0x27e>
 80012e8:	4642      	mov	r2, r8
 80012ea:	430a      	orrs	r2, r1
 80012ec:	0011      	movs	r1, r2
 80012ee:	1e4a      	subs	r2, r1, #1
 80012f0:	4191      	sbcs	r1, r2
 80012f2:	e6ad      	b.n	8001050 <__aeabi_dadd+0x98>
 80012f4:	4c0c      	ldr	r4, [pc, #48]	; (8001328 <__aeabi_dadd+0x370>)
 80012f6:	1c72      	adds	r2, r6, #1
 80012f8:	4222      	tst	r2, r4
 80012fa:	d000      	beq.n	80012fe <__aeabi_dadd+0x346>
 80012fc:	e0a1      	b.n	8001442 <__aeabi_dadd+0x48a>
 80012fe:	0002      	movs	r2, r0
 8001300:	431a      	orrs	r2, r3
 8001302:	2e00      	cmp	r6, #0
 8001304:	d000      	beq.n	8001308 <__aeabi_dadd+0x350>
 8001306:	e0fa      	b.n	80014fe <__aeabi_dadd+0x546>
 8001308:	2a00      	cmp	r2, #0
 800130a:	d100      	bne.n	800130e <__aeabi_dadd+0x356>
 800130c:	e145      	b.n	800159a <__aeabi_dadd+0x5e2>
 800130e:	003a      	movs	r2, r7
 8001310:	430a      	orrs	r2, r1
 8001312:	d000      	beq.n	8001316 <__aeabi_dadd+0x35e>
 8001314:	e146      	b.n	80015a4 <__aeabi_dadd+0x5ec>
 8001316:	0742      	lsls	r2, r0, #29
 8001318:	08db      	lsrs	r3, r3, #3
 800131a:	4313      	orrs	r3, r2
 800131c:	08c0      	lsrs	r0, r0, #3
 800131e:	e77b      	b.n	8001218 <__aeabi_dadd+0x260>
 8001320:	000007ff 	.word	0x000007ff
 8001324:	ff7fffff 	.word	0xff7fffff
 8001328:	000007fe 	.word	0x000007fe
 800132c:	4647      	mov	r7, r8
 800132e:	1a5c      	subs	r4, r3, r1
 8001330:	1bc2      	subs	r2, r0, r7
 8001332:	42a3      	cmp	r3, r4
 8001334:	41bf      	sbcs	r7, r7
 8001336:	427f      	negs	r7, r7
 8001338:	46b9      	mov	r9, r7
 800133a:	0017      	movs	r7, r2
 800133c:	464a      	mov	r2, r9
 800133e:	1abf      	subs	r7, r7, r2
 8001340:	023a      	lsls	r2, r7, #8
 8001342:	d500      	bpl.n	8001346 <__aeabi_dadd+0x38e>
 8001344:	e08d      	b.n	8001462 <__aeabi_dadd+0x4aa>
 8001346:	0023      	movs	r3, r4
 8001348:	433b      	orrs	r3, r7
 800134a:	d000      	beq.n	800134e <__aeabi_dadd+0x396>
 800134c:	e68a      	b.n	8001064 <__aeabi_dadd+0xac>
 800134e:	2000      	movs	r0, #0
 8001350:	2500      	movs	r5, #0
 8001352:	e761      	b.n	8001218 <__aeabi_dadd+0x260>
 8001354:	4cb4      	ldr	r4, [pc, #720]	; (8001628 <__aeabi_dadd+0x670>)
 8001356:	45a1      	cmp	r9, r4
 8001358:	d100      	bne.n	800135c <__aeabi_dadd+0x3a4>
 800135a:	e0ad      	b.n	80014b8 <__aeabi_dadd+0x500>
 800135c:	2480      	movs	r4, #128	; 0x80
 800135e:	0424      	lsls	r4, r4, #16
 8001360:	4320      	orrs	r0, r4
 8001362:	4664      	mov	r4, ip
 8001364:	2c38      	cmp	r4, #56	; 0x38
 8001366:	dc3d      	bgt.n	80013e4 <__aeabi_dadd+0x42c>
 8001368:	4662      	mov	r2, ip
 800136a:	2c1f      	cmp	r4, #31
 800136c:	dd00      	ble.n	8001370 <__aeabi_dadd+0x3b8>
 800136e:	e0b7      	b.n	80014e0 <__aeabi_dadd+0x528>
 8001370:	2520      	movs	r5, #32
 8001372:	001e      	movs	r6, r3
 8001374:	1b2d      	subs	r5, r5, r4
 8001376:	0004      	movs	r4, r0
 8001378:	40ab      	lsls	r3, r5
 800137a:	40ac      	lsls	r4, r5
 800137c:	40d6      	lsrs	r6, r2
 800137e:	40d0      	lsrs	r0, r2
 8001380:	4642      	mov	r2, r8
 8001382:	1e5d      	subs	r5, r3, #1
 8001384:	41ab      	sbcs	r3, r5
 8001386:	4334      	orrs	r4, r6
 8001388:	1a12      	subs	r2, r2, r0
 800138a:	4690      	mov	r8, r2
 800138c:	4323      	orrs	r3, r4
 800138e:	e02c      	b.n	80013ea <__aeabi_dadd+0x432>
 8001390:	0742      	lsls	r2, r0, #29
 8001392:	08db      	lsrs	r3, r3, #3
 8001394:	4313      	orrs	r3, r2
 8001396:	08c0      	lsrs	r0, r0, #3
 8001398:	e73b      	b.n	8001212 <__aeabi_dadd+0x25a>
 800139a:	185c      	adds	r4, r3, r1
 800139c:	429c      	cmp	r4, r3
 800139e:	419b      	sbcs	r3, r3
 80013a0:	4440      	add	r0, r8
 80013a2:	425b      	negs	r3, r3
 80013a4:	18c7      	adds	r7, r0, r3
 80013a6:	2601      	movs	r6, #1
 80013a8:	023b      	lsls	r3, r7, #8
 80013aa:	d400      	bmi.n	80013ae <__aeabi_dadd+0x3f6>
 80013ac:	e729      	b.n	8001202 <__aeabi_dadd+0x24a>
 80013ae:	2602      	movs	r6, #2
 80013b0:	4a9e      	ldr	r2, [pc, #632]	; (800162c <__aeabi_dadd+0x674>)
 80013b2:	0863      	lsrs	r3, r4, #1
 80013b4:	4017      	ands	r7, r2
 80013b6:	2201      	movs	r2, #1
 80013b8:	4014      	ands	r4, r2
 80013ba:	431c      	orrs	r4, r3
 80013bc:	07fb      	lsls	r3, r7, #31
 80013be:	431c      	orrs	r4, r3
 80013c0:	087f      	lsrs	r7, r7, #1
 80013c2:	e673      	b.n	80010ac <__aeabi_dadd+0xf4>
 80013c4:	4644      	mov	r4, r8
 80013c6:	3a20      	subs	r2, #32
 80013c8:	40d4      	lsrs	r4, r2
 80013ca:	4662      	mov	r2, ip
 80013cc:	2a20      	cmp	r2, #32
 80013ce:	d005      	beq.n	80013dc <__aeabi_dadd+0x424>
 80013d0:	4667      	mov	r7, ip
 80013d2:	2240      	movs	r2, #64	; 0x40
 80013d4:	1bd2      	subs	r2, r2, r7
 80013d6:	4647      	mov	r7, r8
 80013d8:	4097      	lsls	r7, r2
 80013da:	4339      	orrs	r1, r7
 80013dc:	1e4a      	subs	r2, r1, #1
 80013de:	4191      	sbcs	r1, r2
 80013e0:	4321      	orrs	r1, r4
 80013e2:	e635      	b.n	8001050 <__aeabi_dadd+0x98>
 80013e4:	4303      	orrs	r3, r0
 80013e6:	1e58      	subs	r0, r3, #1
 80013e8:	4183      	sbcs	r3, r0
 80013ea:	1acc      	subs	r4, r1, r3
 80013ec:	42a1      	cmp	r1, r4
 80013ee:	41bf      	sbcs	r7, r7
 80013f0:	4643      	mov	r3, r8
 80013f2:	427f      	negs	r7, r7
 80013f4:	4655      	mov	r5, sl
 80013f6:	464e      	mov	r6, r9
 80013f8:	1bdf      	subs	r7, r3, r7
 80013fa:	e62e      	b.n	800105a <__aeabi_dadd+0xa2>
 80013fc:	0002      	movs	r2, r0
 80013fe:	431a      	orrs	r2, r3
 8001400:	d100      	bne.n	8001404 <__aeabi_dadd+0x44c>
 8001402:	e0bd      	b.n	8001580 <__aeabi_dadd+0x5c8>
 8001404:	4662      	mov	r2, ip
 8001406:	4664      	mov	r4, ip
 8001408:	3a01      	subs	r2, #1
 800140a:	2c01      	cmp	r4, #1
 800140c:	d100      	bne.n	8001410 <__aeabi_dadd+0x458>
 800140e:	e0e5      	b.n	80015dc <__aeabi_dadd+0x624>
 8001410:	4c85      	ldr	r4, [pc, #532]	; (8001628 <__aeabi_dadd+0x670>)
 8001412:	45a4      	cmp	ip, r4
 8001414:	d058      	beq.n	80014c8 <__aeabi_dadd+0x510>
 8001416:	4694      	mov	ip, r2
 8001418:	e749      	b.n	80012ae <__aeabi_dadd+0x2f6>
 800141a:	4664      	mov	r4, ip
 800141c:	2220      	movs	r2, #32
 800141e:	1b12      	subs	r2, r2, r4
 8001420:	4644      	mov	r4, r8
 8001422:	4094      	lsls	r4, r2
 8001424:	000f      	movs	r7, r1
 8001426:	46a1      	mov	r9, r4
 8001428:	4664      	mov	r4, ip
 800142a:	4091      	lsls	r1, r2
 800142c:	40e7      	lsrs	r7, r4
 800142e:	464c      	mov	r4, r9
 8001430:	1e4a      	subs	r2, r1, #1
 8001432:	4191      	sbcs	r1, r2
 8001434:	433c      	orrs	r4, r7
 8001436:	4642      	mov	r2, r8
 8001438:	430c      	orrs	r4, r1
 800143a:	4661      	mov	r1, ip
 800143c:	40ca      	lsrs	r2, r1
 800143e:	1880      	adds	r0, r0, r2
 8001440:	e6f4      	b.n	800122c <__aeabi_dadd+0x274>
 8001442:	4c79      	ldr	r4, [pc, #484]	; (8001628 <__aeabi_dadd+0x670>)
 8001444:	42a2      	cmp	r2, r4
 8001446:	d100      	bne.n	800144a <__aeabi_dadd+0x492>
 8001448:	e6fd      	b.n	8001246 <__aeabi_dadd+0x28e>
 800144a:	1859      	adds	r1, r3, r1
 800144c:	4299      	cmp	r1, r3
 800144e:	419b      	sbcs	r3, r3
 8001450:	4440      	add	r0, r8
 8001452:	425f      	negs	r7, r3
 8001454:	19c7      	adds	r7, r0, r7
 8001456:	07fc      	lsls	r4, r7, #31
 8001458:	0849      	lsrs	r1, r1, #1
 800145a:	0016      	movs	r6, r2
 800145c:	430c      	orrs	r4, r1
 800145e:	087f      	lsrs	r7, r7, #1
 8001460:	e6cf      	b.n	8001202 <__aeabi_dadd+0x24a>
 8001462:	1acc      	subs	r4, r1, r3
 8001464:	42a1      	cmp	r1, r4
 8001466:	41bf      	sbcs	r7, r7
 8001468:	4643      	mov	r3, r8
 800146a:	427f      	negs	r7, r7
 800146c:	1a18      	subs	r0, r3, r0
 800146e:	4655      	mov	r5, sl
 8001470:	1bc7      	subs	r7, r0, r7
 8001472:	e5f7      	b.n	8001064 <__aeabi_dadd+0xac>
 8001474:	08c9      	lsrs	r1, r1, #3
 8001476:	077b      	lsls	r3, r7, #29
 8001478:	4655      	mov	r5, sl
 800147a:	430b      	orrs	r3, r1
 800147c:	08f8      	lsrs	r0, r7, #3
 800147e:	e6c8      	b.n	8001212 <__aeabi_dadd+0x25a>
 8001480:	2c00      	cmp	r4, #0
 8001482:	d000      	beq.n	8001486 <__aeabi_dadd+0x4ce>
 8001484:	e081      	b.n	800158a <__aeabi_dadd+0x5d2>
 8001486:	4643      	mov	r3, r8
 8001488:	430b      	orrs	r3, r1
 800148a:	d115      	bne.n	80014b8 <__aeabi_dadd+0x500>
 800148c:	2080      	movs	r0, #128	; 0x80
 800148e:	2500      	movs	r5, #0
 8001490:	0300      	lsls	r0, r0, #12
 8001492:	e6e3      	b.n	800125c <__aeabi_dadd+0x2a4>
 8001494:	1a5c      	subs	r4, r3, r1
 8001496:	42a3      	cmp	r3, r4
 8001498:	419b      	sbcs	r3, r3
 800149a:	1bc7      	subs	r7, r0, r7
 800149c:	425b      	negs	r3, r3
 800149e:	2601      	movs	r6, #1
 80014a0:	1aff      	subs	r7, r7, r3
 80014a2:	e5da      	b.n	800105a <__aeabi_dadd+0xa2>
 80014a4:	0742      	lsls	r2, r0, #29
 80014a6:	08db      	lsrs	r3, r3, #3
 80014a8:	4313      	orrs	r3, r2
 80014aa:	08c0      	lsrs	r0, r0, #3
 80014ac:	e6d2      	b.n	8001254 <__aeabi_dadd+0x29c>
 80014ae:	0742      	lsls	r2, r0, #29
 80014b0:	08db      	lsrs	r3, r3, #3
 80014b2:	4313      	orrs	r3, r2
 80014b4:	08c0      	lsrs	r0, r0, #3
 80014b6:	e6ac      	b.n	8001212 <__aeabi_dadd+0x25a>
 80014b8:	4643      	mov	r3, r8
 80014ba:	4642      	mov	r2, r8
 80014bc:	08c9      	lsrs	r1, r1, #3
 80014be:	075b      	lsls	r3, r3, #29
 80014c0:	4655      	mov	r5, sl
 80014c2:	430b      	orrs	r3, r1
 80014c4:	08d0      	lsrs	r0, r2, #3
 80014c6:	e6c5      	b.n	8001254 <__aeabi_dadd+0x29c>
 80014c8:	4643      	mov	r3, r8
 80014ca:	4642      	mov	r2, r8
 80014cc:	075b      	lsls	r3, r3, #29
 80014ce:	08c9      	lsrs	r1, r1, #3
 80014d0:	430b      	orrs	r3, r1
 80014d2:	08d0      	lsrs	r0, r2, #3
 80014d4:	e6be      	b.n	8001254 <__aeabi_dadd+0x29c>
 80014d6:	4303      	orrs	r3, r0
 80014d8:	001c      	movs	r4, r3
 80014da:	1e63      	subs	r3, r4, #1
 80014dc:	419c      	sbcs	r4, r3
 80014de:	e6fc      	b.n	80012da <__aeabi_dadd+0x322>
 80014e0:	0002      	movs	r2, r0
 80014e2:	3c20      	subs	r4, #32
 80014e4:	40e2      	lsrs	r2, r4
 80014e6:	0014      	movs	r4, r2
 80014e8:	4662      	mov	r2, ip
 80014ea:	2a20      	cmp	r2, #32
 80014ec:	d003      	beq.n	80014f6 <__aeabi_dadd+0x53e>
 80014ee:	2540      	movs	r5, #64	; 0x40
 80014f0:	1aad      	subs	r5, r5, r2
 80014f2:	40a8      	lsls	r0, r5
 80014f4:	4303      	orrs	r3, r0
 80014f6:	1e58      	subs	r0, r3, #1
 80014f8:	4183      	sbcs	r3, r0
 80014fa:	4323      	orrs	r3, r4
 80014fc:	e775      	b.n	80013ea <__aeabi_dadd+0x432>
 80014fe:	2a00      	cmp	r2, #0
 8001500:	d0e2      	beq.n	80014c8 <__aeabi_dadd+0x510>
 8001502:	003a      	movs	r2, r7
 8001504:	430a      	orrs	r2, r1
 8001506:	d0cd      	beq.n	80014a4 <__aeabi_dadd+0x4ec>
 8001508:	0742      	lsls	r2, r0, #29
 800150a:	08db      	lsrs	r3, r3, #3
 800150c:	4313      	orrs	r3, r2
 800150e:	2280      	movs	r2, #128	; 0x80
 8001510:	08c0      	lsrs	r0, r0, #3
 8001512:	0312      	lsls	r2, r2, #12
 8001514:	4210      	tst	r0, r2
 8001516:	d006      	beq.n	8001526 <__aeabi_dadd+0x56e>
 8001518:	08fc      	lsrs	r4, r7, #3
 800151a:	4214      	tst	r4, r2
 800151c:	d103      	bne.n	8001526 <__aeabi_dadd+0x56e>
 800151e:	0020      	movs	r0, r4
 8001520:	08cb      	lsrs	r3, r1, #3
 8001522:	077a      	lsls	r2, r7, #29
 8001524:	4313      	orrs	r3, r2
 8001526:	0f5a      	lsrs	r2, r3, #29
 8001528:	00db      	lsls	r3, r3, #3
 800152a:	0752      	lsls	r2, r2, #29
 800152c:	08db      	lsrs	r3, r3, #3
 800152e:	4313      	orrs	r3, r2
 8001530:	e690      	b.n	8001254 <__aeabi_dadd+0x29c>
 8001532:	4643      	mov	r3, r8
 8001534:	430b      	orrs	r3, r1
 8001536:	d100      	bne.n	800153a <__aeabi_dadd+0x582>
 8001538:	e709      	b.n	800134e <__aeabi_dadd+0x396>
 800153a:	4643      	mov	r3, r8
 800153c:	4642      	mov	r2, r8
 800153e:	08c9      	lsrs	r1, r1, #3
 8001540:	075b      	lsls	r3, r3, #29
 8001542:	4655      	mov	r5, sl
 8001544:	430b      	orrs	r3, r1
 8001546:	08d0      	lsrs	r0, r2, #3
 8001548:	e666      	b.n	8001218 <__aeabi_dadd+0x260>
 800154a:	1acc      	subs	r4, r1, r3
 800154c:	42a1      	cmp	r1, r4
 800154e:	4189      	sbcs	r1, r1
 8001550:	1a3f      	subs	r7, r7, r0
 8001552:	4249      	negs	r1, r1
 8001554:	4655      	mov	r5, sl
 8001556:	2601      	movs	r6, #1
 8001558:	1a7f      	subs	r7, r7, r1
 800155a:	e57e      	b.n	800105a <__aeabi_dadd+0xa2>
 800155c:	4642      	mov	r2, r8
 800155e:	1a5c      	subs	r4, r3, r1
 8001560:	1a87      	subs	r7, r0, r2
 8001562:	42a3      	cmp	r3, r4
 8001564:	4192      	sbcs	r2, r2
 8001566:	4252      	negs	r2, r2
 8001568:	1abf      	subs	r7, r7, r2
 800156a:	023a      	lsls	r2, r7, #8
 800156c:	d53d      	bpl.n	80015ea <__aeabi_dadd+0x632>
 800156e:	1acc      	subs	r4, r1, r3
 8001570:	42a1      	cmp	r1, r4
 8001572:	4189      	sbcs	r1, r1
 8001574:	4643      	mov	r3, r8
 8001576:	4249      	negs	r1, r1
 8001578:	1a1f      	subs	r7, r3, r0
 800157a:	4655      	mov	r5, sl
 800157c:	1a7f      	subs	r7, r7, r1
 800157e:	e595      	b.n	80010ac <__aeabi_dadd+0xf4>
 8001580:	077b      	lsls	r3, r7, #29
 8001582:	08c9      	lsrs	r1, r1, #3
 8001584:	430b      	orrs	r3, r1
 8001586:	08f8      	lsrs	r0, r7, #3
 8001588:	e643      	b.n	8001212 <__aeabi_dadd+0x25a>
 800158a:	4644      	mov	r4, r8
 800158c:	08db      	lsrs	r3, r3, #3
 800158e:	430c      	orrs	r4, r1
 8001590:	d130      	bne.n	80015f4 <__aeabi_dadd+0x63c>
 8001592:	0742      	lsls	r2, r0, #29
 8001594:	4313      	orrs	r3, r2
 8001596:	08c0      	lsrs	r0, r0, #3
 8001598:	e65c      	b.n	8001254 <__aeabi_dadd+0x29c>
 800159a:	077b      	lsls	r3, r7, #29
 800159c:	08c9      	lsrs	r1, r1, #3
 800159e:	430b      	orrs	r3, r1
 80015a0:	08f8      	lsrs	r0, r7, #3
 80015a2:	e639      	b.n	8001218 <__aeabi_dadd+0x260>
 80015a4:	185c      	adds	r4, r3, r1
 80015a6:	429c      	cmp	r4, r3
 80015a8:	419b      	sbcs	r3, r3
 80015aa:	4440      	add	r0, r8
 80015ac:	425b      	negs	r3, r3
 80015ae:	18c7      	adds	r7, r0, r3
 80015b0:	023b      	lsls	r3, r7, #8
 80015b2:	d400      	bmi.n	80015b6 <__aeabi_dadd+0x5fe>
 80015b4:	e625      	b.n	8001202 <__aeabi_dadd+0x24a>
 80015b6:	4b1d      	ldr	r3, [pc, #116]	; (800162c <__aeabi_dadd+0x674>)
 80015b8:	2601      	movs	r6, #1
 80015ba:	401f      	ands	r7, r3
 80015bc:	e621      	b.n	8001202 <__aeabi_dadd+0x24a>
 80015be:	0004      	movs	r4, r0
 80015c0:	3a20      	subs	r2, #32
 80015c2:	40d4      	lsrs	r4, r2
 80015c4:	4662      	mov	r2, ip
 80015c6:	2a20      	cmp	r2, #32
 80015c8:	d004      	beq.n	80015d4 <__aeabi_dadd+0x61c>
 80015ca:	2240      	movs	r2, #64	; 0x40
 80015cc:	4666      	mov	r6, ip
 80015ce:	1b92      	subs	r2, r2, r6
 80015d0:	4090      	lsls	r0, r2
 80015d2:	4303      	orrs	r3, r0
 80015d4:	1e5a      	subs	r2, r3, #1
 80015d6:	4193      	sbcs	r3, r2
 80015d8:	431c      	orrs	r4, r3
 80015da:	e67e      	b.n	80012da <__aeabi_dadd+0x322>
 80015dc:	185c      	adds	r4, r3, r1
 80015de:	428c      	cmp	r4, r1
 80015e0:	4189      	sbcs	r1, r1
 80015e2:	4440      	add	r0, r8
 80015e4:	4249      	negs	r1, r1
 80015e6:	1847      	adds	r7, r0, r1
 80015e8:	e6dd      	b.n	80013a6 <__aeabi_dadd+0x3ee>
 80015ea:	0023      	movs	r3, r4
 80015ec:	433b      	orrs	r3, r7
 80015ee:	d100      	bne.n	80015f2 <__aeabi_dadd+0x63a>
 80015f0:	e6ad      	b.n	800134e <__aeabi_dadd+0x396>
 80015f2:	e606      	b.n	8001202 <__aeabi_dadd+0x24a>
 80015f4:	0744      	lsls	r4, r0, #29
 80015f6:	4323      	orrs	r3, r4
 80015f8:	2480      	movs	r4, #128	; 0x80
 80015fa:	08c0      	lsrs	r0, r0, #3
 80015fc:	0324      	lsls	r4, r4, #12
 80015fe:	4220      	tst	r0, r4
 8001600:	d008      	beq.n	8001614 <__aeabi_dadd+0x65c>
 8001602:	4642      	mov	r2, r8
 8001604:	08d6      	lsrs	r6, r2, #3
 8001606:	4226      	tst	r6, r4
 8001608:	d104      	bne.n	8001614 <__aeabi_dadd+0x65c>
 800160a:	4655      	mov	r5, sl
 800160c:	0030      	movs	r0, r6
 800160e:	08cb      	lsrs	r3, r1, #3
 8001610:	0751      	lsls	r1, r2, #29
 8001612:	430b      	orrs	r3, r1
 8001614:	0f5a      	lsrs	r2, r3, #29
 8001616:	00db      	lsls	r3, r3, #3
 8001618:	08db      	lsrs	r3, r3, #3
 800161a:	0752      	lsls	r2, r2, #29
 800161c:	4313      	orrs	r3, r2
 800161e:	e619      	b.n	8001254 <__aeabi_dadd+0x29c>
 8001620:	2300      	movs	r3, #0
 8001622:	4a01      	ldr	r2, [pc, #4]	; (8001628 <__aeabi_dadd+0x670>)
 8001624:	001f      	movs	r7, r3
 8001626:	e55e      	b.n	80010e6 <__aeabi_dadd+0x12e>
 8001628:	000007ff 	.word	0x000007ff
 800162c:	ff7fffff 	.word	0xff7fffff

08001630 <__aeabi_ddiv>:
 8001630:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001632:	4657      	mov	r7, sl
 8001634:	464e      	mov	r6, r9
 8001636:	4645      	mov	r5, r8
 8001638:	46de      	mov	lr, fp
 800163a:	b5e0      	push	{r5, r6, r7, lr}
 800163c:	4681      	mov	r9, r0
 800163e:	0005      	movs	r5, r0
 8001640:	030c      	lsls	r4, r1, #12
 8001642:	0048      	lsls	r0, r1, #1
 8001644:	4692      	mov	sl, r2
 8001646:	001f      	movs	r7, r3
 8001648:	b085      	sub	sp, #20
 800164a:	0b24      	lsrs	r4, r4, #12
 800164c:	0d40      	lsrs	r0, r0, #21
 800164e:	0fce      	lsrs	r6, r1, #31
 8001650:	2800      	cmp	r0, #0
 8001652:	d100      	bne.n	8001656 <__aeabi_ddiv+0x26>
 8001654:	e156      	b.n	8001904 <__aeabi_ddiv+0x2d4>
 8001656:	4bd4      	ldr	r3, [pc, #848]	; (80019a8 <__aeabi_ddiv+0x378>)
 8001658:	4298      	cmp	r0, r3
 800165a:	d100      	bne.n	800165e <__aeabi_ddiv+0x2e>
 800165c:	e172      	b.n	8001944 <__aeabi_ddiv+0x314>
 800165e:	0f6b      	lsrs	r3, r5, #29
 8001660:	00e4      	lsls	r4, r4, #3
 8001662:	431c      	orrs	r4, r3
 8001664:	2380      	movs	r3, #128	; 0x80
 8001666:	041b      	lsls	r3, r3, #16
 8001668:	4323      	orrs	r3, r4
 800166a:	4698      	mov	r8, r3
 800166c:	4bcf      	ldr	r3, [pc, #828]	; (80019ac <__aeabi_ddiv+0x37c>)
 800166e:	00ed      	lsls	r5, r5, #3
 8001670:	469b      	mov	fp, r3
 8001672:	2300      	movs	r3, #0
 8001674:	4699      	mov	r9, r3
 8001676:	4483      	add	fp, r0
 8001678:	9300      	str	r3, [sp, #0]
 800167a:	033c      	lsls	r4, r7, #12
 800167c:	007b      	lsls	r3, r7, #1
 800167e:	4650      	mov	r0, sl
 8001680:	0b24      	lsrs	r4, r4, #12
 8001682:	0d5b      	lsrs	r3, r3, #21
 8001684:	0fff      	lsrs	r7, r7, #31
 8001686:	2b00      	cmp	r3, #0
 8001688:	d100      	bne.n	800168c <__aeabi_ddiv+0x5c>
 800168a:	e11f      	b.n	80018cc <__aeabi_ddiv+0x29c>
 800168c:	4ac6      	ldr	r2, [pc, #792]	; (80019a8 <__aeabi_ddiv+0x378>)
 800168e:	4293      	cmp	r3, r2
 8001690:	d100      	bne.n	8001694 <__aeabi_ddiv+0x64>
 8001692:	e162      	b.n	800195a <__aeabi_ddiv+0x32a>
 8001694:	49c5      	ldr	r1, [pc, #788]	; (80019ac <__aeabi_ddiv+0x37c>)
 8001696:	0f42      	lsrs	r2, r0, #29
 8001698:	468c      	mov	ip, r1
 800169a:	00e4      	lsls	r4, r4, #3
 800169c:	4659      	mov	r1, fp
 800169e:	4314      	orrs	r4, r2
 80016a0:	2280      	movs	r2, #128	; 0x80
 80016a2:	4463      	add	r3, ip
 80016a4:	0412      	lsls	r2, r2, #16
 80016a6:	1acb      	subs	r3, r1, r3
 80016a8:	4314      	orrs	r4, r2
 80016aa:	469b      	mov	fp, r3
 80016ac:	00c2      	lsls	r2, r0, #3
 80016ae:	2000      	movs	r0, #0
 80016b0:	0033      	movs	r3, r6
 80016b2:	407b      	eors	r3, r7
 80016b4:	469a      	mov	sl, r3
 80016b6:	464b      	mov	r3, r9
 80016b8:	2b0f      	cmp	r3, #15
 80016ba:	d827      	bhi.n	800170c <__aeabi_ddiv+0xdc>
 80016bc:	49bc      	ldr	r1, [pc, #752]	; (80019b0 <__aeabi_ddiv+0x380>)
 80016be:	009b      	lsls	r3, r3, #2
 80016c0:	58cb      	ldr	r3, [r1, r3]
 80016c2:	469f      	mov	pc, r3
 80016c4:	46b2      	mov	sl, r6
 80016c6:	9b00      	ldr	r3, [sp, #0]
 80016c8:	2b02      	cmp	r3, #2
 80016ca:	d016      	beq.n	80016fa <__aeabi_ddiv+0xca>
 80016cc:	2b03      	cmp	r3, #3
 80016ce:	d100      	bne.n	80016d2 <__aeabi_ddiv+0xa2>
 80016d0:	e28e      	b.n	8001bf0 <__aeabi_ddiv+0x5c0>
 80016d2:	2b01      	cmp	r3, #1
 80016d4:	d000      	beq.n	80016d8 <__aeabi_ddiv+0xa8>
 80016d6:	e0d9      	b.n	800188c <__aeabi_ddiv+0x25c>
 80016d8:	2300      	movs	r3, #0
 80016da:	2400      	movs	r4, #0
 80016dc:	2500      	movs	r5, #0
 80016de:	4652      	mov	r2, sl
 80016e0:	051b      	lsls	r3, r3, #20
 80016e2:	4323      	orrs	r3, r4
 80016e4:	07d2      	lsls	r2, r2, #31
 80016e6:	4313      	orrs	r3, r2
 80016e8:	0028      	movs	r0, r5
 80016ea:	0019      	movs	r1, r3
 80016ec:	b005      	add	sp, #20
 80016ee:	bcf0      	pop	{r4, r5, r6, r7}
 80016f0:	46bb      	mov	fp, r7
 80016f2:	46b2      	mov	sl, r6
 80016f4:	46a9      	mov	r9, r5
 80016f6:	46a0      	mov	r8, r4
 80016f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80016fa:	2400      	movs	r4, #0
 80016fc:	2500      	movs	r5, #0
 80016fe:	4baa      	ldr	r3, [pc, #680]	; (80019a8 <__aeabi_ddiv+0x378>)
 8001700:	e7ed      	b.n	80016de <__aeabi_ddiv+0xae>
 8001702:	46ba      	mov	sl, r7
 8001704:	46a0      	mov	r8, r4
 8001706:	0015      	movs	r5, r2
 8001708:	9000      	str	r0, [sp, #0]
 800170a:	e7dc      	b.n	80016c6 <__aeabi_ddiv+0x96>
 800170c:	4544      	cmp	r4, r8
 800170e:	d200      	bcs.n	8001712 <__aeabi_ddiv+0xe2>
 8001710:	e1c7      	b.n	8001aa2 <__aeabi_ddiv+0x472>
 8001712:	d100      	bne.n	8001716 <__aeabi_ddiv+0xe6>
 8001714:	e1c2      	b.n	8001a9c <__aeabi_ddiv+0x46c>
 8001716:	2301      	movs	r3, #1
 8001718:	425b      	negs	r3, r3
 800171a:	469c      	mov	ip, r3
 800171c:	002e      	movs	r6, r5
 800171e:	4640      	mov	r0, r8
 8001720:	2500      	movs	r5, #0
 8001722:	44e3      	add	fp, ip
 8001724:	0223      	lsls	r3, r4, #8
 8001726:	0e14      	lsrs	r4, r2, #24
 8001728:	431c      	orrs	r4, r3
 800172a:	0c1b      	lsrs	r3, r3, #16
 800172c:	4699      	mov	r9, r3
 800172e:	0423      	lsls	r3, r4, #16
 8001730:	0c1f      	lsrs	r7, r3, #16
 8001732:	0212      	lsls	r2, r2, #8
 8001734:	4649      	mov	r1, r9
 8001736:	9200      	str	r2, [sp, #0]
 8001738:	9701      	str	r7, [sp, #4]
 800173a:	f7fe fd85 	bl	8000248 <__aeabi_uidivmod>
 800173e:	0002      	movs	r2, r0
 8001740:	437a      	muls	r2, r7
 8001742:	040b      	lsls	r3, r1, #16
 8001744:	0c31      	lsrs	r1, r6, #16
 8001746:	4680      	mov	r8, r0
 8001748:	4319      	orrs	r1, r3
 800174a:	428a      	cmp	r2, r1
 800174c:	d907      	bls.n	800175e <__aeabi_ddiv+0x12e>
 800174e:	2301      	movs	r3, #1
 8001750:	425b      	negs	r3, r3
 8001752:	469c      	mov	ip, r3
 8001754:	1909      	adds	r1, r1, r4
 8001756:	44e0      	add	r8, ip
 8001758:	428c      	cmp	r4, r1
 800175a:	d800      	bhi.n	800175e <__aeabi_ddiv+0x12e>
 800175c:	e207      	b.n	8001b6e <__aeabi_ddiv+0x53e>
 800175e:	1a88      	subs	r0, r1, r2
 8001760:	4649      	mov	r1, r9
 8001762:	f7fe fd71 	bl	8000248 <__aeabi_uidivmod>
 8001766:	0409      	lsls	r1, r1, #16
 8001768:	468c      	mov	ip, r1
 800176a:	0431      	lsls	r1, r6, #16
 800176c:	4666      	mov	r6, ip
 800176e:	9a01      	ldr	r2, [sp, #4]
 8001770:	0c09      	lsrs	r1, r1, #16
 8001772:	4342      	muls	r2, r0
 8001774:	0003      	movs	r3, r0
 8001776:	4331      	orrs	r1, r6
 8001778:	428a      	cmp	r2, r1
 800177a:	d904      	bls.n	8001786 <__aeabi_ddiv+0x156>
 800177c:	1909      	adds	r1, r1, r4
 800177e:	3b01      	subs	r3, #1
 8001780:	428c      	cmp	r4, r1
 8001782:	d800      	bhi.n	8001786 <__aeabi_ddiv+0x156>
 8001784:	e1ed      	b.n	8001b62 <__aeabi_ddiv+0x532>
 8001786:	1a88      	subs	r0, r1, r2
 8001788:	4642      	mov	r2, r8
 800178a:	0412      	lsls	r2, r2, #16
 800178c:	431a      	orrs	r2, r3
 800178e:	4690      	mov	r8, r2
 8001790:	4641      	mov	r1, r8
 8001792:	9b00      	ldr	r3, [sp, #0]
 8001794:	040e      	lsls	r6, r1, #16
 8001796:	0c1b      	lsrs	r3, r3, #16
 8001798:	001f      	movs	r7, r3
 800179a:	9302      	str	r3, [sp, #8]
 800179c:	9b00      	ldr	r3, [sp, #0]
 800179e:	0c36      	lsrs	r6, r6, #16
 80017a0:	041b      	lsls	r3, r3, #16
 80017a2:	0c19      	lsrs	r1, r3, #16
 80017a4:	000b      	movs	r3, r1
 80017a6:	4373      	muls	r3, r6
 80017a8:	0c12      	lsrs	r2, r2, #16
 80017aa:	437e      	muls	r6, r7
 80017ac:	9103      	str	r1, [sp, #12]
 80017ae:	4351      	muls	r1, r2
 80017b0:	437a      	muls	r2, r7
 80017b2:	0c1f      	lsrs	r7, r3, #16
 80017b4:	46bc      	mov	ip, r7
 80017b6:	1876      	adds	r6, r6, r1
 80017b8:	4466      	add	r6, ip
 80017ba:	42b1      	cmp	r1, r6
 80017bc:	d903      	bls.n	80017c6 <__aeabi_ddiv+0x196>
 80017be:	2180      	movs	r1, #128	; 0x80
 80017c0:	0249      	lsls	r1, r1, #9
 80017c2:	468c      	mov	ip, r1
 80017c4:	4462      	add	r2, ip
 80017c6:	0c31      	lsrs	r1, r6, #16
 80017c8:	188a      	adds	r2, r1, r2
 80017ca:	0431      	lsls	r1, r6, #16
 80017cc:	041e      	lsls	r6, r3, #16
 80017ce:	0c36      	lsrs	r6, r6, #16
 80017d0:	198e      	adds	r6, r1, r6
 80017d2:	4290      	cmp	r0, r2
 80017d4:	d302      	bcc.n	80017dc <__aeabi_ddiv+0x1ac>
 80017d6:	d112      	bne.n	80017fe <__aeabi_ddiv+0x1ce>
 80017d8:	42b5      	cmp	r5, r6
 80017da:	d210      	bcs.n	80017fe <__aeabi_ddiv+0x1ce>
 80017dc:	4643      	mov	r3, r8
 80017de:	1e59      	subs	r1, r3, #1
 80017e0:	9b00      	ldr	r3, [sp, #0]
 80017e2:	469c      	mov	ip, r3
 80017e4:	4465      	add	r5, ip
 80017e6:	001f      	movs	r7, r3
 80017e8:	429d      	cmp	r5, r3
 80017ea:	419b      	sbcs	r3, r3
 80017ec:	425b      	negs	r3, r3
 80017ee:	191b      	adds	r3, r3, r4
 80017f0:	18c0      	adds	r0, r0, r3
 80017f2:	4284      	cmp	r4, r0
 80017f4:	d200      	bcs.n	80017f8 <__aeabi_ddiv+0x1c8>
 80017f6:	e1a0      	b.n	8001b3a <__aeabi_ddiv+0x50a>
 80017f8:	d100      	bne.n	80017fc <__aeabi_ddiv+0x1cc>
 80017fa:	e19b      	b.n	8001b34 <__aeabi_ddiv+0x504>
 80017fc:	4688      	mov	r8, r1
 80017fe:	1bae      	subs	r6, r5, r6
 8001800:	42b5      	cmp	r5, r6
 8001802:	41ad      	sbcs	r5, r5
 8001804:	1a80      	subs	r0, r0, r2
 8001806:	426d      	negs	r5, r5
 8001808:	1b40      	subs	r0, r0, r5
 800180a:	4284      	cmp	r4, r0
 800180c:	d100      	bne.n	8001810 <__aeabi_ddiv+0x1e0>
 800180e:	e1d5      	b.n	8001bbc <__aeabi_ddiv+0x58c>
 8001810:	4649      	mov	r1, r9
 8001812:	f7fe fd19 	bl	8000248 <__aeabi_uidivmod>
 8001816:	9a01      	ldr	r2, [sp, #4]
 8001818:	040b      	lsls	r3, r1, #16
 800181a:	4342      	muls	r2, r0
 800181c:	0c31      	lsrs	r1, r6, #16
 800181e:	0005      	movs	r5, r0
 8001820:	4319      	orrs	r1, r3
 8001822:	428a      	cmp	r2, r1
 8001824:	d900      	bls.n	8001828 <__aeabi_ddiv+0x1f8>
 8001826:	e16c      	b.n	8001b02 <__aeabi_ddiv+0x4d2>
 8001828:	1a88      	subs	r0, r1, r2
 800182a:	4649      	mov	r1, r9
 800182c:	f7fe fd0c 	bl	8000248 <__aeabi_uidivmod>
 8001830:	9a01      	ldr	r2, [sp, #4]
 8001832:	0436      	lsls	r6, r6, #16
 8001834:	4342      	muls	r2, r0
 8001836:	0409      	lsls	r1, r1, #16
 8001838:	0c36      	lsrs	r6, r6, #16
 800183a:	0003      	movs	r3, r0
 800183c:	430e      	orrs	r6, r1
 800183e:	42b2      	cmp	r2, r6
 8001840:	d900      	bls.n	8001844 <__aeabi_ddiv+0x214>
 8001842:	e153      	b.n	8001aec <__aeabi_ddiv+0x4bc>
 8001844:	9803      	ldr	r0, [sp, #12]
 8001846:	1ab6      	subs	r6, r6, r2
 8001848:	0002      	movs	r2, r0
 800184a:	042d      	lsls	r5, r5, #16
 800184c:	431d      	orrs	r5, r3
 800184e:	9f02      	ldr	r7, [sp, #8]
 8001850:	042b      	lsls	r3, r5, #16
 8001852:	0c1b      	lsrs	r3, r3, #16
 8001854:	435a      	muls	r2, r3
 8001856:	437b      	muls	r3, r7
 8001858:	469c      	mov	ip, r3
 800185a:	0c29      	lsrs	r1, r5, #16
 800185c:	4348      	muls	r0, r1
 800185e:	0c13      	lsrs	r3, r2, #16
 8001860:	4484      	add	ip, r0
 8001862:	4463      	add	r3, ip
 8001864:	4379      	muls	r1, r7
 8001866:	4298      	cmp	r0, r3
 8001868:	d903      	bls.n	8001872 <__aeabi_ddiv+0x242>
 800186a:	2080      	movs	r0, #128	; 0x80
 800186c:	0240      	lsls	r0, r0, #9
 800186e:	4684      	mov	ip, r0
 8001870:	4461      	add	r1, ip
 8001872:	0c18      	lsrs	r0, r3, #16
 8001874:	0412      	lsls	r2, r2, #16
 8001876:	041b      	lsls	r3, r3, #16
 8001878:	0c12      	lsrs	r2, r2, #16
 800187a:	1841      	adds	r1, r0, r1
 800187c:	189b      	adds	r3, r3, r2
 800187e:	428e      	cmp	r6, r1
 8001880:	d200      	bcs.n	8001884 <__aeabi_ddiv+0x254>
 8001882:	e0ff      	b.n	8001a84 <__aeabi_ddiv+0x454>
 8001884:	d100      	bne.n	8001888 <__aeabi_ddiv+0x258>
 8001886:	e0fa      	b.n	8001a7e <__aeabi_ddiv+0x44e>
 8001888:	2301      	movs	r3, #1
 800188a:	431d      	orrs	r5, r3
 800188c:	4a49      	ldr	r2, [pc, #292]	; (80019b4 <__aeabi_ddiv+0x384>)
 800188e:	445a      	add	r2, fp
 8001890:	2a00      	cmp	r2, #0
 8001892:	dc00      	bgt.n	8001896 <__aeabi_ddiv+0x266>
 8001894:	e0aa      	b.n	80019ec <__aeabi_ddiv+0x3bc>
 8001896:	076b      	lsls	r3, r5, #29
 8001898:	d000      	beq.n	800189c <__aeabi_ddiv+0x26c>
 800189a:	e13d      	b.n	8001b18 <__aeabi_ddiv+0x4e8>
 800189c:	08ed      	lsrs	r5, r5, #3
 800189e:	4643      	mov	r3, r8
 80018a0:	01db      	lsls	r3, r3, #7
 80018a2:	d506      	bpl.n	80018b2 <__aeabi_ddiv+0x282>
 80018a4:	4642      	mov	r2, r8
 80018a6:	4b44      	ldr	r3, [pc, #272]	; (80019b8 <__aeabi_ddiv+0x388>)
 80018a8:	401a      	ands	r2, r3
 80018aa:	4690      	mov	r8, r2
 80018ac:	2280      	movs	r2, #128	; 0x80
 80018ae:	00d2      	lsls	r2, r2, #3
 80018b0:	445a      	add	r2, fp
 80018b2:	4b42      	ldr	r3, [pc, #264]	; (80019bc <__aeabi_ddiv+0x38c>)
 80018b4:	429a      	cmp	r2, r3
 80018b6:	dd00      	ble.n	80018ba <__aeabi_ddiv+0x28a>
 80018b8:	e71f      	b.n	80016fa <__aeabi_ddiv+0xca>
 80018ba:	4643      	mov	r3, r8
 80018bc:	075b      	lsls	r3, r3, #29
 80018be:	431d      	orrs	r5, r3
 80018c0:	4643      	mov	r3, r8
 80018c2:	0552      	lsls	r2, r2, #21
 80018c4:	025c      	lsls	r4, r3, #9
 80018c6:	0b24      	lsrs	r4, r4, #12
 80018c8:	0d53      	lsrs	r3, r2, #21
 80018ca:	e708      	b.n	80016de <__aeabi_ddiv+0xae>
 80018cc:	4652      	mov	r2, sl
 80018ce:	4322      	orrs	r2, r4
 80018d0:	d100      	bne.n	80018d4 <__aeabi_ddiv+0x2a4>
 80018d2:	e07b      	b.n	80019cc <__aeabi_ddiv+0x39c>
 80018d4:	2c00      	cmp	r4, #0
 80018d6:	d100      	bne.n	80018da <__aeabi_ddiv+0x2aa>
 80018d8:	e0fa      	b.n	8001ad0 <__aeabi_ddiv+0x4a0>
 80018da:	0020      	movs	r0, r4
 80018dc:	f001 fa22 	bl	8002d24 <__clzsi2>
 80018e0:	0002      	movs	r2, r0
 80018e2:	3a0b      	subs	r2, #11
 80018e4:	231d      	movs	r3, #29
 80018e6:	0001      	movs	r1, r0
 80018e8:	1a9b      	subs	r3, r3, r2
 80018ea:	4652      	mov	r2, sl
 80018ec:	3908      	subs	r1, #8
 80018ee:	40da      	lsrs	r2, r3
 80018f0:	408c      	lsls	r4, r1
 80018f2:	4314      	orrs	r4, r2
 80018f4:	4652      	mov	r2, sl
 80018f6:	408a      	lsls	r2, r1
 80018f8:	4b31      	ldr	r3, [pc, #196]	; (80019c0 <__aeabi_ddiv+0x390>)
 80018fa:	4458      	add	r0, fp
 80018fc:	469b      	mov	fp, r3
 80018fe:	4483      	add	fp, r0
 8001900:	2000      	movs	r0, #0
 8001902:	e6d5      	b.n	80016b0 <__aeabi_ddiv+0x80>
 8001904:	464b      	mov	r3, r9
 8001906:	4323      	orrs	r3, r4
 8001908:	4698      	mov	r8, r3
 800190a:	d044      	beq.n	8001996 <__aeabi_ddiv+0x366>
 800190c:	2c00      	cmp	r4, #0
 800190e:	d100      	bne.n	8001912 <__aeabi_ddiv+0x2e2>
 8001910:	e0ce      	b.n	8001ab0 <__aeabi_ddiv+0x480>
 8001912:	0020      	movs	r0, r4
 8001914:	f001 fa06 	bl	8002d24 <__clzsi2>
 8001918:	0001      	movs	r1, r0
 800191a:	0002      	movs	r2, r0
 800191c:	390b      	subs	r1, #11
 800191e:	231d      	movs	r3, #29
 8001920:	1a5b      	subs	r3, r3, r1
 8001922:	4649      	mov	r1, r9
 8001924:	0010      	movs	r0, r2
 8001926:	40d9      	lsrs	r1, r3
 8001928:	3808      	subs	r0, #8
 800192a:	4084      	lsls	r4, r0
 800192c:	000b      	movs	r3, r1
 800192e:	464d      	mov	r5, r9
 8001930:	4323      	orrs	r3, r4
 8001932:	4698      	mov	r8, r3
 8001934:	4085      	lsls	r5, r0
 8001936:	4823      	ldr	r0, [pc, #140]	; (80019c4 <__aeabi_ddiv+0x394>)
 8001938:	1a83      	subs	r3, r0, r2
 800193a:	469b      	mov	fp, r3
 800193c:	2300      	movs	r3, #0
 800193e:	4699      	mov	r9, r3
 8001940:	9300      	str	r3, [sp, #0]
 8001942:	e69a      	b.n	800167a <__aeabi_ddiv+0x4a>
 8001944:	464b      	mov	r3, r9
 8001946:	4323      	orrs	r3, r4
 8001948:	4698      	mov	r8, r3
 800194a:	d11d      	bne.n	8001988 <__aeabi_ddiv+0x358>
 800194c:	2308      	movs	r3, #8
 800194e:	4699      	mov	r9, r3
 8001950:	3b06      	subs	r3, #6
 8001952:	2500      	movs	r5, #0
 8001954:	4683      	mov	fp, r0
 8001956:	9300      	str	r3, [sp, #0]
 8001958:	e68f      	b.n	800167a <__aeabi_ddiv+0x4a>
 800195a:	4652      	mov	r2, sl
 800195c:	4322      	orrs	r2, r4
 800195e:	d109      	bne.n	8001974 <__aeabi_ddiv+0x344>
 8001960:	2302      	movs	r3, #2
 8001962:	4649      	mov	r1, r9
 8001964:	4319      	orrs	r1, r3
 8001966:	4b18      	ldr	r3, [pc, #96]	; (80019c8 <__aeabi_ddiv+0x398>)
 8001968:	4689      	mov	r9, r1
 800196a:	469c      	mov	ip, r3
 800196c:	2400      	movs	r4, #0
 800196e:	2002      	movs	r0, #2
 8001970:	44e3      	add	fp, ip
 8001972:	e69d      	b.n	80016b0 <__aeabi_ddiv+0x80>
 8001974:	2303      	movs	r3, #3
 8001976:	464a      	mov	r2, r9
 8001978:	431a      	orrs	r2, r3
 800197a:	4b13      	ldr	r3, [pc, #76]	; (80019c8 <__aeabi_ddiv+0x398>)
 800197c:	4691      	mov	r9, r2
 800197e:	469c      	mov	ip, r3
 8001980:	4652      	mov	r2, sl
 8001982:	2003      	movs	r0, #3
 8001984:	44e3      	add	fp, ip
 8001986:	e693      	b.n	80016b0 <__aeabi_ddiv+0x80>
 8001988:	230c      	movs	r3, #12
 800198a:	4699      	mov	r9, r3
 800198c:	3b09      	subs	r3, #9
 800198e:	46a0      	mov	r8, r4
 8001990:	4683      	mov	fp, r0
 8001992:	9300      	str	r3, [sp, #0]
 8001994:	e671      	b.n	800167a <__aeabi_ddiv+0x4a>
 8001996:	2304      	movs	r3, #4
 8001998:	4699      	mov	r9, r3
 800199a:	2300      	movs	r3, #0
 800199c:	469b      	mov	fp, r3
 800199e:	3301      	adds	r3, #1
 80019a0:	2500      	movs	r5, #0
 80019a2:	9300      	str	r3, [sp, #0]
 80019a4:	e669      	b.n	800167a <__aeabi_ddiv+0x4a>
 80019a6:	46c0      	nop			; (mov r8, r8)
 80019a8:	000007ff 	.word	0x000007ff
 80019ac:	fffffc01 	.word	0xfffffc01
 80019b0:	0800abfc 	.word	0x0800abfc
 80019b4:	000003ff 	.word	0x000003ff
 80019b8:	feffffff 	.word	0xfeffffff
 80019bc:	000007fe 	.word	0x000007fe
 80019c0:	000003f3 	.word	0x000003f3
 80019c4:	fffffc0d 	.word	0xfffffc0d
 80019c8:	fffff801 	.word	0xfffff801
 80019cc:	4649      	mov	r1, r9
 80019ce:	2301      	movs	r3, #1
 80019d0:	4319      	orrs	r1, r3
 80019d2:	4689      	mov	r9, r1
 80019d4:	2400      	movs	r4, #0
 80019d6:	2001      	movs	r0, #1
 80019d8:	e66a      	b.n	80016b0 <__aeabi_ddiv+0x80>
 80019da:	2300      	movs	r3, #0
 80019dc:	2480      	movs	r4, #128	; 0x80
 80019de:	469a      	mov	sl, r3
 80019e0:	2500      	movs	r5, #0
 80019e2:	4b8a      	ldr	r3, [pc, #552]	; (8001c0c <__aeabi_ddiv+0x5dc>)
 80019e4:	0324      	lsls	r4, r4, #12
 80019e6:	e67a      	b.n	80016de <__aeabi_ddiv+0xae>
 80019e8:	2501      	movs	r5, #1
 80019ea:	426d      	negs	r5, r5
 80019ec:	2301      	movs	r3, #1
 80019ee:	1a9b      	subs	r3, r3, r2
 80019f0:	2b38      	cmp	r3, #56	; 0x38
 80019f2:	dd00      	ble.n	80019f6 <__aeabi_ddiv+0x3c6>
 80019f4:	e670      	b.n	80016d8 <__aeabi_ddiv+0xa8>
 80019f6:	2b1f      	cmp	r3, #31
 80019f8:	dc00      	bgt.n	80019fc <__aeabi_ddiv+0x3cc>
 80019fa:	e0bf      	b.n	8001b7c <__aeabi_ddiv+0x54c>
 80019fc:	211f      	movs	r1, #31
 80019fe:	4249      	negs	r1, r1
 8001a00:	1a8a      	subs	r2, r1, r2
 8001a02:	4641      	mov	r1, r8
 8001a04:	40d1      	lsrs	r1, r2
 8001a06:	000a      	movs	r2, r1
 8001a08:	2b20      	cmp	r3, #32
 8001a0a:	d004      	beq.n	8001a16 <__aeabi_ddiv+0x3e6>
 8001a0c:	4641      	mov	r1, r8
 8001a0e:	4b80      	ldr	r3, [pc, #512]	; (8001c10 <__aeabi_ddiv+0x5e0>)
 8001a10:	445b      	add	r3, fp
 8001a12:	4099      	lsls	r1, r3
 8001a14:	430d      	orrs	r5, r1
 8001a16:	1e6b      	subs	r3, r5, #1
 8001a18:	419d      	sbcs	r5, r3
 8001a1a:	2307      	movs	r3, #7
 8001a1c:	432a      	orrs	r2, r5
 8001a1e:	001d      	movs	r5, r3
 8001a20:	2400      	movs	r4, #0
 8001a22:	4015      	ands	r5, r2
 8001a24:	4213      	tst	r3, r2
 8001a26:	d100      	bne.n	8001a2a <__aeabi_ddiv+0x3fa>
 8001a28:	e0d4      	b.n	8001bd4 <__aeabi_ddiv+0x5a4>
 8001a2a:	210f      	movs	r1, #15
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	4011      	ands	r1, r2
 8001a30:	2904      	cmp	r1, #4
 8001a32:	d100      	bne.n	8001a36 <__aeabi_ddiv+0x406>
 8001a34:	e0cb      	b.n	8001bce <__aeabi_ddiv+0x59e>
 8001a36:	1d11      	adds	r1, r2, #4
 8001a38:	4291      	cmp	r1, r2
 8001a3a:	4192      	sbcs	r2, r2
 8001a3c:	4252      	negs	r2, r2
 8001a3e:	189b      	adds	r3, r3, r2
 8001a40:	000a      	movs	r2, r1
 8001a42:	0219      	lsls	r1, r3, #8
 8001a44:	d400      	bmi.n	8001a48 <__aeabi_ddiv+0x418>
 8001a46:	e0c2      	b.n	8001bce <__aeabi_ddiv+0x59e>
 8001a48:	2301      	movs	r3, #1
 8001a4a:	2400      	movs	r4, #0
 8001a4c:	2500      	movs	r5, #0
 8001a4e:	e646      	b.n	80016de <__aeabi_ddiv+0xae>
 8001a50:	2380      	movs	r3, #128	; 0x80
 8001a52:	4641      	mov	r1, r8
 8001a54:	031b      	lsls	r3, r3, #12
 8001a56:	4219      	tst	r1, r3
 8001a58:	d008      	beq.n	8001a6c <__aeabi_ddiv+0x43c>
 8001a5a:	421c      	tst	r4, r3
 8001a5c:	d106      	bne.n	8001a6c <__aeabi_ddiv+0x43c>
 8001a5e:	431c      	orrs	r4, r3
 8001a60:	0324      	lsls	r4, r4, #12
 8001a62:	46ba      	mov	sl, r7
 8001a64:	0015      	movs	r5, r2
 8001a66:	4b69      	ldr	r3, [pc, #420]	; (8001c0c <__aeabi_ddiv+0x5dc>)
 8001a68:	0b24      	lsrs	r4, r4, #12
 8001a6a:	e638      	b.n	80016de <__aeabi_ddiv+0xae>
 8001a6c:	2480      	movs	r4, #128	; 0x80
 8001a6e:	4643      	mov	r3, r8
 8001a70:	0324      	lsls	r4, r4, #12
 8001a72:	431c      	orrs	r4, r3
 8001a74:	0324      	lsls	r4, r4, #12
 8001a76:	46b2      	mov	sl, r6
 8001a78:	4b64      	ldr	r3, [pc, #400]	; (8001c0c <__aeabi_ddiv+0x5dc>)
 8001a7a:	0b24      	lsrs	r4, r4, #12
 8001a7c:	e62f      	b.n	80016de <__aeabi_ddiv+0xae>
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d100      	bne.n	8001a84 <__aeabi_ddiv+0x454>
 8001a82:	e703      	b.n	800188c <__aeabi_ddiv+0x25c>
 8001a84:	19a6      	adds	r6, r4, r6
 8001a86:	1e68      	subs	r0, r5, #1
 8001a88:	42a6      	cmp	r6, r4
 8001a8a:	d200      	bcs.n	8001a8e <__aeabi_ddiv+0x45e>
 8001a8c:	e08d      	b.n	8001baa <__aeabi_ddiv+0x57a>
 8001a8e:	428e      	cmp	r6, r1
 8001a90:	d200      	bcs.n	8001a94 <__aeabi_ddiv+0x464>
 8001a92:	e0a3      	b.n	8001bdc <__aeabi_ddiv+0x5ac>
 8001a94:	d100      	bne.n	8001a98 <__aeabi_ddiv+0x468>
 8001a96:	e0b3      	b.n	8001c00 <__aeabi_ddiv+0x5d0>
 8001a98:	0005      	movs	r5, r0
 8001a9a:	e6f5      	b.n	8001888 <__aeabi_ddiv+0x258>
 8001a9c:	42aa      	cmp	r2, r5
 8001a9e:	d900      	bls.n	8001aa2 <__aeabi_ddiv+0x472>
 8001aa0:	e639      	b.n	8001716 <__aeabi_ddiv+0xe6>
 8001aa2:	4643      	mov	r3, r8
 8001aa4:	07de      	lsls	r6, r3, #31
 8001aa6:	0858      	lsrs	r0, r3, #1
 8001aa8:	086b      	lsrs	r3, r5, #1
 8001aaa:	431e      	orrs	r6, r3
 8001aac:	07ed      	lsls	r5, r5, #31
 8001aae:	e639      	b.n	8001724 <__aeabi_ddiv+0xf4>
 8001ab0:	4648      	mov	r0, r9
 8001ab2:	f001 f937 	bl	8002d24 <__clzsi2>
 8001ab6:	0001      	movs	r1, r0
 8001ab8:	0002      	movs	r2, r0
 8001aba:	3115      	adds	r1, #21
 8001abc:	3220      	adds	r2, #32
 8001abe:	291c      	cmp	r1, #28
 8001ac0:	dc00      	bgt.n	8001ac4 <__aeabi_ddiv+0x494>
 8001ac2:	e72c      	b.n	800191e <__aeabi_ddiv+0x2ee>
 8001ac4:	464b      	mov	r3, r9
 8001ac6:	3808      	subs	r0, #8
 8001ac8:	4083      	lsls	r3, r0
 8001aca:	2500      	movs	r5, #0
 8001acc:	4698      	mov	r8, r3
 8001ace:	e732      	b.n	8001936 <__aeabi_ddiv+0x306>
 8001ad0:	f001 f928 	bl	8002d24 <__clzsi2>
 8001ad4:	0003      	movs	r3, r0
 8001ad6:	001a      	movs	r2, r3
 8001ad8:	3215      	adds	r2, #21
 8001ada:	3020      	adds	r0, #32
 8001adc:	2a1c      	cmp	r2, #28
 8001ade:	dc00      	bgt.n	8001ae2 <__aeabi_ddiv+0x4b2>
 8001ae0:	e700      	b.n	80018e4 <__aeabi_ddiv+0x2b4>
 8001ae2:	4654      	mov	r4, sl
 8001ae4:	3b08      	subs	r3, #8
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	409c      	lsls	r4, r3
 8001aea:	e705      	b.n	80018f8 <__aeabi_ddiv+0x2c8>
 8001aec:	1936      	adds	r6, r6, r4
 8001aee:	3b01      	subs	r3, #1
 8001af0:	42b4      	cmp	r4, r6
 8001af2:	d900      	bls.n	8001af6 <__aeabi_ddiv+0x4c6>
 8001af4:	e6a6      	b.n	8001844 <__aeabi_ddiv+0x214>
 8001af6:	42b2      	cmp	r2, r6
 8001af8:	d800      	bhi.n	8001afc <__aeabi_ddiv+0x4cc>
 8001afa:	e6a3      	b.n	8001844 <__aeabi_ddiv+0x214>
 8001afc:	1e83      	subs	r3, r0, #2
 8001afe:	1936      	adds	r6, r6, r4
 8001b00:	e6a0      	b.n	8001844 <__aeabi_ddiv+0x214>
 8001b02:	1909      	adds	r1, r1, r4
 8001b04:	3d01      	subs	r5, #1
 8001b06:	428c      	cmp	r4, r1
 8001b08:	d900      	bls.n	8001b0c <__aeabi_ddiv+0x4dc>
 8001b0a:	e68d      	b.n	8001828 <__aeabi_ddiv+0x1f8>
 8001b0c:	428a      	cmp	r2, r1
 8001b0e:	d800      	bhi.n	8001b12 <__aeabi_ddiv+0x4e2>
 8001b10:	e68a      	b.n	8001828 <__aeabi_ddiv+0x1f8>
 8001b12:	1e85      	subs	r5, r0, #2
 8001b14:	1909      	adds	r1, r1, r4
 8001b16:	e687      	b.n	8001828 <__aeabi_ddiv+0x1f8>
 8001b18:	230f      	movs	r3, #15
 8001b1a:	402b      	ands	r3, r5
 8001b1c:	2b04      	cmp	r3, #4
 8001b1e:	d100      	bne.n	8001b22 <__aeabi_ddiv+0x4f2>
 8001b20:	e6bc      	b.n	800189c <__aeabi_ddiv+0x26c>
 8001b22:	2305      	movs	r3, #5
 8001b24:	425b      	negs	r3, r3
 8001b26:	42ab      	cmp	r3, r5
 8001b28:	419b      	sbcs	r3, r3
 8001b2a:	3504      	adds	r5, #4
 8001b2c:	425b      	negs	r3, r3
 8001b2e:	08ed      	lsrs	r5, r5, #3
 8001b30:	4498      	add	r8, r3
 8001b32:	e6b4      	b.n	800189e <__aeabi_ddiv+0x26e>
 8001b34:	42af      	cmp	r7, r5
 8001b36:	d900      	bls.n	8001b3a <__aeabi_ddiv+0x50a>
 8001b38:	e660      	b.n	80017fc <__aeabi_ddiv+0x1cc>
 8001b3a:	4282      	cmp	r2, r0
 8001b3c:	d804      	bhi.n	8001b48 <__aeabi_ddiv+0x518>
 8001b3e:	d000      	beq.n	8001b42 <__aeabi_ddiv+0x512>
 8001b40:	e65c      	b.n	80017fc <__aeabi_ddiv+0x1cc>
 8001b42:	42ae      	cmp	r6, r5
 8001b44:	d800      	bhi.n	8001b48 <__aeabi_ddiv+0x518>
 8001b46:	e659      	b.n	80017fc <__aeabi_ddiv+0x1cc>
 8001b48:	2302      	movs	r3, #2
 8001b4a:	425b      	negs	r3, r3
 8001b4c:	469c      	mov	ip, r3
 8001b4e:	9b00      	ldr	r3, [sp, #0]
 8001b50:	44e0      	add	r8, ip
 8001b52:	469c      	mov	ip, r3
 8001b54:	4465      	add	r5, ip
 8001b56:	429d      	cmp	r5, r3
 8001b58:	419b      	sbcs	r3, r3
 8001b5a:	425b      	negs	r3, r3
 8001b5c:	191b      	adds	r3, r3, r4
 8001b5e:	18c0      	adds	r0, r0, r3
 8001b60:	e64d      	b.n	80017fe <__aeabi_ddiv+0x1ce>
 8001b62:	428a      	cmp	r2, r1
 8001b64:	d800      	bhi.n	8001b68 <__aeabi_ddiv+0x538>
 8001b66:	e60e      	b.n	8001786 <__aeabi_ddiv+0x156>
 8001b68:	1e83      	subs	r3, r0, #2
 8001b6a:	1909      	adds	r1, r1, r4
 8001b6c:	e60b      	b.n	8001786 <__aeabi_ddiv+0x156>
 8001b6e:	428a      	cmp	r2, r1
 8001b70:	d800      	bhi.n	8001b74 <__aeabi_ddiv+0x544>
 8001b72:	e5f4      	b.n	800175e <__aeabi_ddiv+0x12e>
 8001b74:	1e83      	subs	r3, r0, #2
 8001b76:	4698      	mov	r8, r3
 8001b78:	1909      	adds	r1, r1, r4
 8001b7a:	e5f0      	b.n	800175e <__aeabi_ddiv+0x12e>
 8001b7c:	4925      	ldr	r1, [pc, #148]	; (8001c14 <__aeabi_ddiv+0x5e4>)
 8001b7e:	0028      	movs	r0, r5
 8001b80:	4459      	add	r1, fp
 8001b82:	408d      	lsls	r5, r1
 8001b84:	4642      	mov	r2, r8
 8001b86:	408a      	lsls	r2, r1
 8001b88:	1e69      	subs	r1, r5, #1
 8001b8a:	418d      	sbcs	r5, r1
 8001b8c:	4641      	mov	r1, r8
 8001b8e:	40d8      	lsrs	r0, r3
 8001b90:	40d9      	lsrs	r1, r3
 8001b92:	4302      	orrs	r2, r0
 8001b94:	432a      	orrs	r2, r5
 8001b96:	000b      	movs	r3, r1
 8001b98:	0751      	lsls	r1, r2, #29
 8001b9a:	d100      	bne.n	8001b9e <__aeabi_ddiv+0x56e>
 8001b9c:	e751      	b.n	8001a42 <__aeabi_ddiv+0x412>
 8001b9e:	210f      	movs	r1, #15
 8001ba0:	4011      	ands	r1, r2
 8001ba2:	2904      	cmp	r1, #4
 8001ba4:	d000      	beq.n	8001ba8 <__aeabi_ddiv+0x578>
 8001ba6:	e746      	b.n	8001a36 <__aeabi_ddiv+0x406>
 8001ba8:	e74b      	b.n	8001a42 <__aeabi_ddiv+0x412>
 8001baa:	0005      	movs	r5, r0
 8001bac:	428e      	cmp	r6, r1
 8001bae:	d000      	beq.n	8001bb2 <__aeabi_ddiv+0x582>
 8001bb0:	e66a      	b.n	8001888 <__aeabi_ddiv+0x258>
 8001bb2:	9a00      	ldr	r2, [sp, #0]
 8001bb4:	4293      	cmp	r3, r2
 8001bb6:	d000      	beq.n	8001bba <__aeabi_ddiv+0x58a>
 8001bb8:	e666      	b.n	8001888 <__aeabi_ddiv+0x258>
 8001bba:	e667      	b.n	800188c <__aeabi_ddiv+0x25c>
 8001bbc:	4a16      	ldr	r2, [pc, #88]	; (8001c18 <__aeabi_ddiv+0x5e8>)
 8001bbe:	445a      	add	r2, fp
 8001bc0:	2a00      	cmp	r2, #0
 8001bc2:	dc00      	bgt.n	8001bc6 <__aeabi_ddiv+0x596>
 8001bc4:	e710      	b.n	80019e8 <__aeabi_ddiv+0x3b8>
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	2500      	movs	r5, #0
 8001bca:	4498      	add	r8, r3
 8001bcc:	e667      	b.n	800189e <__aeabi_ddiv+0x26e>
 8001bce:	075d      	lsls	r5, r3, #29
 8001bd0:	025b      	lsls	r3, r3, #9
 8001bd2:	0b1c      	lsrs	r4, r3, #12
 8001bd4:	08d2      	lsrs	r2, r2, #3
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	4315      	orrs	r5, r2
 8001bda:	e580      	b.n	80016de <__aeabi_ddiv+0xae>
 8001bdc:	9800      	ldr	r0, [sp, #0]
 8001bde:	3d02      	subs	r5, #2
 8001be0:	0042      	lsls	r2, r0, #1
 8001be2:	4282      	cmp	r2, r0
 8001be4:	41bf      	sbcs	r7, r7
 8001be6:	427f      	negs	r7, r7
 8001be8:	193c      	adds	r4, r7, r4
 8001bea:	1936      	adds	r6, r6, r4
 8001bec:	9200      	str	r2, [sp, #0]
 8001bee:	e7dd      	b.n	8001bac <__aeabi_ddiv+0x57c>
 8001bf0:	2480      	movs	r4, #128	; 0x80
 8001bf2:	4643      	mov	r3, r8
 8001bf4:	0324      	lsls	r4, r4, #12
 8001bf6:	431c      	orrs	r4, r3
 8001bf8:	0324      	lsls	r4, r4, #12
 8001bfa:	4b04      	ldr	r3, [pc, #16]	; (8001c0c <__aeabi_ddiv+0x5dc>)
 8001bfc:	0b24      	lsrs	r4, r4, #12
 8001bfe:	e56e      	b.n	80016de <__aeabi_ddiv+0xae>
 8001c00:	9a00      	ldr	r2, [sp, #0]
 8001c02:	429a      	cmp	r2, r3
 8001c04:	d3ea      	bcc.n	8001bdc <__aeabi_ddiv+0x5ac>
 8001c06:	0005      	movs	r5, r0
 8001c08:	e7d3      	b.n	8001bb2 <__aeabi_ddiv+0x582>
 8001c0a:	46c0      	nop			; (mov r8, r8)
 8001c0c:	000007ff 	.word	0x000007ff
 8001c10:	0000043e 	.word	0x0000043e
 8001c14:	0000041e 	.word	0x0000041e
 8001c18:	000003ff 	.word	0x000003ff

08001c1c <__eqdf2>:
 8001c1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c1e:	464e      	mov	r6, r9
 8001c20:	4645      	mov	r5, r8
 8001c22:	46de      	mov	lr, fp
 8001c24:	4657      	mov	r7, sl
 8001c26:	4690      	mov	r8, r2
 8001c28:	b5e0      	push	{r5, r6, r7, lr}
 8001c2a:	0017      	movs	r7, r2
 8001c2c:	031a      	lsls	r2, r3, #12
 8001c2e:	0b12      	lsrs	r2, r2, #12
 8001c30:	0005      	movs	r5, r0
 8001c32:	4684      	mov	ip, r0
 8001c34:	4819      	ldr	r0, [pc, #100]	; (8001c9c <__eqdf2+0x80>)
 8001c36:	030e      	lsls	r6, r1, #12
 8001c38:	004c      	lsls	r4, r1, #1
 8001c3a:	4691      	mov	r9, r2
 8001c3c:	005a      	lsls	r2, r3, #1
 8001c3e:	0fdb      	lsrs	r3, r3, #31
 8001c40:	469b      	mov	fp, r3
 8001c42:	0b36      	lsrs	r6, r6, #12
 8001c44:	0d64      	lsrs	r4, r4, #21
 8001c46:	0fc9      	lsrs	r1, r1, #31
 8001c48:	0d52      	lsrs	r2, r2, #21
 8001c4a:	4284      	cmp	r4, r0
 8001c4c:	d019      	beq.n	8001c82 <__eqdf2+0x66>
 8001c4e:	4282      	cmp	r2, r0
 8001c50:	d010      	beq.n	8001c74 <__eqdf2+0x58>
 8001c52:	2001      	movs	r0, #1
 8001c54:	4294      	cmp	r4, r2
 8001c56:	d10e      	bne.n	8001c76 <__eqdf2+0x5a>
 8001c58:	454e      	cmp	r6, r9
 8001c5a:	d10c      	bne.n	8001c76 <__eqdf2+0x5a>
 8001c5c:	2001      	movs	r0, #1
 8001c5e:	45c4      	cmp	ip, r8
 8001c60:	d109      	bne.n	8001c76 <__eqdf2+0x5a>
 8001c62:	4559      	cmp	r1, fp
 8001c64:	d017      	beq.n	8001c96 <__eqdf2+0x7a>
 8001c66:	2c00      	cmp	r4, #0
 8001c68:	d105      	bne.n	8001c76 <__eqdf2+0x5a>
 8001c6a:	0030      	movs	r0, r6
 8001c6c:	4328      	orrs	r0, r5
 8001c6e:	1e43      	subs	r3, r0, #1
 8001c70:	4198      	sbcs	r0, r3
 8001c72:	e000      	b.n	8001c76 <__eqdf2+0x5a>
 8001c74:	2001      	movs	r0, #1
 8001c76:	bcf0      	pop	{r4, r5, r6, r7}
 8001c78:	46bb      	mov	fp, r7
 8001c7a:	46b2      	mov	sl, r6
 8001c7c:	46a9      	mov	r9, r5
 8001c7e:	46a0      	mov	r8, r4
 8001c80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c82:	0033      	movs	r3, r6
 8001c84:	2001      	movs	r0, #1
 8001c86:	432b      	orrs	r3, r5
 8001c88:	d1f5      	bne.n	8001c76 <__eqdf2+0x5a>
 8001c8a:	42a2      	cmp	r2, r4
 8001c8c:	d1f3      	bne.n	8001c76 <__eqdf2+0x5a>
 8001c8e:	464b      	mov	r3, r9
 8001c90:	433b      	orrs	r3, r7
 8001c92:	d1f0      	bne.n	8001c76 <__eqdf2+0x5a>
 8001c94:	e7e2      	b.n	8001c5c <__eqdf2+0x40>
 8001c96:	2000      	movs	r0, #0
 8001c98:	e7ed      	b.n	8001c76 <__eqdf2+0x5a>
 8001c9a:	46c0      	nop			; (mov r8, r8)
 8001c9c:	000007ff 	.word	0x000007ff

08001ca0 <__gedf2>:
 8001ca0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ca2:	4647      	mov	r7, r8
 8001ca4:	46ce      	mov	lr, r9
 8001ca6:	0004      	movs	r4, r0
 8001ca8:	0018      	movs	r0, r3
 8001caa:	0016      	movs	r6, r2
 8001cac:	031b      	lsls	r3, r3, #12
 8001cae:	0b1b      	lsrs	r3, r3, #12
 8001cb0:	4d2d      	ldr	r5, [pc, #180]	; (8001d68 <__gedf2+0xc8>)
 8001cb2:	004a      	lsls	r2, r1, #1
 8001cb4:	4699      	mov	r9, r3
 8001cb6:	b580      	push	{r7, lr}
 8001cb8:	0043      	lsls	r3, r0, #1
 8001cba:	030f      	lsls	r7, r1, #12
 8001cbc:	46a4      	mov	ip, r4
 8001cbe:	46b0      	mov	r8, r6
 8001cc0:	0b3f      	lsrs	r7, r7, #12
 8001cc2:	0d52      	lsrs	r2, r2, #21
 8001cc4:	0fc9      	lsrs	r1, r1, #31
 8001cc6:	0d5b      	lsrs	r3, r3, #21
 8001cc8:	0fc0      	lsrs	r0, r0, #31
 8001cca:	42aa      	cmp	r2, r5
 8001ccc:	d021      	beq.n	8001d12 <__gedf2+0x72>
 8001cce:	42ab      	cmp	r3, r5
 8001cd0:	d013      	beq.n	8001cfa <__gedf2+0x5a>
 8001cd2:	2a00      	cmp	r2, #0
 8001cd4:	d122      	bne.n	8001d1c <__gedf2+0x7c>
 8001cd6:	433c      	orrs	r4, r7
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d102      	bne.n	8001ce2 <__gedf2+0x42>
 8001cdc:	464d      	mov	r5, r9
 8001cde:	432e      	orrs	r6, r5
 8001ce0:	d022      	beq.n	8001d28 <__gedf2+0x88>
 8001ce2:	2c00      	cmp	r4, #0
 8001ce4:	d010      	beq.n	8001d08 <__gedf2+0x68>
 8001ce6:	4281      	cmp	r1, r0
 8001ce8:	d022      	beq.n	8001d30 <__gedf2+0x90>
 8001cea:	2002      	movs	r0, #2
 8001cec:	3901      	subs	r1, #1
 8001cee:	4008      	ands	r0, r1
 8001cf0:	3801      	subs	r0, #1
 8001cf2:	bcc0      	pop	{r6, r7}
 8001cf4:	46b9      	mov	r9, r7
 8001cf6:	46b0      	mov	r8, r6
 8001cf8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001cfa:	464d      	mov	r5, r9
 8001cfc:	432e      	orrs	r6, r5
 8001cfe:	d129      	bne.n	8001d54 <__gedf2+0xb4>
 8001d00:	2a00      	cmp	r2, #0
 8001d02:	d1f0      	bne.n	8001ce6 <__gedf2+0x46>
 8001d04:	433c      	orrs	r4, r7
 8001d06:	d1ee      	bne.n	8001ce6 <__gedf2+0x46>
 8001d08:	2800      	cmp	r0, #0
 8001d0a:	d1f2      	bne.n	8001cf2 <__gedf2+0x52>
 8001d0c:	2001      	movs	r0, #1
 8001d0e:	4240      	negs	r0, r0
 8001d10:	e7ef      	b.n	8001cf2 <__gedf2+0x52>
 8001d12:	003d      	movs	r5, r7
 8001d14:	4325      	orrs	r5, r4
 8001d16:	d11d      	bne.n	8001d54 <__gedf2+0xb4>
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	d0ee      	beq.n	8001cfa <__gedf2+0x5a>
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d1e2      	bne.n	8001ce6 <__gedf2+0x46>
 8001d20:	464c      	mov	r4, r9
 8001d22:	4326      	orrs	r6, r4
 8001d24:	d1df      	bne.n	8001ce6 <__gedf2+0x46>
 8001d26:	e7e0      	b.n	8001cea <__gedf2+0x4a>
 8001d28:	2000      	movs	r0, #0
 8001d2a:	2c00      	cmp	r4, #0
 8001d2c:	d0e1      	beq.n	8001cf2 <__gedf2+0x52>
 8001d2e:	e7dc      	b.n	8001cea <__gedf2+0x4a>
 8001d30:	429a      	cmp	r2, r3
 8001d32:	dc0a      	bgt.n	8001d4a <__gedf2+0xaa>
 8001d34:	dbe8      	blt.n	8001d08 <__gedf2+0x68>
 8001d36:	454f      	cmp	r7, r9
 8001d38:	d8d7      	bhi.n	8001cea <__gedf2+0x4a>
 8001d3a:	d00e      	beq.n	8001d5a <__gedf2+0xba>
 8001d3c:	2000      	movs	r0, #0
 8001d3e:	454f      	cmp	r7, r9
 8001d40:	d2d7      	bcs.n	8001cf2 <__gedf2+0x52>
 8001d42:	2900      	cmp	r1, #0
 8001d44:	d0e2      	beq.n	8001d0c <__gedf2+0x6c>
 8001d46:	0008      	movs	r0, r1
 8001d48:	e7d3      	b.n	8001cf2 <__gedf2+0x52>
 8001d4a:	4243      	negs	r3, r0
 8001d4c:	4158      	adcs	r0, r3
 8001d4e:	0040      	lsls	r0, r0, #1
 8001d50:	3801      	subs	r0, #1
 8001d52:	e7ce      	b.n	8001cf2 <__gedf2+0x52>
 8001d54:	2002      	movs	r0, #2
 8001d56:	4240      	negs	r0, r0
 8001d58:	e7cb      	b.n	8001cf2 <__gedf2+0x52>
 8001d5a:	45c4      	cmp	ip, r8
 8001d5c:	d8c5      	bhi.n	8001cea <__gedf2+0x4a>
 8001d5e:	2000      	movs	r0, #0
 8001d60:	45c4      	cmp	ip, r8
 8001d62:	d2c6      	bcs.n	8001cf2 <__gedf2+0x52>
 8001d64:	e7ed      	b.n	8001d42 <__gedf2+0xa2>
 8001d66:	46c0      	nop			; (mov r8, r8)
 8001d68:	000007ff 	.word	0x000007ff

08001d6c <__ledf2>:
 8001d6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d6e:	4647      	mov	r7, r8
 8001d70:	46ce      	mov	lr, r9
 8001d72:	0004      	movs	r4, r0
 8001d74:	0018      	movs	r0, r3
 8001d76:	0016      	movs	r6, r2
 8001d78:	031b      	lsls	r3, r3, #12
 8001d7a:	0b1b      	lsrs	r3, r3, #12
 8001d7c:	4d2c      	ldr	r5, [pc, #176]	; (8001e30 <__ledf2+0xc4>)
 8001d7e:	004a      	lsls	r2, r1, #1
 8001d80:	4699      	mov	r9, r3
 8001d82:	b580      	push	{r7, lr}
 8001d84:	0043      	lsls	r3, r0, #1
 8001d86:	030f      	lsls	r7, r1, #12
 8001d88:	46a4      	mov	ip, r4
 8001d8a:	46b0      	mov	r8, r6
 8001d8c:	0b3f      	lsrs	r7, r7, #12
 8001d8e:	0d52      	lsrs	r2, r2, #21
 8001d90:	0fc9      	lsrs	r1, r1, #31
 8001d92:	0d5b      	lsrs	r3, r3, #21
 8001d94:	0fc0      	lsrs	r0, r0, #31
 8001d96:	42aa      	cmp	r2, r5
 8001d98:	d00d      	beq.n	8001db6 <__ledf2+0x4a>
 8001d9a:	42ab      	cmp	r3, r5
 8001d9c:	d010      	beq.n	8001dc0 <__ledf2+0x54>
 8001d9e:	2a00      	cmp	r2, #0
 8001da0:	d127      	bne.n	8001df2 <__ledf2+0x86>
 8001da2:	433c      	orrs	r4, r7
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d111      	bne.n	8001dcc <__ledf2+0x60>
 8001da8:	464d      	mov	r5, r9
 8001daa:	432e      	orrs	r6, r5
 8001dac:	d10e      	bne.n	8001dcc <__ledf2+0x60>
 8001dae:	2000      	movs	r0, #0
 8001db0:	2c00      	cmp	r4, #0
 8001db2:	d015      	beq.n	8001de0 <__ledf2+0x74>
 8001db4:	e00e      	b.n	8001dd4 <__ledf2+0x68>
 8001db6:	003d      	movs	r5, r7
 8001db8:	4325      	orrs	r5, r4
 8001dba:	d110      	bne.n	8001dde <__ledf2+0x72>
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	d118      	bne.n	8001df2 <__ledf2+0x86>
 8001dc0:	464d      	mov	r5, r9
 8001dc2:	432e      	orrs	r6, r5
 8001dc4:	d10b      	bne.n	8001dde <__ledf2+0x72>
 8001dc6:	2a00      	cmp	r2, #0
 8001dc8:	d102      	bne.n	8001dd0 <__ledf2+0x64>
 8001dca:	433c      	orrs	r4, r7
 8001dcc:	2c00      	cmp	r4, #0
 8001dce:	d00b      	beq.n	8001de8 <__ledf2+0x7c>
 8001dd0:	4281      	cmp	r1, r0
 8001dd2:	d014      	beq.n	8001dfe <__ledf2+0x92>
 8001dd4:	2002      	movs	r0, #2
 8001dd6:	3901      	subs	r1, #1
 8001dd8:	4008      	ands	r0, r1
 8001dda:	3801      	subs	r0, #1
 8001ddc:	e000      	b.n	8001de0 <__ledf2+0x74>
 8001dde:	2002      	movs	r0, #2
 8001de0:	bcc0      	pop	{r6, r7}
 8001de2:	46b9      	mov	r9, r7
 8001de4:	46b0      	mov	r8, r6
 8001de6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001de8:	2800      	cmp	r0, #0
 8001dea:	d1f9      	bne.n	8001de0 <__ledf2+0x74>
 8001dec:	2001      	movs	r0, #1
 8001dee:	4240      	negs	r0, r0
 8001df0:	e7f6      	b.n	8001de0 <__ledf2+0x74>
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d1ec      	bne.n	8001dd0 <__ledf2+0x64>
 8001df6:	464c      	mov	r4, r9
 8001df8:	4326      	orrs	r6, r4
 8001dfa:	d1e9      	bne.n	8001dd0 <__ledf2+0x64>
 8001dfc:	e7ea      	b.n	8001dd4 <__ledf2+0x68>
 8001dfe:	429a      	cmp	r2, r3
 8001e00:	dd04      	ble.n	8001e0c <__ledf2+0xa0>
 8001e02:	4243      	negs	r3, r0
 8001e04:	4158      	adcs	r0, r3
 8001e06:	0040      	lsls	r0, r0, #1
 8001e08:	3801      	subs	r0, #1
 8001e0a:	e7e9      	b.n	8001de0 <__ledf2+0x74>
 8001e0c:	429a      	cmp	r2, r3
 8001e0e:	dbeb      	blt.n	8001de8 <__ledf2+0x7c>
 8001e10:	454f      	cmp	r7, r9
 8001e12:	d8df      	bhi.n	8001dd4 <__ledf2+0x68>
 8001e14:	d006      	beq.n	8001e24 <__ledf2+0xb8>
 8001e16:	2000      	movs	r0, #0
 8001e18:	454f      	cmp	r7, r9
 8001e1a:	d2e1      	bcs.n	8001de0 <__ledf2+0x74>
 8001e1c:	2900      	cmp	r1, #0
 8001e1e:	d0e5      	beq.n	8001dec <__ledf2+0x80>
 8001e20:	0008      	movs	r0, r1
 8001e22:	e7dd      	b.n	8001de0 <__ledf2+0x74>
 8001e24:	45c4      	cmp	ip, r8
 8001e26:	d8d5      	bhi.n	8001dd4 <__ledf2+0x68>
 8001e28:	2000      	movs	r0, #0
 8001e2a:	45c4      	cmp	ip, r8
 8001e2c:	d2d8      	bcs.n	8001de0 <__ledf2+0x74>
 8001e2e:	e7f5      	b.n	8001e1c <__ledf2+0xb0>
 8001e30:	000007ff 	.word	0x000007ff

08001e34 <__aeabi_dmul>:
 8001e34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e36:	4657      	mov	r7, sl
 8001e38:	464e      	mov	r6, r9
 8001e3a:	4645      	mov	r5, r8
 8001e3c:	46de      	mov	lr, fp
 8001e3e:	b5e0      	push	{r5, r6, r7, lr}
 8001e40:	4698      	mov	r8, r3
 8001e42:	030c      	lsls	r4, r1, #12
 8001e44:	004b      	lsls	r3, r1, #1
 8001e46:	0006      	movs	r6, r0
 8001e48:	4692      	mov	sl, r2
 8001e4a:	b087      	sub	sp, #28
 8001e4c:	0b24      	lsrs	r4, r4, #12
 8001e4e:	0d5b      	lsrs	r3, r3, #21
 8001e50:	0fcf      	lsrs	r7, r1, #31
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d100      	bne.n	8001e58 <__aeabi_dmul+0x24>
 8001e56:	e15c      	b.n	8002112 <__aeabi_dmul+0x2de>
 8001e58:	4ad9      	ldr	r2, [pc, #868]	; (80021c0 <__aeabi_dmul+0x38c>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d100      	bne.n	8001e60 <__aeabi_dmul+0x2c>
 8001e5e:	e175      	b.n	800214c <__aeabi_dmul+0x318>
 8001e60:	0f42      	lsrs	r2, r0, #29
 8001e62:	00e4      	lsls	r4, r4, #3
 8001e64:	4314      	orrs	r4, r2
 8001e66:	2280      	movs	r2, #128	; 0x80
 8001e68:	0412      	lsls	r2, r2, #16
 8001e6a:	4314      	orrs	r4, r2
 8001e6c:	4ad5      	ldr	r2, [pc, #852]	; (80021c4 <__aeabi_dmul+0x390>)
 8001e6e:	00c5      	lsls	r5, r0, #3
 8001e70:	4694      	mov	ip, r2
 8001e72:	4463      	add	r3, ip
 8001e74:	9300      	str	r3, [sp, #0]
 8001e76:	2300      	movs	r3, #0
 8001e78:	4699      	mov	r9, r3
 8001e7a:	469b      	mov	fp, r3
 8001e7c:	4643      	mov	r3, r8
 8001e7e:	4642      	mov	r2, r8
 8001e80:	031e      	lsls	r6, r3, #12
 8001e82:	0fd2      	lsrs	r2, r2, #31
 8001e84:	005b      	lsls	r3, r3, #1
 8001e86:	4650      	mov	r0, sl
 8001e88:	4690      	mov	r8, r2
 8001e8a:	0b36      	lsrs	r6, r6, #12
 8001e8c:	0d5b      	lsrs	r3, r3, #21
 8001e8e:	d100      	bne.n	8001e92 <__aeabi_dmul+0x5e>
 8001e90:	e120      	b.n	80020d4 <__aeabi_dmul+0x2a0>
 8001e92:	4acb      	ldr	r2, [pc, #812]	; (80021c0 <__aeabi_dmul+0x38c>)
 8001e94:	4293      	cmp	r3, r2
 8001e96:	d100      	bne.n	8001e9a <__aeabi_dmul+0x66>
 8001e98:	e162      	b.n	8002160 <__aeabi_dmul+0x32c>
 8001e9a:	49ca      	ldr	r1, [pc, #808]	; (80021c4 <__aeabi_dmul+0x390>)
 8001e9c:	0f42      	lsrs	r2, r0, #29
 8001e9e:	468c      	mov	ip, r1
 8001ea0:	9900      	ldr	r1, [sp, #0]
 8001ea2:	4463      	add	r3, ip
 8001ea4:	00f6      	lsls	r6, r6, #3
 8001ea6:	468c      	mov	ip, r1
 8001ea8:	4316      	orrs	r6, r2
 8001eaa:	2280      	movs	r2, #128	; 0x80
 8001eac:	449c      	add	ip, r3
 8001eae:	0412      	lsls	r2, r2, #16
 8001eb0:	4663      	mov	r3, ip
 8001eb2:	4316      	orrs	r6, r2
 8001eb4:	00c2      	lsls	r2, r0, #3
 8001eb6:	2000      	movs	r0, #0
 8001eb8:	9300      	str	r3, [sp, #0]
 8001eba:	9900      	ldr	r1, [sp, #0]
 8001ebc:	4643      	mov	r3, r8
 8001ebe:	3101      	adds	r1, #1
 8001ec0:	468c      	mov	ip, r1
 8001ec2:	4649      	mov	r1, r9
 8001ec4:	407b      	eors	r3, r7
 8001ec6:	9301      	str	r3, [sp, #4]
 8001ec8:	290f      	cmp	r1, #15
 8001eca:	d826      	bhi.n	8001f1a <__aeabi_dmul+0xe6>
 8001ecc:	4bbe      	ldr	r3, [pc, #760]	; (80021c8 <__aeabi_dmul+0x394>)
 8001ece:	0089      	lsls	r1, r1, #2
 8001ed0:	5859      	ldr	r1, [r3, r1]
 8001ed2:	468f      	mov	pc, r1
 8001ed4:	4643      	mov	r3, r8
 8001ed6:	9301      	str	r3, [sp, #4]
 8001ed8:	0034      	movs	r4, r6
 8001eda:	0015      	movs	r5, r2
 8001edc:	4683      	mov	fp, r0
 8001ede:	465b      	mov	r3, fp
 8001ee0:	2b02      	cmp	r3, #2
 8001ee2:	d016      	beq.n	8001f12 <__aeabi_dmul+0xde>
 8001ee4:	2b03      	cmp	r3, #3
 8001ee6:	d100      	bne.n	8001eea <__aeabi_dmul+0xb6>
 8001ee8:	e203      	b.n	80022f2 <__aeabi_dmul+0x4be>
 8001eea:	2b01      	cmp	r3, #1
 8001eec:	d000      	beq.n	8001ef0 <__aeabi_dmul+0xbc>
 8001eee:	e0cd      	b.n	800208c <__aeabi_dmul+0x258>
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	2400      	movs	r4, #0
 8001ef4:	2500      	movs	r5, #0
 8001ef6:	9b01      	ldr	r3, [sp, #4]
 8001ef8:	0512      	lsls	r2, r2, #20
 8001efa:	4322      	orrs	r2, r4
 8001efc:	07db      	lsls	r3, r3, #31
 8001efe:	431a      	orrs	r2, r3
 8001f00:	0028      	movs	r0, r5
 8001f02:	0011      	movs	r1, r2
 8001f04:	b007      	add	sp, #28
 8001f06:	bcf0      	pop	{r4, r5, r6, r7}
 8001f08:	46bb      	mov	fp, r7
 8001f0a:	46b2      	mov	sl, r6
 8001f0c:	46a9      	mov	r9, r5
 8001f0e:	46a0      	mov	r8, r4
 8001f10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f12:	2400      	movs	r4, #0
 8001f14:	2500      	movs	r5, #0
 8001f16:	4aaa      	ldr	r2, [pc, #680]	; (80021c0 <__aeabi_dmul+0x38c>)
 8001f18:	e7ed      	b.n	8001ef6 <__aeabi_dmul+0xc2>
 8001f1a:	0c28      	lsrs	r0, r5, #16
 8001f1c:	042d      	lsls	r5, r5, #16
 8001f1e:	0c2d      	lsrs	r5, r5, #16
 8001f20:	002b      	movs	r3, r5
 8001f22:	0c11      	lsrs	r1, r2, #16
 8001f24:	0412      	lsls	r2, r2, #16
 8001f26:	0c12      	lsrs	r2, r2, #16
 8001f28:	4353      	muls	r3, r2
 8001f2a:	4698      	mov	r8, r3
 8001f2c:	0013      	movs	r3, r2
 8001f2e:	002f      	movs	r7, r5
 8001f30:	4343      	muls	r3, r0
 8001f32:	4699      	mov	r9, r3
 8001f34:	434f      	muls	r7, r1
 8001f36:	444f      	add	r7, r9
 8001f38:	46bb      	mov	fp, r7
 8001f3a:	4647      	mov	r7, r8
 8001f3c:	000b      	movs	r3, r1
 8001f3e:	0c3f      	lsrs	r7, r7, #16
 8001f40:	46ba      	mov	sl, r7
 8001f42:	4343      	muls	r3, r0
 8001f44:	44da      	add	sl, fp
 8001f46:	9302      	str	r3, [sp, #8]
 8001f48:	45d1      	cmp	r9, sl
 8001f4a:	d904      	bls.n	8001f56 <__aeabi_dmul+0x122>
 8001f4c:	2780      	movs	r7, #128	; 0x80
 8001f4e:	027f      	lsls	r7, r7, #9
 8001f50:	46b9      	mov	r9, r7
 8001f52:	444b      	add	r3, r9
 8001f54:	9302      	str	r3, [sp, #8]
 8001f56:	4653      	mov	r3, sl
 8001f58:	0c1b      	lsrs	r3, r3, #16
 8001f5a:	469b      	mov	fp, r3
 8001f5c:	4653      	mov	r3, sl
 8001f5e:	041f      	lsls	r7, r3, #16
 8001f60:	4643      	mov	r3, r8
 8001f62:	041b      	lsls	r3, r3, #16
 8001f64:	0c1b      	lsrs	r3, r3, #16
 8001f66:	4698      	mov	r8, r3
 8001f68:	003b      	movs	r3, r7
 8001f6a:	4443      	add	r3, r8
 8001f6c:	9304      	str	r3, [sp, #16]
 8001f6e:	0c33      	lsrs	r3, r6, #16
 8001f70:	0436      	lsls	r6, r6, #16
 8001f72:	0c36      	lsrs	r6, r6, #16
 8001f74:	4698      	mov	r8, r3
 8001f76:	0033      	movs	r3, r6
 8001f78:	4343      	muls	r3, r0
 8001f7a:	4699      	mov	r9, r3
 8001f7c:	4643      	mov	r3, r8
 8001f7e:	4343      	muls	r3, r0
 8001f80:	002f      	movs	r7, r5
 8001f82:	469a      	mov	sl, r3
 8001f84:	4643      	mov	r3, r8
 8001f86:	4377      	muls	r7, r6
 8001f88:	435d      	muls	r5, r3
 8001f8a:	0c38      	lsrs	r0, r7, #16
 8001f8c:	444d      	add	r5, r9
 8001f8e:	1945      	adds	r5, r0, r5
 8001f90:	45a9      	cmp	r9, r5
 8001f92:	d903      	bls.n	8001f9c <__aeabi_dmul+0x168>
 8001f94:	2380      	movs	r3, #128	; 0x80
 8001f96:	025b      	lsls	r3, r3, #9
 8001f98:	4699      	mov	r9, r3
 8001f9a:	44ca      	add	sl, r9
 8001f9c:	043f      	lsls	r7, r7, #16
 8001f9e:	0c28      	lsrs	r0, r5, #16
 8001fa0:	0c3f      	lsrs	r7, r7, #16
 8001fa2:	042d      	lsls	r5, r5, #16
 8001fa4:	19ed      	adds	r5, r5, r7
 8001fa6:	0c27      	lsrs	r7, r4, #16
 8001fa8:	0424      	lsls	r4, r4, #16
 8001faa:	0c24      	lsrs	r4, r4, #16
 8001fac:	0003      	movs	r3, r0
 8001fae:	0020      	movs	r0, r4
 8001fb0:	4350      	muls	r0, r2
 8001fb2:	437a      	muls	r2, r7
 8001fb4:	4691      	mov	r9, r2
 8001fb6:	003a      	movs	r2, r7
 8001fb8:	4453      	add	r3, sl
 8001fba:	9305      	str	r3, [sp, #20]
 8001fbc:	0c03      	lsrs	r3, r0, #16
 8001fbe:	469a      	mov	sl, r3
 8001fc0:	434a      	muls	r2, r1
 8001fc2:	4361      	muls	r1, r4
 8001fc4:	4449      	add	r1, r9
 8001fc6:	4451      	add	r1, sl
 8001fc8:	44ab      	add	fp, r5
 8001fca:	4589      	cmp	r9, r1
 8001fcc:	d903      	bls.n	8001fd6 <__aeabi_dmul+0x1a2>
 8001fce:	2380      	movs	r3, #128	; 0x80
 8001fd0:	025b      	lsls	r3, r3, #9
 8001fd2:	4699      	mov	r9, r3
 8001fd4:	444a      	add	r2, r9
 8001fd6:	0400      	lsls	r0, r0, #16
 8001fd8:	0c0b      	lsrs	r3, r1, #16
 8001fda:	0c00      	lsrs	r0, r0, #16
 8001fdc:	0409      	lsls	r1, r1, #16
 8001fde:	1809      	adds	r1, r1, r0
 8001fe0:	0020      	movs	r0, r4
 8001fe2:	4699      	mov	r9, r3
 8001fe4:	4643      	mov	r3, r8
 8001fe6:	4370      	muls	r0, r6
 8001fe8:	435c      	muls	r4, r3
 8001fea:	437e      	muls	r6, r7
 8001fec:	435f      	muls	r7, r3
 8001fee:	0c03      	lsrs	r3, r0, #16
 8001ff0:	4698      	mov	r8, r3
 8001ff2:	19a4      	adds	r4, r4, r6
 8001ff4:	4444      	add	r4, r8
 8001ff6:	444a      	add	r2, r9
 8001ff8:	9703      	str	r7, [sp, #12]
 8001ffa:	42a6      	cmp	r6, r4
 8001ffc:	d904      	bls.n	8002008 <__aeabi_dmul+0x1d4>
 8001ffe:	2380      	movs	r3, #128	; 0x80
 8002000:	025b      	lsls	r3, r3, #9
 8002002:	4698      	mov	r8, r3
 8002004:	4447      	add	r7, r8
 8002006:	9703      	str	r7, [sp, #12]
 8002008:	0423      	lsls	r3, r4, #16
 800200a:	9e02      	ldr	r6, [sp, #8]
 800200c:	469a      	mov	sl, r3
 800200e:	9b05      	ldr	r3, [sp, #20]
 8002010:	445e      	add	r6, fp
 8002012:	4698      	mov	r8, r3
 8002014:	42ae      	cmp	r6, r5
 8002016:	41ad      	sbcs	r5, r5
 8002018:	1876      	adds	r6, r6, r1
 800201a:	428e      	cmp	r6, r1
 800201c:	4189      	sbcs	r1, r1
 800201e:	0400      	lsls	r0, r0, #16
 8002020:	0c00      	lsrs	r0, r0, #16
 8002022:	4450      	add	r0, sl
 8002024:	4440      	add	r0, r8
 8002026:	426d      	negs	r5, r5
 8002028:	1947      	adds	r7, r0, r5
 800202a:	46b8      	mov	r8, r7
 800202c:	4693      	mov	fp, r2
 800202e:	4249      	negs	r1, r1
 8002030:	4689      	mov	r9, r1
 8002032:	44c3      	add	fp, r8
 8002034:	44d9      	add	r9, fp
 8002036:	4298      	cmp	r0, r3
 8002038:	4180      	sbcs	r0, r0
 800203a:	45a8      	cmp	r8, r5
 800203c:	41ad      	sbcs	r5, r5
 800203e:	4593      	cmp	fp, r2
 8002040:	4192      	sbcs	r2, r2
 8002042:	4589      	cmp	r9, r1
 8002044:	4189      	sbcs	r1, r1
 8002046:	426d      	negs	r5, r5
 8002048:	4240      	negs	r0, r0
 800204a:	4328      	orrs	r0, r5
 800204c:	0c24      	lsrs	r4, r4, #16
 800204e:	4252      	negs	r2, r2
 8002050:	4249      	negs	r1, r1
 8002052:	430a      	orrs	r2, r1
 8002054:	9b03      	ldr	r3, [sp, #12]
 8002056:	1900      	adds	r0, r0, r4
 8002058:	1880      	adds	r0, r0, r2
 800205a:	18c7      	adds	r7, r0, r3
 800205c:	464b      	mov	r3, r9
 800205e:	0ddc      	lsrs	r4, r3, #23
 8002060:	9b04      	ldr	r3, [sp, #16]
 8002062:	0275      	lsls	r5, r6, #9
 8002064:	431d      	orrs	r5, r3
 8002066:	1e6a      	subs	r2, r5, #1
 8002068:	4195      	sbcs	r5, r2
 800206a:	464b      	mov	r3, r9
 800206c:	0df6      	lsrs	r6, r6, #23
 800206e:	027f      	lsls	r7, r7, #9
 8002070:	4335      	orrs	r5, r6
 8002072:	025a      	lsls	r2, r3, #9
 8002074:	433c      	orrs	r4, r7
 8002076:	4315      	orrs	r5, r2
 8002078:	01fb      	lsls	r3, r7, #7
 800207a:	d400      	bmi.n	800207e <__aeabi_dmul+0x24a>
 800207c:	e11c      	b.n	80022b8 <__aeabi_dmul+0x484>
 800207e:	2101      	movs	r1, #1
 8002080:	086a      	lsrs	r2, r5, #1
 8002082:	400d      	ands	r5, r1
 8002084:	4315      	orrs	r5, r2
 8002086:	07e2      	lsls	r2, r4, #31
 8002088:	4315      	orrs	r5, r2
 800208a:	0864      	lsrs	r4, r4, #1
 800208c:	494f      	ldr	r1, [pc, #316]	; (80021cc <__aeabi_dmul+0x398>)
 800208e:	4461      	add	r1, ip
 8002090:	2900      	cmp	r1, #0
 8002092:	dc00      	bgt.n	8002096 <__aeabi_dmul+0x262>
 8002094:	e0b0      	b.n	80021f8 <__aeabi_dmul+0x3c4>
 8002096:	076b      	lsls	r3, r5, #29
 8002098:	d009      	beq.n	80020ae <__aeabi_dmul+0x27a>
 800209a:	220f      	movs	r2, #15
 800209c:	402a      	ands	r2, r5
 800209e:	2a04      	cmp	r2, #4
 80020a0:	d005      	beq.n	80020ae <__aeabi_dmul+0x27a>
 80020a2:	1d2a      	adds	r2, r5, #4
 80020a4:	42aa      	cmp	r2, r5
 80020a6:	41ad      	sbcs	r5, r5
 80020a8:	426d      	negs	r5, r5
 80020aa:	1964      	adds	r4, r4, r5
 80020ac:	0015      	movs	r5, r2
 80020ae:	01e3      	lsls	r3, r4, #7
 80020b0:	d504      	bpl.n	80020bc <__aeabi_dmul+0x288>
 80020b2:	2180      	movs	r1, #128	; 0x80
 80020b4:	4a46      	ldr	r2, [pc, #280]	; (80021d0 <__aeabi_dmul+0x39c>)
 80020b6:	00c9      	lsls	r1, r1, #3
 80020b8:	4014      	ands	r4, r2
 80020ba:	4461      	add	r1, ip
 80020bc:	4a45      	ldr	r2, [pc, #276]	; (80021d4 <__aeabi_dmul+0x3a0>)
 80020be:	4291      	cmp	r1, r2
 80020c0:	dd00      	ble.n	80020c4 <__aeabi_dmul+0x290>
 80020c2:	e726      	b.n	8001f12 <__aeabi_dmul+0xde>
 80020c4:	0762      	lsls	r2, r4, #29
 80020c6:	08ed      	lsrs	r5, r5, #3
 80020c8:	0264      	lsls	r4, r4, #9
 80020ca:	0549      	lsls	r1, r1, #21
 80020cc:	4315      	orrs	r5, r2
 80020ce:	0b24      	lsrs	r4, r4, #12
 80020d0:	0d4a      	lsrs	r2, r1, #21
 80020d2:	e710      	b.n	8001ef6 <__aeabi_dmul+0xc2>
 80020d4:	4652      	mov	r2, sl
 80020d6:	4332      	orrs	r2, r6
 80020d8:	d100      	bne.n	80020dc <__aeabi_dmul+0x2a8>
 80020da:	e07f      	b.n	80021dc <__aeabi_dmul+0x3a8>
 80020dc:	2e00      	cmp	r6, #0
 80020de:	d100      	bne.n	80020e2 <__aeabi_dmul+0x2ae>
 80020e0:	e0dc      	b.n	800229c <__aeabi_dmul+0x468>
 80020e2:	0030      	movs	r0, r6
 80020e4:	f000 fe1e 	bl	8002d24 <__clzsi2>
 80020e8:	0002      	movs	r2, r0
 80020ea:	3a0b      	subs	r2, #11
 80020ec:	231d      	movs	r3, #29
 80020ee:	0001      	movs	r1, r0
 80020f0:	1a9b      	subs	r3, r3, r2
 80020f2:	4652      	mov	r2, sl
 80020f4:	3908      	subs	r1, #8
 80020f6:	40da      	lsrs	r2, r3
 80020f8:	408e      	lsls	r6, r1
 80020fa:	4316      	orrs	r6, r2
 80020fc:	4652      	mov	r2, sl
 80020fe:	408a      	lsls	r2, r1
 8002100:	9b00      	ldr	r3, [sp, #0]
 8002102:	4935      	ldr	r1, [pc, #212]	; (80021d8 <__aeabi_dmul+0x3a4>)
 8002104:	1a18      	subs	r0, r3, r0
 8002106:	0003      	movs	r3, r0
 8002108:	468c      	mov	ip, r1
 800210a:	4463      	add	r3, ip
 800210c:	2000      	movs	r0, #0
 800210e:	9300      	str	r3, [sp, #0]
 8002110:	e6d3      	b.n	8001eba <__aeabi_dmul+0x86>
 8002112:	0025      	movs	r5, r4
 8002114:	4305      	orrs	r5, r0
 8002116:	d04a      	beq.n	80021ae <__aeabi_dmul+0x37a>
 8002118:	2c00      	cmp	r4, #0
 800211a:	d100      	bne.n	800211e <__aeabi_dmul+0x2ea>
 800211c:	e0b0      	b.n	8002280 <__aeabi_dmul+0x44c>
 800211e:	0020      	movs	r0, r4
 8002120:	f000 fe00 	bl	8002d24 <__clzsi2>
 8002124:	0001      	movs	r1, r0
 8002126:	0002      	movs	r2, r0
 8002128:	390b      	subs	r1, #11
 800212a:	231d      	movs	r3, #29
 800212c:	0010      	movs	r0, r2
 800212e:	1a5b      	subs	r3, r3, r1
 8002130:	0031      	movs	r1, r6
 8002132:	0035      	movs	r5, r6
 8002134:	3808      	subs	r0, #8
 8002136:	4084      	lsls	r4, r0
 8002138:	40d9      	lsrs	r1, r3
 800213a:	4085      	lsls	r5, r0
 800213c:	430c      	orrs	r4, r1
 800213e:	4826      	ldr	r0, [pc, #152]	; (80021d8 <__aeabi_dmul+0x3a4>)
 8002140:	1a83      	subs	r3, r0, r2
 8002142:	9300      	str	r3, [sp, #0]
 8002144:	2300      	movs	r3, #0
 8002146:	4699      	mov	r9, r3
 8002148:	469b      	mov	fp, r3
 800214a:	e697      	b.n	8001e7c <__aeabi_dmul+0x48>
 800214c:	0005      	movs	r5, r0
 800214e:	4325      	orrs	r5, r4
 8002150:	d126      	bne.n	80021a0 <__aeabi_dmul+0x36c>
 8002152:	2208      	movs	r2, #8
 8002154:	9300      	str	r3, [sp, #0]
 8002156:	2302      	movs	r3, #2
 8002158:	2400      	movs	r4, #0
 800215a:	4691      	mov	r9, r2
 800215c:	469b      	mov	fp, r3
 800215e:	e68d      	b.n	8001e7c <__aeabi_dmul+0x48>
 8002160:	4652      	mov	r2, sl
 8002162:	9b00      	ldr	r3, [sp, #0]
 8002164:	4332      	orrs	r2, r6
 8002166:	d110      	bne.n	800218a <__aeabi_dmul+0x356>
 8002168:	4915      	ldr	r1, [pc, #84]	; (80021c0 <__aeabi_dmul+0x38c>)
 800216a:	2600      	movs	r6, #0
 800216c:	468c      	mov	ip, r1
 800216e:	4463      	add	r3, ip
 8002170:	4649      	mov	r1, r9
 8002172:	9300      	str	r3, [sp, #0]
 8002174:	2302      	movs	r3, #2
 8002176:	4319      	orrs	r1, r3
 8002178:	4689      	mov	r9, r1
 800217a:	2002      	movs	r0, #2
 800217c:	e69d      	b.n	8001eba <__aeabi_dmul+0x86>
 800217e:	465b      	mov	r3, fp
 8002180:	9701      	str	r7, [sp, #4]
 8002182:	2b02      	cmp	r3, #2
 8002184:	d000      	beq.n	8002188 <__aeabi_dmul+0x354>
 8002186:	e6ad      	b.n	8001ee4 <__aeabi_dmul+0xb0>
 8002188:	e6c3      	b.n	8001f12 <__aeabi_dmul+0xde>
 800218a:	4a0d      	ldr	r2, [pc, #52]	; (80021c0 <__aeabi_dmul+0x38c>)
 800218c:	2003      	movs	r0, #3
 800218e:	4694      	mov	ip, r2
 8002190:	4463      	add	r3, ip
 8002192:	464a      	mov	r2, r9
 8002194:	9300      	str	r3, [sp, #0]
 8002196:	2303      	movs	r3, #3
 8002198:	431a      	orrs	r2, r3
 800219a:	4691      	mov	r9, r2
 800219c:	4652      	mov	r2, sl
 800219e:	e68c      	b.n	8001eba <__aeabi_dmul+0x86>
 80021a0:	220c      	movs	r2, #12
 80021a2:	9300      	str	r3, [sp, #0]
 80021a4:	2303      	movs	r3, #3
 80021a6:	0005      	movs	r5, r0
 80021a8:	4691      	mov	r9, r2
 80021aa:	469b      	mov	fp, r3
 80021ac:	e666      	b.n	8001e7c <__aeabi_dmul+0x48>
 80021ae:	2304      	movs	r3, #4
 80021b0:	4699      	mov	r9, r3
 80021b2:	2300      	movs	r3, #0
 80021b4:	9300      	str	r3, [sp, #0]
 80021b6:	3301      	adds	r3, #1
 80021b8:	2400      	movs	r4, #0
 80021ba:	469b      	mov	fp, r3
 80021bc:	e65e      	b.n	8001e7c <__aeabi_dmul+0x48>
 80021be:	46c0      	nop			; (mov r8, r8)
 80021c0:	000007ff 	.word	0x000007ff
 80021c4:	fffffc01 	.word	0xfffffc01
 80021c8:	0800ac3c 	.word	0x0800ac3c
 80021cc:	000003ff 	.word	0x000003ff
 80021d0:	feffffff 	.word	0xfeffffff
 80021d4:	000007fe 	.word	0x000007fe
 80021d8:	fffffc0d 	.word	0xfffffc0d
 80021dc:	4649      	mov	r1, r9
 80021de:	2301      	movs	r3, #1
 80021e0:	4319      	orrs	r1, r3
 80021e2:	4689      	mov	r9, r1
 80021e4:	2600      	movs	r6, #0
 80021e6:	2001      	movs	r0, #1
 80021e8:	e667      	b.n	8001eba <__aeabi_dmul+0x86>
 80021ea:	2300      	movs	r3, #0
 80021ec:	2480      	movs	r4, #128	; 0x80
 80021ee:	2500      	movs	r5, #0
 80021f0:	4a43      	ldr	r2, [pc, #268]	; (8002300 <__aeabi_dmul+0x4cc>)
 80021f2:	9301      	str	r3, [sp, #4]
 80021f4:	0324      	lsls	r4, r4, #12
 80021f6:	e67e      	b.n	8001ef6 <__aeabi_dmul+0xc2>
 80021f8:	2001      	movs	r0, #1
 80021fa:	1a40      	subs	r0, r0, r1
 80021fc:	2838      	cmp	r0, #56	; 0x38
 80021fe:	dd00      	ble.n	8002202 <__aeabi_dmul+0x3ce>
 8002200:	e676      	b.n	8001ef0 <__aeabi_dmul+0xbc>
 8002202:	281f      	cmp	r0, #31
 8002204:	dd5b      	ble.n	80022be <__aeabi_dmul+0x48a>
 8002206:	221f      	movs	r2, #31
 8002208:	0023      	movs	r3, r4
 800220a:	4252      	negs	r2, r2
 800220c:	1a51      	subs	r1, r2, r1
 800220e:	40cb      	lsrs	r3, r1
 8002210:	0019      	movs	r1, r3
 8002212:	2820      	cmp	r0, #32
 8002214:	d003      	beq.n	800221e <__aeabi_dmul+0x3ea>
 8002216:	4a3b      	ldr	r2, [pc, #236]	; (8002304 <__aeabi_dmul+0x4d0>)
 8002218:	4462      	add	r2, ip
 800221a:	4094      	lsls	r4, r2
 800221c:	4325      	orrs	r5, r4
 800221e:	1e6a      	subs	r2, r5, #1
 8002220:	4195      	sbcs	r5, r2
 8002222:	002a      	movs	r2, r5
 8002224:	430a      	orrs	r2, r1
 8002226:	2107      	movs	r1, #7
 8002228:	000d      	movs	r5, r1
 800222a:	2400      	movs	r4, #0
 800222c:	4015      	ands	r5, r2
 800222e:	4211      	tst	r1, r2
 8002230:	d05b      	beq.n	80022ea <__aeabi_dmul+0x4b6>
 8002232:	210f      	movs	r1, #15
 8002234:	2400      	movs	r4, #0
 8002236:	4011      	ands	r1, r2
 8002238:	2904      	cmp	r1, #4
 800223a:	d053      	beq.n	80022e4 <__aeabi_dmul+0x4b0>
 800223c:	1d11      	adds	r1, r2, #4
 800223e:	4291      	cmp	r1, r2
 8002240:	4192      	sbcs	r2, r2
 8002242:	4252      	negs	r2, r2
 8002244:	18a4      	adds	r4, r4, r2
 8002246:	000a      	movs	r2, r1
 8002248:	0223      	lsls	r3, r4, #8
 800224a:	d54b      	bpl.n	80022e4 <__aeabi_dmul+0x4b0>
 800224c:	2201      	movs	r2, #1
 800224e:	2400      	movs	r4, #0
 8002250:	2500      	movs	r5, #0
 8002252:	e650      	b.n	8001ef6 <__aeabi_dmul+0xc2>
 8002254:	2380      	movs	r3, #128	; 0x80
 8002256:	031b      	lsls	r3, r3, #12
 8002258:	421c      	tst	r4, r3
 800225a:	d009      	beq.n	8002270 <__aeabi_dmul+0x43c>
 800225c:	421e      	tst	r6, r3
 800225e:	d107      	bne.n	8002270 <__aeabi_dmul+0x43c>
 8002260:	4333      	orrs	r3, r6
 8002262:	031c      	lsls	r4, r3, #12
 8002264:	4643      	mov	r3, r8
 8002266:	0015      	movs	r5, r2
 8002268:	0b24      	lsrs	r4, r4, #12
 800226a:	4a25      	ldr	r2, [pc, #148]	; (8002300 <__aeabi_dmul+0x4cc>)
 800226c:	9301      	str	r3, [sp, #4]
 800226e:	e642      	b.n	8001ef6 <__aeabi_dmul+0xc2>
 8002270:	2280      	movs	r2, #128	; 0x80
 8002272:	0312      	lsls	r2, r2, #12
 8002274:	4314      	orrs	r4, r2
 8002276:	0324      	lsls	r4, r4, #12
 8002278:	4a21      	ldr	r2, [pc, #132]	; (8002300 <__aeabi_dmul+0x4cc>)
 800227a:	0b24      	lsrs	r4, r4, #12
 800227c:	9701      	str	r7, [sp, #4]
 800227e:	e63a      	b.n	8001ef6 <__aeabi_dmul+0xc2>
 8002280:	f000 fd50 	bl	8002d24 <__clzsi2>
 8002284:	0001      	movs	r1, r0
 8002286:	0002      	movs	r2, r0
 8002288:	3115      	adds	r1, #21
 800228a:	3220      	adds	r2, #32
 800228c:	291c      	cmp	r1, #28
 800228e:	dc00      	bgt.n	8002292 <__aeabi_dmul+0x45e>
 8002290:	e74b      	b.n	800212a <__aeabi_dmul+0x2f6>
 8002292:	0034      	movs	r4, r6
 8002294:	3808      	subs	r0, #8
 8002296:	2500      	movs	r5, #0
 8002298:	4084      	lsls	r4, r0
 800229a:	e750      	b.n	800213e <__aeabi_dmul+0x30a>
 800229c:	f000 fd42 	bl	8002d24 <__clzsi2>
 80022a0:	0003      	movs	r3, r0
 80022a2:	001a      	movs	r2, r3
 80022a4:	3215      	adds	r2, #21
 80022a6:	3020      	adds	r0, #32
 80022a8:	2a1c      	cmp	r2, #28
 80022aa:	dc00      	bgt.n	80022ae <__aeabi_dmul+0x47a>
 80022ac:	e71e      	b.n	80020ec <__aeabi_dmul+0x2b8>
 80022ae:	4656      	mov	r6, sl
 80022b0:	3b08      	subs	r3, #8
 80022b2:	2200      	movs	r2, #0
 80022b4:	409e      	lsls	r6, r3
 80022b6:	e723      	b.n	8002100 <__aeabi_dmul+0x2cc>
 80022b8:	9b00      	ldr	r3, [sp, #0]
 80022ba:	469c      	mov	ip, r3
 80022bc:	e6e6      	b.n	800208c <__aeabi_dmul+0x258>
 80022be:	4912      	ldr	r1, [pc, #72]	; (8002308 <__aeabi_dmul+0x4d4>)
 80022c0:	0022      	movs	r2, r4
 80022c2:	4461      	add	r1, ip
 80022c4:	002e      	movs	r6, r5
 80022c6:	408d      	lsls	r5, r1
 80022c8:	408a      	lsls	r2, r1
 80022ca:	40c6      	lsrs	r6, r0
 80022cc:	1e69      	subs	r1, r5, #1
 80022ce:	418d      	sbcs	r5, r1
 80022d0:	4332      	orrs	r2, r6
 80022d2:	432a      	orrs	r2, r5
 80022d4:	40c4      	lsrs	r4, r0
 80022d6:	0753      	lsls	r3, r2, #29
 80022d8:	d0b6      	beq.n	8002248 <__aeabi_dmul+0x414>
 80022da:	210f      	movs	r1, #15
 80022dc:	4011      	ands	r1, r2
 80022de:	2904      	cmp	r1, #4
 80022e0:	d1ac      	bne.n	800223c <__aeabi_dmul+0x408>
 80022e2:	e7b1      	b.n	8002248 <__aeabi_dmul+0x414>
 80022e4:	0765      	lsls	r5, r4, #29
 80022e6:	0264      	lsls	r4, r4, #9
 80022e8:	0b24      	lsrs	r4, r4, #12
 80022ea:	08d2      	lsrs	r2, r2, #3
 80022ec:	4315      	orrs	r5, r2
 80022ee:	2200      	movs	r2, #0
 80022f0:	e601      	b.n	8001ef6 <__aeabi_dmul+0xc2>
 80022f2:	2280      	movs	r2, #128	; 0x80
 80022f4:	0312      	lsls	r2, r2, #12
 80022f6:	4314      	orrs	r4, r2
 80022f8:	0324      	lsls	r4, r4, #12
 80022fa:	4a01      	ldr	r2, [pc, #4]	; (8002300 <__aeabi_dmul+0x4cc>)
 80022fc:	0b24      	lsrs	r4, r4, #12
 80022fe:	e5fa      	b.n	8001ef6 <__aeabi_dmul+0xc2>
 8002300:	000007ff 	.word	0x000007ff
 8002304:	0000043e 	.word	0x0000043e
 8002308:	0000041e 	.word	0x0000041e

0800230c <__aeabi_dsub>:
 800230c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800230e:	4657      	mov	r7, sl
 8002310:	464e      	mov	r6, r9
 8002312:	4645      	mov	r5, r8
 8002314:	46de      	mov	lr, fp
 8002316:	b5e0      	push	{r5, r6, r7, lr}
 8002318:	001e      	movs	r6, r3
 800231a:	0017      	movs	r7, r2
 800231c:	004a      	lsls	r2, r1, #1
 800231e:	030b      	lsls	r3, r1, #12
 8002320:	0d52      	lsrs	r2, r2, #21
 8002322:	0a5b      	lsrs	r3, r3, #9
 8002324:	4690      	mov	r8, r2
 8002326:	0f42      	lsrs	r2, r0, #29
 8002328:	431a      	orrs	r2, r3
 800232a:	0fcd      	lsrs	r5, r1, #31
 800232c:	4ccd      	ldr	r4, [pc, #820]	; (8002664 <__aeabi_dsub+0x358>)
 800232e:	0331      	lsls	r1, r6, #12
 8002330:	00c3      	lsls	r3, r0, #3
 8002332:	4694      	mov	ip, r2
 8002334:	0070      	lsls	r0, r6, #1
 8002336:	0f7a      	lsrs	r2, r7, #29
 8002338:	0a49      	lsrs	r1, r1, #9
 800233a:	00ff      	lsls	r7, r7, #3
 800233c:	469a      	mov	sl, r3
 800233e:	46b9      	mov	r9, r7
 8002340:	0d40      	lsrs	r0, r0, #21
 8002342:	0ff6      	lsrs	r6, r6, #31
 8002344:	4311      	orrs	r1, r2
 8002346:	42a0      	cmp	r0, r4
 8002348:	d100      	bne.n	800234c <__aeabi_dsub+0x40>
 800234a:	e0b1      	b.n	80024b0 <__aeabi_dsub+0x1a4>
 800234c:	2201      	movs	r2, #1
 800234e:	4056      	eors	r6, r2
 8002350:	46b3      	mov	fp, r6
 8002352:	42b5      	cmp	r5, r6
 8002354:	d100      	bne.n	8002358 <__aeabi_dsub+0x4c>
 8002356:	e088      	b.n	800246a <__aeabi_dsub+0x15e>
 8002358:	4642      	mov	r2, r8
 800235a:	1a12      	subs	r2, r2, r0
 800235c:	2a00      	cmp	r2, #0
 800235e:	dc00      	bgt.n	8002362 <__aeabi_dsub+0x56>
 8002360:	e0ae      	b.n	80024c0 <__aeabi_dsub+0x1b4>
 8002362:	2800      	cmp	r0, #0
 8002364:	d100      	bne.n	8002368 <__aeabi_dsub+0x5c>
 8002366:	e0c1      	b.n	80024ec <__aeabi_dsub+0x1e0>
 8002368:	48be      	ldr	r0, [pc, #760]	; (8002664 <__aeabi_dsub+0x358>)
 800236a:	4580      	cmp	r8, r0
 800236c:	d100      	bne.n	8002370 <__aeabi_dsub+0x64>
 800236e:	e151      	b.n	8002614 <__aeabi_dsub+0x308>
 8002370:	2080      	movs	r0, #128	; 0x80
 8002372:	0400      	lsls	r0, r0, #16
 8002374:	4301      	orrs	r1, r0
 8002376:	2a38      	cmp	r2, #56	; 0x38
 8002378:	dd00      	ble.n	800237c <__aeabi_dsub+0x70>
 800237a:	e17b      	b.n	8002674 <__aeabi_dsub+0x368>
 800237c:	2a1f      	cmp	r2, #31
 800237e:	dd00      	ble.n	8002382 <__aeabi_dsub+0x76>
 8002380:	e1ee      	b.n	8002760 <__aeabi_dsub+0x454>
 8002382:	2020      	movs	r0, #32
 8002384:	003e      	movs	r6, r7
 8002386:	1a80      	subs	r0, r0, r2
 8002388:	000c      	movs	r4, r1
 800238a:	40d6      	lsrs	r6, r2
 800238c:	40d1      	lsrs	r1, r2
 800238e:	4087      	lsls	r7, r0
 8002390:	4662      	mov	r2, ip
 8002392:	4084      	lsls	r4, r0
 8002394:	1a52      	subs	r2, r2, r1
 8002396:	1e78      	subs	r0, r7, #1
 8002398:	4187      	sbcs	r7, r0
 800239a:	4694      	mov	ip, r2
 800239c:	4334      	orrs	r4, r6
 800239e:	4327      	orrs	r7, r4
 80023a0:	1bdc      	subs	r4, r3, r7
 80023a2:	42a3      	cmp	r3, r4
 80023a4:	419b      	sbcs	r3, r3
 80023a6:	4662      	mov	r2, ip
 80023a8:	425b      	negs	r3, r3
 80023aa:	1ad3      	subs	r3, r2, r3
 80023ac:	4699      	mov	r9, r3
 80023ae:	464b      	mov	r3, r9
 80023b0:	021b      	lsls	r3, r3, #8
 80023b2:	d400      	bmi.n	80023b6 <__aeabi_dsub+0xaa>
 80023b4:	e118      	b.n	80025e8 <__aeabi_dsub+0x2dc>
 80023b6:	464b      	mov	r3, r9
 80023b8:	0258      	lsls	r0, r3, #9
 80023ba:	0a43      	lsrs	r3, r0, #9
 80023bc:	4699      	mov	r9, r3
 80023be:	464b      	mov	r3, r9
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d100      	bne.n	80023c6 <__aeabi_dsub+0xba>
 80023c4:	e137      	b.n	8002636 <__aeabi_dsub+0x32a>
 80023c6:	4648      	mov	r0, r9
 80023c8:	f000 fcac 	bl	8002d24 <__clzsi2>
 80023cc:	0001      	movs	r1, r0
 80023ce:	3908      	subs	r1, #8
 80023d0:	2320      	movs	r3, #32
 80023d2:	0022      	movs	r2, r4
 80023d4:	4648      	mov	r0, r9
 80023d6:	1a5b      	subs	r3, r3, r1
 80023d8:	40da      	lsrs	r2, r3
 80023da:	4088      	lsls	r0, r1
 80023dc:	408c      	lsls	r4, r1
 80023de:	4643      	mov	r3, r8
 80023e0:	4310      	orrs	r0, r2
 80023e2:	4588      	cmp	r8, r1
 80023e4:	dd00      	ble.n	80023e8 <__aeabi_dsub+0xdc>
 80023e6:	e136      	b.n	8002656 <__aeabi_dsub+0x34a>
 80023e8:	1ac9      	subs	r1, r1, r3
 80023ea:	1c4b      	adds	r3, r1, #1
 80023ec:	2b1f      	cmp	r3, #31
 80023ee:	dd00      	ble.n	80023f2 <__aeabi_dsub+0xe6>
 80023f0:	e0ea      	b.n	80025c8 <__aeabi_dsub+0x2bc>
 80023f2:	2220      	movs	r2, #32
 80023f4:	0026      	movs	r6, r4
 80023f6:	1ad2      	subs	r2, r2, r3
 80023f8:	0001      	movs	r1, r0
 80023fa:	4094      	lsls	r4, r2
 80023fc:	40de      	lsrs	r6, r3
 80023fe:	40d8      	lsrs	r0, r3
 8002400:	2300      	movs	r3, #0
 8002402:	4091      	lsls	r1, r2
 8002404:	1e62      	subs	r2, r4, #1
 8002406:	4194      	sbcs	r4, r2
 8002408:	4681      	mov	r9, r0
 800240a:	4698      	mov	r8, r3
 800240c:	4331      	orrs	r1, r6
 800240e:	430c      	orrs	r4, r1
 8002410:	0763      	lsls	r3, r4, #29
 8002412:	d009      	beq.n	8002428 <__aeabi_dsub+0x11c>
 8002414:	230f      	movs	r3, #15
 8002416:	4023      	ands	r3, r4
 8002418:	2b04      	cmp	r3, #4
 800241a:	d005      	beq.n	8002428 <__aeabi_dsub+0x11c>
 800241c:	1d23      	adds	r3, r4, #4
 800241e:	42a3      	cmp	r3, r4
 8002420:	41a4      	sbcs	r4, r4
 8002422:	4264      	negs	r4, r4
 8002424:	44a1      	add	r9, r4
 8002426:	001c      	movs	r4, r3
 8002428:	464b      	mov	r3, r9
 800242a:	021b      	lsls	r3, r3, #8
 800242c:	d400      	bmi.n	8002430 <__aeabi_dsub+0x124>
 800242e:	e0de      	b.n	80025ee <__aeabi_dsub+0x2e2>
 8002430:	4641      	mov	r1, r8
 8002432:	4b8c      	ldr	r3, [pc, #560]	; (8002664 <__aeabi_dsub+0x358>)
 8002434:	3101      	adds	r1, #1
 8002436:	4299      	cmp	r1, r3
 8002438:	d100      	bne.n	800243c <__aeabi_dsub+0x130>
 800243a:	e0e7      	b.n	800260c <__aeabi_dsub+0x300>
 800243c:	464b      	mov	r3, r9
 800243e:	488a      	ldr	r0, [pc, #552]	; (8002668 <__aeabi_dsub+0x35c>)
 8002440:	08e4      	lsrs	r4, r4, #3
 8002442:	4003      	ands	r3, r0
 8002444:	0018      	movs	r0, r3
 8002446:	0549      	lsls	r1, r1, #21
 8002448:	075b      	lsls	r3, r3, #29
 800244a:	0240      	lsls	r0, r0, #9
 800244c:	4323      	orrs	r3, r4
 800244e:	0d4a      	lsrs	r2, r1, #21
 8002450:	0b04      	lsrs	r4, r0, #12
 8002452:	0512      	lsls	r2, r2, #20
 8002454:	07ed      	lsls	r5, r5, #31
 8002456:	4322      	orrs	r2, r4
 8002458:	432a      	orrs	r2, r5
 800245a:	0018      	movs	r0, r3
 800245c:	0011      	movs	r1, r2
 800245e:	bcf0      	pop	{r4, r5, r6, r7}
 8002460:	46bb      	mov	fp, r7
 8002462:	46b2      	mov	sl, r6
 8002464:	46a9      	mov	r9, r5
 8002466:	46a0      	mov	r8, r4
 8002468:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800246a:	4642      	mov	r2, r8
 800246c:	1a12      	subs	r2, r2, r0
 800246e:	2a00      	cmp	r2, #0
 8002470:	dd52      	ble.n	8002518 <__aeabi_dsub+0x20c>
 8002472:	2800      	cmp	r0, #0
 8002474:	d100      	bne.n	8002478 <__aeabi_dsub+0x16c>
 8002476:	e09c      	b.n	80025b2 <__aeabi_dsub+0x2a6>
 8002478:	45a0      	cmp	r8, r4
 800247a:	d100      	bne.n	800247e <__aeabi_dsub+0x172>
 800247c:	e0ca      	b.n	8002614 <__aeabi_dsub+0x308>
 800247e:	2080      	movs	r0, #128	; 0x80
 8002480:	0400      	lsls	r0, r0, #16
 8002482:	4301      	orrs	r1, r0
 8002484:	2a38      	cmp	r2, #56	; 0x38
 8002486:	dd00      	ble.n	800248a <__aeabi_dsub+0x17e>
 8002488:	e149      	b.n	800271e <__aeabi_dsub+0x412>
 800248a:	2a1f      	cmp	r2, #31
 800248c:	dc00      	bgt.n	8002490 <__aeabi_dsub+0x184>
 800248e:	e197      	b.n	80027c0 <__aeabi_dsub+0x4b4>
 8002490:	0010      	movs	r0, r2
 8002492:	000e      	movs	r6, r1
 8002494:	3820      	subs	r0, #32
 8002496:	40c6      	lsrs	r6, r0
 8002498:	2a20      	cmp	r2, #32
 800249a:	d004      	beq.n	80024a6 <__aeabi_dsub+0x19a>
 800249c:	2040      	movs	r0, #64	; 0x40
 800249e:	1a82      	subs	r2, r0, r2
 80024a0:	4091      	lsls	r1, r2
 80024a2:	430f      	orrs	r7, r1
 80024a4:	46b9      	mov	r9, r7
 80024a6:	464c      	mov	r4, r9
 80024a8:	1e62      	subs	r2, r4, #1
 80024aa:	4194      	sbcs	r4, r2
 80024ac:	4334      	orrs	r4, r6
 80024ae:	e13a      	b.n	8002726 <__aeabi_dsub+0x41a>
 80024b0:	000a      	movs	r2, r1
 80024b2:	433a      	orrs	r2, r7
 80024b4:	d028      	beq.n	8002508 <__aeabi_dsub+0x1fc>
 80024b6:	46b3      	mov	fp, r6
 80024b8:	42b5      	cmp	r5, r6
 80024ba:	d02b      	beq.n	8002514 <__aeabi_dsub+0x208>
 80024bc:	4a6b      	ldr	r2, [pc, #428]	; (800266c <__aeabi_dsub+0x360>)
 80024be:	4442      	add	r2, r8
 80024c0:	2a00      	cmp	r2, #0
 80024c2:	d05d      	beq.n	8002580 <__aeabi_dsub+0x274>
 80024c4:	4642      	mov	r2, r8
 80024c6:	4644      	mov	r4, r8
 80024c8:	1a82      	subs	r2, r0, r2
 80024ca:	2c00      	cmp	r4, #0
 80024cc:	d000      	beq.n	80024d0 <__aeabi_dsub+0x1c4>
 80024ce:	e0f5      	b.n	80026bc <__aeabi_dsub+0x3b0>
 80024d0:	4665      	mov	r5, ip
 80024d2:	431d      	orrs	r5, r3
 80024d4:	d100      	bne.n	80024d8 <__aeabi_dsub+0x1cc>
 80024d6:	e19c      	b.n	8002812 <__aeabi_dsub+0x506>
 80024d8:	1e55      	subs	r5, r2, #1
 80024da:	2a01      	cmp	r2, #1
 80024dc:	d100      	bne.n	80024e0 <__aeabi_dsub+0x1d4>
 80024de:	e1fb      	b.n	80028d8 <__aeabi_dsub+0x5cc>
 80024e0:	4c60      	ldr	r4, [pc, #384]	; (8002664 <__aeabi_dsub+0x358>)
 80024e2:	42a2      	cmp	r2, r4
 80024e4:	d100      	bne.n	80024e8 <__aeabi_dsub+0x1dc>
 80024e6:	e1bd      	b.n	8002864 <__aeabi_dsub+0x558>
 80024e8:	002a      	movs	r2, r5
 80024ea:	e0f0      	b.n	80026ce <__aeabi_dsub+0x3c2>
 80024ec:	0008      	movs	r0, r1
 80024ee:	4338      	orrs	r0, r7
 80024f0:	d100      	bne.n	80024f4 <__aeabi_dsub+0x1e8>
 80024f2:	e0c3      	b.n	800267c <__aeabi_dsub+0x370>
 80024f4:	1e50      	subs	r0, r2, #1
 80024f6:	2a01      	cmp	r2, #1
 80024f8:	d100      	bne.n	80024fc <__aeabi_dsub+0x1f0>
 80024fa:	e1a8      	b.n	800284e <__aeabi_dsub+0x542>
 80024fc:	4c59      	ldr	r4, [pc, #356]	; (8002664 <__aeabi_dsub+0x358>)
 80024fe:	42a2      	cmp	r2, r4
 8002500:	d100      	bne.n	8002504 <__aeabi_dsub+0x1f8>
 8002502:	e087      	b.n	8002614 <__aeabi_dsub+0x308>
 8002504:	0002      	movs	r2, r0
 8002506:	e736      	b.n	8002376 <__aeabi_dsub+0x6a>
 8002508:	2201      	movs	r2, #1
 800250a:	4056      	eors	r6, r2
 800250c:	46b3      	mov	fp, r6
 800250e:	42b5      	cmp	r5, r6
 8002510:	d000      	beq.n	8002514 <__aeabi_dsub+0x208>
 8002512:	e721      	b.n	8002358 <__aeabi_dsub+0x4c>
 8002514:	4a55      	ldr	r2, [pc, #340]	; (800266c <__aeabi_dsub+0x360>)
 8002516:	4442      	add	r2, r8
 8002518:	2a00      	cmp	r2, #0
 800251a:	d100      	bne.n	800251e <__aeabi_dsub+0x212>
 800251c:	e0b5      	b.n	800268a <__aeabi_dsub+0x37e>
 800251e:	4642      	mov	r2, r8
 8002520:	4644      	mov	r4, r8
 8002522:	1a82      	subs	r2, r0, r2
 8002524:	2c00      	cmp	r4, #0
 8002526:	d100      	bne.n	800252a <__aeabi_dsub+0x21e>
 8002528:	e138      	b.n	800279c <__aeabi_dsub+0x490>
 800252a:	4e4e      	ldr	r6, [pc, #312]	; (8002664 <__aeabi_dsub+0x358>)
 800252c:	42b0      	cmp	r0, r6
 800252e:	d100      	bne.n	8002532 <__aeabi_dsub+0x226>
 8002530:	e1de      	b.n	80028f0 <__aeabi_dsub+0x5e4>
 8002532:	2680      	movs	r6, #128	; 0x80
 8002534:	4664      	mov	r4, ip
 8002536:	0436      	lsls	r6, r6, #16
 8002538:	4334      	orrs	r4, r6
 800253a:	46a4      	mov	ip, r4
 800253c:	2a38      	cmp	r2, #56	; 0x38
 800253e:	dd00      	ble.n	8002542 <__aeabi_dsub+0x236>
 8002540:	e196      	b.n	8002870 <__aeabi_dsub+0x564>
 8002542:	2a1f      	cmp	r2, #31
 8002544:	dd00      	ble.n	8002548 <__aeabi_dsub+0x23c>
 8002546:	e224      	b.n	8002992 <__aeabi_dsub+0x686>
 8002548:	2620      	movs	r6, #32
 800254a:	1ab4      	subs	r4, r6, r2
 800254c:	46a2      	mov	sl, r4
 800254e:	4664      	mov	r4, ip
 8002550:	4656      	mov	r6, sl
 8002552:	40b4      	lsls	r4, r6
 8002554:	46a1      	mov	r9, r4
 8002556:	001c      	movs	r4, r3
 8002558:	464e      	mov	r6, r9
 800255a:	40d4      	lsrs	r4, r2
 800255c:	4326      	orrs	r6, r4
 800255e:	0034      	movs	r4, r6
 8002560:	4656      	mov	r6, sl
 8002562:	40b3      	lsls	r3, r6
 8002564:	1e5e      	subs	r6, r3, #1
 8002566:	41b3      	sbcs	r3, r6
 8002568:	431c      	orrs	r4, r3
 800256a:	4663      	mov	r3, ip
 800256c:	40d3      	lsrs	r3, r2
 800256e:	18c9      	adds	r1, r1, r3
 8002570:	19e4      	adds	r4, r4, r7
 8002572:	42bc      	cmp	r4, r7
 8002574:	41bf      	sbcs	r7, r7
 8002576:	427f      	negs	r7, r7
 8002578:	46b9      	mov	r9, r7
 800257a:	4680      	mov	r8, r0
 800257c:	4489      	add	r9, r1
 800257e:	e0d8      	b.n	8002732 <__aeabi_dsub+0x426>
 8002580:	4640      	mov	r0, r8
 8002582:	4c3b      	ldr	r4, [pc, #236]	; (8002670 <__aeabi_dsub+0x364>)
 8002584:	3001      	adds	r0, #1
 8002586:	4220      	tst	r0, r4
 8002588:	d000      	beq.n	800258c <__aeabi_dsub+0x280>
 800258a:	e0b4      	b.n	80026f6 <__aeabi_dsub+0x3ea>
 800258c:	4640      	mov	r0, r8
 800258e:	2800      	cmp	r0, #0
 8002590:	d000      	beq.n	8002594 <__aeabi_dsub+0x288>
 8002592:	e144      	b.n	800281e <__aeabi_dsub+0x512>
 8002594:	4660      	mov	r0, ip
 8002596:	4318      	orrs	r0, r3
 8002598:	d100      	bne.n	800259c <__aeabi_dsub+0x290>
 800259a:	e190      	b.n	80028be <__aeabi_dsub+0x5b2>
 800259c:	0008      	movs	r0, r1
 800259e:	4338      	orrs	r0, r7
 80025a0:	d000      	beq.n	80025a4 <__aeabi_dsub+0x298>
 80025a2:	e1aa      	b.n	80028fa <__aeabi_dsub+0x5ee>
 80025a4:	4661      	mov	r1, ip
 80025a6:	08db      	lsrs	r3, r3, #3
 80025a8:	0749      	lsls	r1, r1, #29
 80025aa:	430b      	orrs	r3, r1
 80025ac:	4661      	mov	r1, ip
 80025ae:	08cc      	lsrs	r4, r1, #3
 80025b0:	e027      	b.n	8002602 <__aeabi_dsub+0x2f6>
 80025b2:	0008      	movs	r0, r1
 80025b4:	4338      	orrs	r0, r7
 80025b6:	d061      	beq.n	800267c <__aeabi_dsub+0x370>
 80025b8:	1e50      	subs	r0, r2, #1
 80025ba:	2a01      	cmp	r2, #1
 80025bc:	d100      	bne.n	80025c0 <__aeabi_dsub+0x2b4>
 80025be:	e139      	b.n	8002834 <__aeabi_dsub+0x528>
 80025c0:	42a2      	cmp	r2, r4
 80025c2:	d027      	beq.n	8002614 <__aeabi_dsub+0x308>
 80025c4:	0002      	movs	r2, r0
 80025c6:	e75d      	b.n	8002484 <__aeabi_dsub+0x178>
 80025c8:	0002      	movs	r2, r0
 80025ca:	391f      	subs	r1, #31
 80025cc:	40ca      	lsrs	r2, r1
 80025ce:	0011      	movs	r1, r2
 80025d0:	2b20      	cmp	r3, #32
 80025d2:	d003      	beq.n	80025dc <__aeabi_dsub+0x2d0>
 80025d4:	2240      	movs	r2, #64	; 0x40
 80025d6:	1ad3      	subs	r3, r2, r3
 80025d8:	4098      	lsls	r0, r3
 80025da:	4304      	orrs	r4, r0
 80025dc:	1e63      	subs	r3, r4, #1
 80025de:	419c      	sbcs	r4, r3
 80025e0:	2300      	movs	r3, #0
 80025e2:	4699      	mov	r9, r3
 80025e4:	4698      	mov	r8, r3
 80025e6:	430c      	orrs	r4, r1
 80025e8:	0763      	lsls	r3, r4, #29
 80025ea:	d000      	beq.n	80025ee <__aeabi_dsub+0x2e2>
 80025ec:	e712      	b.n	8002414 <__aeabi_dsub+0x108>
 80025ee:	464b      	mov	r3, r9
 80025f0:	464a      	mov	r2, r9
 80025f2:	08e4      	lsrs	r4, r4, #3
 80025f4:	075b      	lsls	r3, r3, #29
 80025f6:	4323      	orrs	r3, r4
 80025f8:	08d4      	lsrs	r4, r2, #3
 80025fa:	4642      	mov	r2, r8
 80025fc:	4919      	ldr	r1, [pc, #100]	; (8002664 <__aeabi_dsub+0x358>)
 80025fe:	428a      	cmp	r2, r1
 8002600:	d00e      	beq.n	8002620 <__aeabi_dsub+0x314>
 8002602:	0324      	lsls	r4, r4, #12
 8002604:	0552      	lsls	r2, r2, #21
 8002606:	0b24      	lsrs	r4, r4, #12
 8002608:	0d52      	lsrs	r2, r2, #21
 800260a:	e722      	b.n	8002452 <__aeabi_dsub+0x146>
 800260c:	000a      	movs	r2, r1
 800260e:	2400      	movs	r4, #0
 8002610:	2300      	movs	r3, #0
 8002612:	e71e      	b.n	8002452 <__aeabi_dsub+0x146>
 8002614:	08db      	lsrs	r3, r3, #3
 8002616:	4662      	mov	r2, ip
 8002618:	0752      	lsls	r2, r2, #29
 800261a:	4313      	orrs	r3, r2
 800261c:	4662      	mov	r2, ip
 800261e:	08d4      	lsrs	r4, r2, #3
 8002620:	001a      	movs	r2, r3
 8002622:	4322      	orrs	r2, r4
 8002624:	d100      	bne.n	8002628 <__aeabi_dsub+0x31c>
 8002626:	e1fc      	b.n	8002a22 <__aeabi_dsub+0x716>
 8002628:	2280      	movs	r2, #128	; 0x80
 800262a:	0312      	lsls	r2, r2, #12
 800262c:	4314      	orrs	r4, r2
 800262e:	0324      	lsls	r4, r4, #12
 8002630:	4a0c      	ldr	r2, [pc, #48]	; (8002664 <__aeabi_dsub+0x358>)
 8002632:	0b24      	lsrs	r4, r4, #12
 8002634:	e70d      	b.n	8002452 <__aeabi_dsub+0x146>
 8002636:	0020      	movs	r0, r4
 8002638:	f000 fb74 	bl	8002d24 <__clzsi2>
 800263c:	0001      	movs	r1, r0
 800263e:	3118      	adds	r1, #24
 8002640:	291f      	cmp	r1, #31
 8002642:	dc00      	bgt.n	8002646 <__aeabi_dsub+0x33a>
 8002644:	e6c4      	b.n	80023d0 <__aeabi_dsub+0xc4>
 8002646:	3808      	subs	r0, #8
 8002648:	4084      	lsls	r4, r0
 800264a:	4643      	mov	r3, r8
 800264c:	0020      	movs	r0, r4
 800264e:	2400      	movs	r4, #0
 8002650:	4588      	cmp	r8, r1
 8002652:	dc00      	bgt.n	8002656 <__aeabi_dsub+0x34a>
 8002654:	e6c8      	b.n	80023e8 <__aeabi_dsub+0xdc>
 8002656:	4a04      	ldr	r2, [pc, #16]	; (8002668 <__aeabi_dsub+0x35c>)
 8002658:	1a5b      	subs	r3, r3, r1
 800265a:	4010      	ands	r0, r2
 800265c:	4698      	mov	r8, r3
 800265e:	4681      	mov	r9, r0
 8002660:	e6d6      	b.n	8002410 <__aeabi_dsub+0x104>
 8002662:	46c0      	nop			; (mov r8, r8)
 8002664:	000007ff 	.word	0x000007ff
 8002668:	ff7fffff 	.word	0xff7fffff
 800266c:	fffff801 	.word	0xfffff801
 8002670:	000007fe 	.word	0x000007fe
 8002674:	430f      	orrs	r7, r1
 8002676:	1e7a      	subs	r2, r7, #1
 8002678:	4197      	sbcs	r7, r2
 800267a:	e691      	b.n	80023a0 <__aeabi_dsub+0x94>
 800267c:	4661      	mov	r1, ip
 800267e:	08db      	lsrs	r3, r3, #3
 8002680:	0749      	lsls	r1, r1, #29
 8002682:	430b      	orrs	r3, r1
 8002684:	4661      	mov	r1, ip
 8002686:	08cc      	lsrs	r4, r1, #3
 8002688:	e7b8      	b.n	80025fc <__aeabi_dsub+0x2f0>
 800268a:	4640      	mov	r0, r8
 800268c:	4cd3      	ldr	r4, [pc, #844]	; (80029dc <__aeabi_dsub+0x6d0>)
 800268e:	3001      	adds	r0, #1
 8002690:	4220      	tst	r0, r4
 8002692:	d000      	beq.n	8002696 <__aeabi_dsub+0x38a>
 8002694:	e0a2      	b.n	80027dc <__aeabi_dsub+0x4d0>
 8002696:	4640      	mov	r0, r8
 8002698:	2800      	cmp	r0, #0
 800269a:	d000      	beq.n	800269e <__aeabi_dsub+0x392>
 800269c:	e101      	b.n	80028a2 <__aeabi_dsub+0x596>
 800269e:	4660      	mov	r0, ip
 80026a0:	4318      	orrs	r0, r3
 80026a2:	d100      	bne.n	80026a6 <__aeabi_dsub+0x39a>
 80026a4:	e15e      	b.n	8002964 <__aeabi_dsub+0x658>
 80026a6:	0008      	movs	r0, r1
 80026a8:	4338      	orrs	r0, r7
 80026aa:	d000      	beq.n	80026ae <__aeabi_dsub+0x3a2>
 80026ac:	e15f      	b.n	800296e <__aeabi_dsub+0x662>
 80026ae:	4661      	mov	r1, ip
 80026b0:	08db      	lsrs	r3, r3, #3
 80026b2:	0749      	lsls	r1, r1, #29
 80026b4:	430b      	orrs	r3, r1
 80026b6:	4661      	mov	r1, ip
 80026b8:	08cc      	lsrs	r4, r1, #3
 80026ba:	e7a2      	b.n	8002602 <__aeabi_dsub+0x2f6>
 80026bc:	4dc8      	ldr	r5, [pc, #800]	; (80029e0 <__aeabi_dsub+0x6d4>)
 80026be:	42a8      	cmp	r0, r5
 80026c0:	d100      	bne.n	80026c4 <__aeabi_dsub+0x3b8>
 80026c2:	e0cf      	b.n	8002864 <__aeabi_dsub+0x558>
 80026c4:	2580      	movs	r5, #128	; 0x80
 80026c6:	4664      	mov	r4, ip
 80026c8:	042d      	lsls	r5, r5, #16
 80026ca:	432c      	orrs	r4, r5
 80026cc:	46a4      	mov	ip, r4
 80026ce:	2a38      	cmp	r2, #56	; 0x38
 80026d0:	dc56      	bgt.n	8002780 <__aeabi_dsub+0x474>
 80026d2:	2a1f      	cmp	r2, #31
 80026d4:	dd00      	ble.n	80026d8 <__aeabi_dsub+0x3cc>
 80026d6:	e0d1      	b.n	800287c <__aeabi_dsub+0x570>
 80026d8:	2520      	movs	r5, #32
 80026da:	001e      	movs	r6, r3
 80026dc:	1aad      	subs	r5, r5, r2
 80026de:	4664      	mov	r4, ip
 80026e0:	40ab      	lsls	r3, r5
 80026e2:	40ac      	lsls	r4, r5
 80026e4:	40d6      	lsrs	r6, r2
 80026e6:	1e5d      	subs	r5, r3, #1
 80026e8:	41ab      	sbcs	r3, r5
 80026ea:	4334      	orrs	r4, r6
 80026ec:	4323      	orrs	r3, r4
 80026ee:	4664      	mov	r4, ip
 80026f0:	40d4      	lsrs	r4, r2
 80026f2:	1b09      	subs	r1, r1, r4
 80026f4:	e049      	b.n	800278a <__aeabi_dsub+0x47e>
 80026f6:	4660      	mov	r0, ip
 80026f8:	1bdc      	subs	r4, r3, r7
 80026fa:	1a46      	subs	r6, r0, r1
 80026fc:	42a3      	cmp	r3, r4
 80026fe:	4180      	sbcs	r0, r0
 8002700:	4240      	negs	r0, r0
 8002702:	4681      	mov	r9, r0
 8002704:	0030      	movs	r0, r6
 8002706:	464e      	mov	r6, r9
 8002708:	1b80      	subs	r0, r0, r6
 800270a:	4681      	mov	r9, r0
 800270c:	0200      	lsls	r0, r0, #8
 800270e:	d476      	bmi.n	80027fe <__aeabi_dsub+0x4f2>
 8002710:	464b      	mov	r3, r9
 8002712:	4323      	orrs	r3, r4
 8002714:	d000      	beq.n	8002718 <__aeabi_dsub+0x40c>
 8002716:	e652      	b.n	80023be <__aeabi_dsub+0xb2>
 8002718:	2400      	movs	r4, #0
 800271a:	2500      	movs	r5, #0
 800271c:	e771      	b.n	8002602 <__aeabi_dsub+0x2f6>
 800271e:	4339      	orrs	r1, r7
 8002720:	000c      	movs	r4, r1
 8002722:	1e62      	subs	r2, r4, #1
 8002724:	4194      	sbcs	r4, r2
 8002726:	18e4      	adds	r4, r4, r3
 8002728:	429c      	cmp	r4, r3
 800272a:	419b      	sbcs	r3, r3
 800272c:	425b      	negs	r3, r3
 800272e:	4463      	add	r3, ip
 8002730:	4699      	mov	r9, r3
 8002732:	464b      	mov	r3, r9
 8002734:	021b      	lsls	r3, r3, #8
 8002736:	d400      	bmi.n	800273a <__aeabi_dsub+0x42e>
 8002738:	e756      	b.n	80025e8 <__aeabi_dsub+0x2dc>
 800273a:	2301      	movs	r3, #1
 800273c:	469c      	mov	ip, r3
 800273e:	4ba8      	ldr	r3, [pc, #672]	; (80029e0 <__aeabi_dsub+0x6d4>)
 8002740:	44e0      	add	r8, ip
 8002742:	4598      	cmp	r8, r3
 8002744:	d038      	beq.n	80027b8 <__aeabi_dsub+0x4ac>
 8002746:	464b      	mov	r3, r9
 8002748:	48a6      	ldr	r0, [pc, #664]	; (80029e4 <__aeabi_dsub+0x6d8>)
 800274a:	2201      	movs	r2, #1
 800274c:	4003      	ands	r3, r0
 800274e:	0018      	movs	r0, r3
 8002750:	0863      	lsrs	r3, r4, #1
 8002752:	4014      	ands	r4, r2
 8002754:	431c      	orrs	r4, r3
 8002756:	07c3      	lsls	r3, r0, #31
 8002758:	431c      	orrs	r4, r3
 800275a:	0843      	lsrs	r3, r0, #1
 800275c:	4699      	mov	r9, r3
 800275e:	e657      	b.n	8002410 <__aeabi_dsub+0x104>
 8002760:	0010      	movs	r0, r2
 8002762:	000e      	movs	r6, r1
 8002764:	3820      	subs	r0, #32
 8002766:	40c6      	lsrs	r6, r0
 8002768:	2a20      	cmp	r2, #32
 800276a:	d004      	beq.n	8002776 <__aeabi_dsub+0x46a>
 800276c:	2040      	movs	r0, #64	; 0x40
 800276e:	1a82      	subs	r2, r0, r2
 8002770:	4091      	lsls	r1, r2
 8002772:	430f      	orrs	r7, r1
 8002774:	46b9      	mov	r9, r7
 8002776:	464f      	mov	r7, r9
 8002778:	1e7a      	subs	r2, r7, #1
 800277a:	4197      	sbcs	r7, r2
 800277c:	4337      	orrs	r7, r6
 800277e:	e60f      	b.n	80023a0 <__aeabi_dsub+0x94>
 8002780:	4662      	mov	r2, ip
 8002782:	431a      	orrs	r2, r3
 8002784:	0013      	movs	r3, r2
 8002786:	1e5a      	subs	r2, r3, #1
 8002788:	4193      	sbcs	r3, r2
 800278a:	1afc      	subs	r4, r7, r3
 800278c:	42a7      	cmp	r7, r4
 800278e:	41bf      	sbcs	r7, r7
 8002790:	427f      	negs	r7, r7
 8002792:	1bcb      	subs	r3, r1, r7
 8002794:	4699      	mov	r9, r3
 8002796:	465d      	mov	r5, fp
 8002798:	4680      	mov	r8, r0
 800279a:	e608      	b.n	80023ae <__aeabi_dsub+0xa2>
 800279c:	4666      	mov	r6, ip
 800279e:	431e      	orrs	r6, r3
 80027a0:	d100      	bne.n	80027a4 <__aeabi_dsub+0x498>
 80027a2:	e0be      	b.n	8002922 <__aeabi_dsub+0x616>
 80027a4:	1e56      	subs	r6, r2, #1
 80027a6:	2a01      	cmp	r2, #1
 80027a8:	d100      	bne.n	80027ac <__aeabi_dsub+0x4a0>
 80027aa:	e109      	b.n	80029c0 <__aeabi_dsub+0x6b4>
 80027ac:	4c8c      	ldr	r4, [pc, #560]	; (80029e0 <__aeabi_dsub+0x6d4>)
 80027ae:	42a2      	cmp	r2, r4
 80027b0:	d100      	bne.n	80027b4 <__aeabi_dsub+0x4a8>
 80027b2:	e119      	b.n	80029e8 <__aeabi_dsub+0x6dc>
 80027b4:	0032      	movs	r2, r6
 80027b6:	e6c1      	b.n	800253c <__aeabi_dsub+0x230>
 80027b8:	4642      	mov	r2, r8
 80027ba:	2400      	movs	r4, #0
 80027bc:	2300      	movs	r3, #0
 80027be:	e648      	b.n	8002452 <__aeabi_dsub+0x146>
 80027c0:	2020      	movs	r0, #32
 80027c2:	000c      	movs	r4, r1
 80027c4:	1a80      	subs	r0, r0, r2
 80027c6:	003e      	movs	r6, r7
 80027c8:	4087      	lsls	r7, r0
 80027ca:	4084      	lsls	r4, r0
 80027cc:	40d6      	lsrs	r6, r2
 80027ce:	1e78      	subs	r0, r7, #1
 80027d0:	4187      	sbcs	r7, r0
 80027d2:	40d1      	lsrs	r1, r2
 80027d4:	4334      	orrs	r4, r6
 80027d6:	433c      	orrs	r4, r7
 80027d8:	448c      	add	ip, r1
 80027da:	e7a4      	b.n	8002726 <__aeabi_dsub+0x41a>
 80027dc:	4a80      	ldr	r2, [pc, #512]	; (80029e0 <__aeabi_dsub+0x6d4>)
 80027de:	4290      	cmp	r0, r2
 80027e0:	d100      	bne.n	80027e4 <__aeabi_dsub+0x4d8>
 80027e2:	e0e9      	b.n	80029b8 <__aeabi_dsub+0x6ac>
 80027e4:	19df      	adds	r7, r3, r7
 80027e6:	429f      	cmp	r7, r3
 80027e8:	419b      	sbcs	r3, r3
 80027ea:	4461      	add	r1, ip
 80027ec:	425b      	negs	r3, r3
 80027ee:	18c9      	adds	r1, r1, r3
 80027f0:	07cc      	lsls	r4, r1, #31
 80027f2:	087f      	lsrs	r7, r7, #1
 80027f4:	084b      	lsrs	r3, r1, #1
 80027f6:	4699      	mov	r9, r3
 80027f8:	4680      	mov	r8, r0
 80027fa:	433c      	orrs	r4, r7
 80027fc:	e6f4      	b.n	80025e8 <__aeabi_dsub+0x2dc>
 80027fe:	1afc      	subs	r4, r7, r3
 8002800:	42a7      	cmp	r7, r4
 8002802:	41bf      	sbcs	r7, r7
 8002804:	4663      	mov	r3, ip
 8002806:	427f      	negs	r7, r7
 8002808:	1ac9      	subs	r1, r1, r3
 800280a:	1bcb      	subs	r3, r1, r7
 800280c:	4699      	mov	r9, r3
 800280e:	465d      	mov	r5, fp
 8002810:	e5d5      	b.n	80023be <__aeabi_dsub+0xb2>
 8002812:	08ff      	lsrs	r7, r7, #3
 8002814:	074b      	lsls	r3, r1, #29
 8002816:	465d      	mov	r5, fp
 8002818:	433b      	orrs	r3, r7
 800281a:	08cc      	lsrs	r4, r1, #3
 800281c:	e6ee      	b.n	80025fc <__aeabi_dsub+0x2f0>
 800281e:	4662      	mov	r2, ip
 8002820:	431a      	orrs	r2, r3
 8002822:	d000      	beq.n	8002826 <__aeabi_dsub+0x51a>
 8002824:	e082      	b.n	800292c <__aeabi_dsub+0x620>
 8002826:	000b      	movs	r3, r1
 8002828:	433b      	orrs	r3, r7
 800282a:	d11b      	bne.n	8002864 <__aeabi_dsub+0x558>
 800282c:	2480      	movs	r4, #128	; 0x80
 800282e:	2500      	movs	r5, #0
 8002830:	0324      	lsls	r4, r4, #12
 8002832:	e6f9      	b.n	8002628 <__aeabi_dsub+0x31c>
 8002834:	19dc      	adds	r4, r3, r7
 8002836:	429c      	cmp	r4, r3
 8002838:	419b      	sbcs	r3, r3
 800283a:	4461      	add	r1, ip
 800283c:	4689      	mov	r9, r1
 800283e:	425b      	negs	r3, r3
 8002840:	4499      	add	r9, r3
 8002842:	464b      	mov	r3, r9
 8002844:	021b      	lsls	r3, r3, #8
 8002846:	d444      	bmi.n	80028d2 <__aeabi_dsub+0x5c6>
 8002848:	2301      	movs	r3, #1
 800284a:	4698      	mov	r8, r3
 800284c:	e6cc      	b.n	80025e8 <__aeabi_dsub+0x2dc>
 800284e:	1bdc      	subs	r4, r3, r7
 8002850:	4662      	mov	r2, ip
 8002852:	42a3      	cmp	r3, r4
 8002854:	419b      	sbcs	r3, r3
 8002856:	1a51      	subs	r1, r2, r1
 8002858:	425b      	negs	r3, r3
 800285a:	1acb      	subs	r3, r1, r3
 800285c:	4699      	mov	r9, r3
 800285e:	2301      	movs	r3, #1
 8002860:	4698      	mov	r8, r3
 8002862:	e5a4      	b.n	80023ae <__aeabi_dsub+0xa2>
 8002864:	08ff      	lsrs	r7, r7, #3
 8002866:	074b      	lsls	r3, r1, #29
 8002868:	465d      	mov	r5, fp
 800286a:	433b      	orrs	r3, r7
 800286c:	08cc      	lsrs	r4, r1, #3
 800286e:	e6d7      	b.n	8002620 <__aeabi_dsub+0x314>
 8002870:	4662      	mov	r2, ip
 8002872:	431a      	orrs	r2, r3
 8002874:	0014      	movs	r4, r2
 8002876:	1e63      	subs	r3, r4, #1
 8002878:	419c      	sbcs	r4, r3
 800287a:	e679      	b.n	8002570 <__aeabi_dsub+0x264>
 800287c:	0015      	movs	r5, r2
 800287e:	4664      	mov	r4, ip
 8002880:	3d20      	subs	r5, #32
 8002882:	40ec      	lsrs	r4, r5
 8002884:	46a0      	mov	r8, r4
 8002886:	2a20      	cmp	r2, #32
 8002888:	d005      	beq.n	8002896 <__aeabi_dsub+0x58a>
 800288a:	2540      	movs	r5, #64	; 0x40
 800288c:	4664      	mov	r4, ip
 800288e:	1aaa      	subs	r2, r5, r2
 8002890:	4094      	lsls	r4, r2
 8002892:	4323      	orrs	r3, r4
 8002894:	469a      	mov	sl, r3
 8002896:	4654      	mov	r4, sl
 8002898:	1e63      	subs	r3, r4, #1
 800289a:	419c      	sbcs	r4, r3
 800289c:	4643      	mov	r3, r8
 800289e:	4323      	orrs	r3, r4
 80028a0:	e773      	b.n	800278a <__aeabi_dsub+0x47e>
 80028a2:	4662      	mov	r2, ip
 80028a4:	431a      	orrs	r2, r3
 80028a6:	d023      	beq.n	80028f0 <__aeabi_dsub+0x5e4>
 80028a8:	000a      	movs	r2, r1
 80028aa:	433a      	orrs	r2, r7
 80028ac:	d000      	beq.n	80028b0 <__aeabi_dsub+0x5a4>
 80028ae:	e0a0      	b.n	80029f2 <__aeabi_dsub+0x6e6>
 80028b0:	4662      	mov	r2, ip
 80028b2:	08db      	lsrs	r3, r3, #3
 80028b4:	0752      	lsls	r2, r2, #29
 80028b6:	4313      	orrs	r3, r2
 80028b8:	4662      	mov	r2, ip
 80028ba:	08d4      	lsrs	r4, r2, #3
 80028bc:	e6b0      	b.n	8002620 <__aeabi_dsub+0x314>
 80028be:	000b      	movs	r3, r1
 80028c0:	433b      	orrs	r3, r7
 80028c2:	d100      	bne.n	80028c6 <__aeabi_dsub+0x5ba>
 80028c4:	e728      	b.n	8002718 <__aeabi_dsub+0x40c>
 80028c6:	08ff      	lsrs	r7, r7, #3
 80028c8:	074b      	lsls	r3, r1, #29
 80028ca:	465d      	mov	r5, fp
 80028cc:	433b      	orrs	r3, r7
 80028ce:	08cc      	lsrs	r4, r1, #3
 80028d0:	e697      	b.n	8002602 <__aeabi_dsub+0x2f6>
 80028d2:	2302      	movs	r3, #2
 80028d4:	4698      	mov	r8, r3
 80028d6:	e736      	b.n	8002746 <__aeabi_dsub+0x43a>
 80028d8:	1afc      	subs	r4, r7, r3
 80028da:	42a7      	cmp	r7, r4
 80028dc:	41bf      	sbcs	r7, r7
 80028de:	4663      	mov	r3, ip
 80028e0:	427f      	negs	r7, r7
 80028e2:	1ac9      	subs	r1, r1, r3
 80028e4:	1bcb      	subs	r3, r1, r7
 80028e6:	4699      	mov	r9, r3
 80028e8:	2301      	movs	r3, #1
 80028ea:	465d      	mov	r5, fp
 80028ec:	4698      	mov	r8, r3
 80028ee:	e55e      	b.n	80023ae <__aeabi_dsub+0xa2>
 80028f0:	074b      	lsls	r3, r1, #29
 80028f2:	08ff      	lsrs	r7, r7, #3
 80028f4:	433b      	orrs	r3, r7
 80028f6:	08cc      	lsrs	r4, r1, #3
 80028f8:	e692      	b.n	8002620 <__aeabi_dsub+0x314>
 80028fa:	1bdc      	subs	r4, r3, r7
 80028fc:	4660      	mov	r0, ip
 80028fe:	42a3      	cmp	r3, r4
 8002900:	41b6      	sbcs	r6, r6
 8002902:	1a40      	subs	r0, r0, r1
 8002904:	4276      	negs	r6, r6
 8002906:	1b80      	subs	r0, r0, r6
 8002908:	4681      	mov	r9, r0
 800290a:	0200      	lsls	r0, r0, #8
 800290c:	d560      	bpl.n	80029d0 <__aeabi_dsub+0x6c4>
 800290e:	1afc      	subs	r4, r7, r3
 8002910:	42a7      	cmp	r7, r4
 8002912:	41bf      	sbcs	r7, r7
 8002914:	4663      	mov	r3, ip
 8002916:	427f      	negs	r7, r7
 8002918:	1ac9      	subs	r1, r1, r3
 800291a:	1bcb      	subs	r3, r1, r7
 800291c:	4699      	mov	r9, r3
 800291e:	465d      	mov	r5, fp
 8002920:	e576      	b.n	8002410 <__aeabi_dsub+0x104>
 8002922:	08ff      	lsrs	r7, r7, #3
 8002924:	074b      	lsls	r3, r1, #29
 8002926:	433b      	orrs	r3, r7
 8002928:	08cc      	lsrs	r4, r1, #3
 800292a:	e667      	b.n	80025fc <__aeabi_dsub+0x2f0>
 800292c:	000a      	movs	r2, r1
 800292e:	08db      	lsrs	r3, r3, #3
 8002930:	433a      	orrs	r2, r7
 8002932:	d100      	bne.n	8002936 <__aeabi_dsub+0x62a>
 8002934:	e66f      	b.n	8002616 <__aeabi_dsub+0x30a>
 8002936:	4662      	mov	r2, ip
 8002938:	0752      	lsls	r2, r2, #29
 800293a:	4313      	orrs	r3, r2
 800293c:	4662      	mov	r2, ip
 800293e:	08d4      	lsrs	r4, r2, #3
 8002940:	2280      	movs	r2, #128	; 0x80
 8002942:	0312      	lsls	r2, r2, #12
 8002944:	4214      	tst	r4, r2
 8002946:	d007      	beq.n	8002958 <__aeabi_dsub+0x64c>
 8002948:	08c8      	lsrs	r0, r1, #3
 800294a:	4210      	tst	r0, r2
 800294c:	d104      	bne.n	8002958 <__aeabi_dsub+0x64c>
 800294e:	465d      	mov	r5, fp
 8002950:	0004      	movs	r4, r0
 8002952:	08fb      	lsrs	r3, r7, #3
 8002954:	0749      	lsls	r1, r1, #29
 8002956:	430b      	orrs	r3, r1
 8002958:	0f5a      	lsrs	r2, r3, #29
 800295a:	00db      	lsls	r3, r3, #3
 800295c:	08db      	lsrs	r3, r3, #3
 800295e:	0752      	lsls	r2, r2, #29
 8002960:	4313      	orrs	r3, r2
 8002962:	e65d      	b.n	8002620 <__aeabi_dsub+0x314>
 8002964:	074b      	lsls	r3, r1, #29
 8002966:	08ff      	lsrs	r7, r7, #3
 8002968:	433b      	orrs	r3, r7
 800296a:	08cc      	lsrs	r4, r1, #3
 800296c:	e649      	b.n	8002602 <__aeabi_dsub+0x2f6>
 800296e:	19dc      	adds	r4, r3, r7
 8002970:	429c      	cmp	r4, r3
 8002972:	419b      	sbcs	r3, r3
 8002974:	4461      	add	r1, ip
 8002976:	4689      	mov	r9, r1
 8002978:	425b      	negs	r3, r3
 800297a:	4499      	add	r9, r3
 800297c:	464b      	mov	r3, r9
 800297e:	021b      	lsls	r3, r3, #8
 8002980:	d400      	bmi.n	8002984 <__aeabi_dsub+0x678>
 8002982:	e631      	b.n	80025e8 <__aeabi_dsub+0x2dc>
 8002984:	464a      	mov	r2, r9
 8002986:	4b17      	ldr	r3, [pc, #92]	; (80029e4 <__aeabi_dsub+0x6d8>)
 8002988:	401a      	ands	r2, r3
 800298a:	2301      	movs	r3, #1
 800298c:	4691      	mov	r9, r2
 800298e:	4698      	mov	r8, r3
 8002990:	e62a      	b.n	80025e8 <__aeabi_dsub+0x2dc>
 8002992:	0016      	movs	r6, r2
 8002994:	4664      	mov	r4, ip
 8002996:	3e20      	subs	r6, #32
 8002998:	40f4      	lsrs	r4, r6
 800299a:	46a0      	mov	r8, r4
 800299c:	2a20      	cmp	r2, #32
 800299e:	d005      	beq.n	80029ac <__aeabi_dsub+0x6a0>
 80029a0:	2640      	movs	r6, #64	; 0x40
 80029a2:	4664      	mov	r4, ip
 80029a4:	1ab2      	subs	r2, r6, r2
 80029a6:	4094      	lsls	r4, r2
 80029a8:	4323      	orrs	r3, r4
 80029aa:	469a      	mov	sl, r3
 80029ac:	4654      	mov	r4, sl
 80029ae:	1e63      	subs	r3, r4, #1
 80029b0:	419c      	sbcs	r4, r3
 80029b2:	4643      	mov	r3, r8
 80029b4:	431c      	orrs	r4, r3
 80029b6:	e5db      	b.n	8002570 <__aeabi_dsub+0x264>
 80029b8:	0002      	movs	r2, r0
 80029ba:	2400      	movs	r4, #0
 80029bc:	2300      	movs	r3, #0
 80029be:	e548      	b.n	8002452 <__aeabi_dsub+0x146>
 80029c0:	19dc      	adds	r4, r3, r7
 80029c2:	42bc      	cmp	r4, r7
 80029c4:	41bf      	sbcs	r7, r7
 80029c6:	4461      	add	r1, ip
 80029c8:	4689      	mov	r9, r1
 80029ca:	427f      	negs	r7, r7
 80029cc:	44b9      	add	r9, r7
 80029ce:	e738      	b.n	8002842 <__aeabi_dsub+0x536>
 80029d0:	464b      	mov	r3, r9
 80029d2:	4323      	orrs	r3, r4
 80029d4:	d100      	bne.n	80029d8 <__aeabi_dsub+0x6cc>
 80029d6:	e69f      	b.n	8002718 <__aeabi_dsub+0x40c>
 80029d8:	e606      	b.n	80025e8 <__aeabi_dsub+0x2dc>
 80029da:	46c0      	nop			; (mov r8, r8)
 80029dc:	000007fe 	.word	0x000007fe
 80029e0:	000007ff 	.word	0x000007ff
 80029e4:	ff7fffff 	.word	0xff7fffff
 80029e8:	08ff      	lsrs	r7, r7, #3
 80029ea:	074b      	lsls	r3, r1, #29
 80029ec:	433b      	orrs	r3, r7
 80029ee:	08cc      	lsrs	r4, r1, #3
 80029f0:	e616      	b.n	8002620 <__aeabi_dsub+0x314>
 80029f2:	4662      	mov	r2, ip
 80029f4:	08db      	lsrs	r3, r3, #3
 80029f6:	0752      	lsls	r2, r2, #29
 80029f8:	4313      	orrs	r3, r2
 80029fa:	4662      	mov	r2, ip
 80029fc:	08d4      	lsrs	r4, r2, #3
 80029fe:	2280      	movs	r2, #128	; 0x80
 8002a00:	0312      	lsls	r2, r2, #12
 8002a02:	4214      	tst	r4, r2
 8002a04:	d007      	beq.n	8002a16 <__aeabi_dsub+0x70a>
 8002a06:	08c8      	lsrs	r0, r1, #3
 8002a08:	4210      	tst	r0, r2
 8002a0a:	d104      	bne.n	8002a16 <__aeabi_dsub+0x70a>
 8002a0c:	465d      	mov	r5, fp
 8002a0e:	0004      	movs	r4, r0
 8002a10:	08fb      	lsrs	r3, r7, #3
 8002a12:	0749      	lsls	r1, r1, #29
 8002a14:	430b      	orrs	r3, r1
 8002a16:	0f5a      	lsrs	r2, r3, #29
 8002a18:	00db      	lsls	r3, r3, #3
 8002a1a:	0752      	lsls	r2, r2, #29
 8002a1c:	08db      	lsrs	r3, r3, #3
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	e5fe      	b.n	8002620 <__aeabi_dsub+0x314>
 8002a22:	2300      	movs	r3, #0
 8002a24:	4a01      	ldr	r2, [pc, #4]	; (8002a2c <__aeabi_dsub+0x720>)
 8002a26:	001c      	movs	r4, r3
 8002a28:	e513      	b.n	8002452 <__aeabi_dsub+0x146>
 8002a2a:	46c0      	nop			; (mov r8, r8)
 8002a2c:	000007ff 	.word	0x000007ff

08002a30 <__aeabi_dcmpun>:
 8002a30:	b570      	push	{r4, r5, r6, lr}
 8002a32:	0005      	movs	r5, r0
 8002a34:	480c      	ldr	r0, [pc, #48]	; (8002a68 <__aeabi_dcmpun+0x38>)
 8002a36:	031c      	lsls	r4, r3, #12
 8002a38:	0016      	movs	r6, r2
 8002a3a:	005b      	lsls	r3, r3, #1
 8002a3c:	030a      	lsls	r2, r1, #12
 8002a3e:	0049      	lsls	r1, r1, #1
 8002a40:	0b12      	lsrs	r2, r2, #12
 8002a42:	0d49      	lsrs	r1, r1, #21
 8002a44:	0b24      	lsrs	r4, r4, #12
 8002a46:	0d5b      	lsrs	r3, r3, #21
 8002a48:	4281      	cmp	r1, r0
 8002a4a:	d008      	beq.n	8002a5e <__aeabi_dcmpun+0x2e>
 8002a4c:	4a06      	ldr	r2, [pc, #24]	; (8002a68 <__aeabi_dcmpun+0x38>)
 8002a4e:	2000      	movs	r0, #0
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d103      	bne.n	8002a5c <__aeabi_dcmpun+0x2c>
 8002a54:	0020      	movs	r0, r4
 8002a56:	4330      	orrs	r0, r6
 8002a58:	1e43      	subs	r3, r0, #1
 8002a5a:	4198      	sbcs	r0, r3
 8002a5c:	bd70      	pop	{r4, r5, r6, pc}
 8002a5e:	2001      	movs	r0, #1
 8002a60:	432a      	orrs	r2, r5
 8002a62:	d1fb      	bne.n	8002a5c <__aeabi_dcmpun+0x2c>
 8002a64:	e7f2      	b.n	8002a4c <__aeabi_dcmpun+0x1c>
 8002a66:	46c0      	nop			; (mov r8, r8)
 8002a68:	000007ff 	.word	0x000007ff

08002a6c <__aeabi_d2iz>:
 8002a6c:	000a      	movs	r2, r1
 8002a6e:	b530      	push	{r4, r5, lr}
 8002a70:	4c13      	ldr	r4, [pc, #76]	; (8002ac0 <__aeabi_d2iz+0x54>)
 8002a72:	0053      	lsls	r3, r2, #1
 8002a74:	0309      	lsls	r1, r1, #12
 8002a76:	0005      	movs	r5, r0
 8002a78:	0b09      	lsrs	r1, r1, #12
 8002a7a:	2000      	movs	r0, #0
 8002a7c:	0d5b      	lsrs	r3, r3, #21
 8002a7e:	0fd2      	lsrs	r2, r2, #31
 8002a80:	42a3      	cmp	r3, r4
 8002a82:	dd04      	ble.n	8002a8e <__aeabi_d2iz+0x22>
 8002a84:	480f      	ldr	r0, [pc, #60]	; (8002ac4 <__aeabi_d2iz+0x58>)
 8002a86:	4283      	cmp	r3, r0
 8002a88:	dd02      	ble.n	8002a90 <__aeabi_d2iz+0x24>
 8002a8a:	4b0f      	ldr	r3, [pc, #60]	; (8002ac8 <__aeabi_d2iz+0x5c>)
 8002a8c:	18d0      	adds	r0, r2, r3
 8002a8e:	bd30      	pop	{r4, r5, pc}
 8002a90:	2080      	movs	r0, #128	; 0x80
 8002a92:	0340      	lsls	r0, r0, #13
 8002a94:	4301      	orrs	r1, r0
 8002a96:	480d      	ldr	r0, [pc, #52]	; (8002acc <__aeabi_d2iz+0x60>)
 8002a98:	1ac0      	subs	r0, r0, r3
 8002a9a:	281f      	cmp	r0, #31
 8002a9c:	dd08      	ble.n	8002ab0 <__aeabi_d2iz+0x44>
 8002a9e:	480c      	ldr	r0, [pc, #48]	; (8002ad0 <__aeabi_d2iz+0x64>)
 8002aa0:	1ac3      	subs	r3, r0, r3
 8002aa2:	40d9      	lsrs	r1, r3
 8002aa4:	000b      	movs	r3, r1
 8002aa6:	4258      	negs	r0, r3
 8002aa8:	2a00      	cmp	r2, #0
 8002aaa:	d1f0      	bne.n	8002a8e <__aeabi_d2iz+0x22>
 8002aac:	0018      	movs	r0, r3
 8002aae:	e7ee      	b.n	8002a8e <__aeabi_d2iz+0x22>
 8002ab0:	4c08      	ldr	r4, [pc, #32]	; (8002ad4 <__aeabi_d2iz+0x68>)
 8002ab2:	40c5      	lsrs	r5, r0
 8002ab4:	46a4      	mov	ip, r4
 8002ab6:	4463      	add	r3, ip
 8002ab8:	4099      	lsls	r1, r3
 8002aba:	000b      	movs	r3, r1
 8002abc:	432b      	orrs	r3, r5
 8002abe:	e7f2      	b.n	8002aa6 <__aeabi_d2iz+0x3a>
 8002ac0:	000003fe 	.word	0x000003fe
 8002ac4:	0000041d 	.word	0x0000041d
 8002ac8:	7fffffff 	.word	0x7fffffff
 8002acc:	00000433 	.word	0x00000433
 8002ad0:	00000413 	.word	0x00000413
 8002ad4:	fffffbed 	.word	0xfffffbed

08002ad8 <__aeabi_i2d>:
 8002ad8:	b570      	push	{r4, r5, r6, lr}
 8002ada:	2800      	cmp	r0, #0
 8002adc:	d016      	beq.n	8002b0c <__aeabi_i2d+0x34>
 8002ade:	17c3      	asrs	r3, r0, #31
 8002ae0:	18c5      	adds	r5, r0, r3
 8002ae2:	405d      	eors	r5, r3
 8002ae4:	0fc4      	lsrs	r4, r0, #31
 8002ae6:	0028      	movs	r0, r5
 8002ae8:	f000 f91c 	bl	8002d24 <__clzsi2>
 8002aec:	4a11      	ldr	r2, [pc, #68]	; (8002b34 <__aeabi_i2d+0x5c>)
 8002aee:	1a12      	subs	r2, r2, r0
 8002af0:	280a      	cmp	r0, #10
 8002af2:	dc16      	bgt.n	8002b22 <__aeabi_i2d+0x4a>
 8002af4:	0003      	movs	r3, r0
 8002af6:	002e      	movs	r6, r5
 8002af8:	3315      	adds	r3, #21
 8002afa:	409e      	lsls	r6, r3
 8002afc:	230b      	movs	r3, #11
 8002afe:	1a18      	subs	r0, r3, r0
 8002b00:	40c5      	lsrs	r5, r0
 8002b02:	0552      	lsls	r2, r2, #21
 8002b04:	032d      	lsls	r5, r5, #12
 8002b06:	0b2d      	lsrs	r5, r5, #12
 8002b08:	0d53      	lsrs	r3, r2, #21
 8002b0a:	e003      	b.n	8002b14 <__aeabi_i2d+0x3c>
 8002b0c:	2400      	movs	r4, #0
 8002b0e:	2300      	movs	r3, #0
 8002b10:	2500      	movs	r5, #0
 8002b12:	2600      	movs	r6, #0
 8002b14:	051b      	lsls	r3, r3, #20
 8002b16:	432b      	orrs	r3, r5
 8002b18:	07e4      	lsls	r4, r4, #31
 8002b1a:	4323      	orrs	r3, r4
 8002b1c:	0030      	movs	r0, r6
 8002b1e:	0019      	movs	r1, r3
 8002b20:	bd70      	pop	{r4, r5, r6, pc}
 8002b22:	380b      	subs	r0, #11
 8002b24:	4085      	lsls	r5, r0
 8002b26:	0552      	lsls	r2, r2, #21
 8002b28:	032d      	lsls	r5, r5, #12
 8002b2a:	2600      	movs	r6, #0
 8002b2c:	0b2d      	lsrs	r5, r5, #12
 8002b2e:	0d53      	lsrs	r3, r2, #21
 8002b30:	e7f0      	b.n	8002b14 <__aeabi_i2d+0x3c>
 8002b32:	46c0      	nop			; (mov r8, r8)
 8002b34:	0000041e 	.word	0x0000041e

08002b38 <__aeabi_ui2d>:
 8002b38:	b510      	push	{r4, lr}
 8002b3a:	1e04      	subs	r4, r0, #0
 8002b3c:	d010      	beq.n	8002b60 <__aeabi_ui2d+0x28>
 8002b3e:	f000 f8f1 	bl	8002d24 <__clzsi2>
 8002b42:	4b0f      	ldr	r3, [pc, #60]	; (8002b80 <__aeabi_ui2d+0x48>)
 8002b44:	1a1b      	subs	r3, r3, r0
 8002b46:	280a      	cmp	r0, #10
 8002b48:	dc11      	bgt.n	8002b6e <__aeabi_ui2d+0x36>
 8002b4a:	220b      	movs	r2, #11
 8002b4c:	0021      	movs	r1, r4
 8002b4e:	1a12      	subs	r2, r2, r0
 8002b50:	40d1      	lsrs	r1, r2
 8002b52:	3015      	adds	r0, #21
 8002b54:	030a      	lsls	r2, r1, #12
 8002b56:	055b      	lsls	r3, r3, #21
 8002b58:	4084      	lsls	r4, r0
 8002b5a:	0b12      	lsrs	r2, r2, #12
 8002b5c:	0d5b      	lsrs	r3, r3, #21
 8002b5e:	e001      	b.n	8002b64 <__aeabi_ui2d+0x2c>
 8002b60:	2300      	movs	r3, #0
 8002b62:	2200      	movs	r2, #0
 8002b64:	051b      	lsls	r3, r3, #20
 8002b66:	4313      	orrs	r3, r2
 8002b68:	0020      	movs	r0, r4
 8002b6a:	0019      	movs	r1, r3
 8002b6c:	bd10      	pop	{r4, pc}
 8002b6e:	0022      	movs	r2, r4
 8002b70:	380b      	subs	r0, #11
 8002b72:	4082      	lsls	r2, r0
 8002b74:	055b      	lsls	r3, r3, #21
 8002b76:	0312      	lsls	r2, r2, #12
 8002b78:	2400      	movs	r4, #0
 8002b7a:	0b12      	lsrs	r2, r2, #12
 8002b7c:	0d5b      	lsrs	r3, r3, #21
 8002b7e:	e7f1      	b.n	8002b64 <__aeabi_ui2d+0x2c>
 8002b80:	0000041e 	.word	0x0000041e

08002b84 <__aeabi_f2d>:
 8002b84:	b570      	push	{r4, r5, r6, lr}
 8002b86:	0043      	lsls	r3, r0, #1
 8002b88:	0246      	lsls	r6, r0, #9
 8002b8a:	0fc4      	lsrs	r4, r0, #31
 8002b8c:	20fe      	movs	r0, #254	; 0xfe
 8002b8e:	0e1b      	lsrs	r3, r3, #24
 8002b90:	1c59      	adds	r1, r3, #1
 8002b92:	0a75      	lsrs	r5, r6, #9
 8002b94:	4208      	tst	r0, r1
 8002b96:	d00c      	beq.n	8002bb2 <__aeabi_f2d+0x2e>
 8002b98:	22e0      	movs	r2, #224	; 0xe0
 8002b9a:	0092      	lsls	r2, r2, #2
 8002b9c:	4694      	mov	ip, r2
 8002b9e:	076d      	lsls	r5, r5, #29
 8002ba0:	0b36      	lsrs	r6, r6, #12
 8002ba2:	4463      	add	r3, ip
 8002ba4:	051b      	lsls	r3, r3, #20
 8002ba6:	4333      	orrs	r3, r6
 8002ba8:	07e4      	lsls	r4, r4, #31
 8002baa:	4323      	orrs	r3, r4
 8002bac:	0028      	movs	r0, r5
 8002bae:	0019      	movs	r1, r3
 8002bb0:	bd70      	pop	{r4, r5, r6, pc}
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d114      	bne.n	8002be0 <__aeabi_f2d+0x5c>
 8002bb6:	2d00      	cmp	r5, #0
 8002bb8:	d01b      	beq.n	8002bf2 <__aeabi_f2d+0x6e>
 8002bba:	0028      	movs	r0, r5
 8002bbc:	f000 f8b2 	bl	8002d24 <__clzsi2>
 8002bc0:	280a      	cmp	r0, #10
 8002bc2:	dc1c      	bgt.n	8002bfe <__aeabi_f2d+0x7a>
 8002bc4:	230b      	movs	r3, #11
 8002bc6:	002e      	movs	r6, r5
 8002bc8:	1a1b      	subs	r3, r3, r0
 8002bca:	40de      	lsrs	r6, r3
 8002bcc:	0003      	movs	r3, r0
 8002bce:	3315      	adds	r3, #21
 8002bd0:	409d      	lsls	r5, r3
 8002bd2:	4a0e      	ldr	r2, [pc, #56]	; (8002c0c <__aeabi_f2d+0x88>)
 8002bd4:	0336      	lsls	r6, r6, #12
 8002bd6:	1a12      	subs	r2, r2, r0
 8002bd8:	0552      	lsls	r2, r2, #21
 8002bda:	0b36      	lsrs	r6, r6, #12
 8002bdc:	0d53      	lsrs	r3, r2, #21
 8002bde:	e7e1      	b.n	8002ba4 <__aeabi_f2d+0x20>
 8002be0:	2d00      	cmp	r5, #0
 8002be2:	d009      	beq.n	8002bf8 <__aeabi_f2d+0x74>
 8002be4:	2280      	movs	r2, #128	; 0x80
 8002be6:	0b36      	lsrs	r6, r6, #12
 8002be8:	0312      	lsls	r2, r2, #12
 8002bea:	4b09      	ldr	r3, [pc, #36]	; (8002c10 <__aeabi_f2d+0x8c>)
 8002bec:	076d      	lsls	r5, r5, #29
 8002bee:	4316      	orrs	r6, r2
 8002bf0:	e7d8      	b.n	8002ba4 <__aeabi_f2d+0x20>
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	2600      	movs	r6, #0
 8002bf6:	e7d5      	b.n	8002ba4 <__aeabi_f2d+0x20>
 8002bf8:	2600      	movs	r6, #0
 8002bfa:	4b05      	ldr	r3, [pc, #20]	; (8002c10 <__aeabi_f2d+0x8c>)
 8002bfc:	e7d2      	b.n	8002ba4 <__aeabi_f2d+0x20>
 8002bfe:	0003      	movs	r3, r0
 8002c00:	3b0b      	subs	r3, #11
 8002c02:	409d      	lsls	r5, r3
 8002c04:	002e      	movs	r6, r5
 8002c06:	2500      	movs	r5, #0
 8002c08:	e7e3      	b.n	8002bd2 <__aeabi_f2d+0x4e>
 8002c0a:	46c0      	nop			; (mov r8, r8)
 8002c0c:	00000389 	.word	0x00000389
 8002c10:	000007ff 	.word	0x000007ff

08002c14 <__aeabi_d2f>:
 8002c14:	0002      	movs	r2, r0
 8002c16:	004b      	lsls	r3, r1, #1
 8002c18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c1a:	0d5b      	lsrs	r3, r3, #21
 8002c1c:	030c      	lsls	r4, r1, #12
 8002c1e:	4e3d      	ldr	r6, [pc, #244]	; (8002d14 <__aeabi_d2f+0x100>)
 8002c20:	0a64      	lsrs	r4, r4, #9
 8002c22:	0f40      	lsrs	r0, r0, #29
 8002c24:	1c5f      	adds	r7, r3, #1
 8002c26:	0fc9      	lsrs	r1, r1, #31
 8002c28:	4304      	orrs	r4, r0
 8002c2a:	00d5      	lsls	r5, r2, #3
 8002c2c:	4237      	tst	r7, r6
 8002c2e:	d00a      	beq.n	8002c46 <__aeabi_d2f+0x32>
 8002c30:	4839      	ldr	r0, [pc, #228]	; (8002d18 <__aeabi_d2f+0x104>)
 8002c32:	181e      	adds	r6, r3, r0
 8002c34:	2efe      	cmp	r6, #254	; 0xfe
 8002c36:	dd16      	ble.n	8002c66 <__aeabi_d2f+0x52>
 8002c38:	20ff      	movs	r0, #255	; 0xff
 8002c3a:	2400      	movs	r4, #0
 8002c3c:	05c0      	lsls	r0, r0, #23
 8002c3e:	4320      	orrs	r0, r4
 8002c40:	07c9      	lsls	r1, r1, #31
 8002c42:	4308      	orrs	r0, r1
 8002c44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d106      	bne.n	8002c58 <__aeabi_d2f+0x44>
 8002c4a:	432c      	orrs	r4, r5
 8002c4c:	d026      	beq.n	8002c9c <__aeabi_d2f+0x88>
 8002c4e:	2205      	movs	r2, #5
 8002c50:	0192      	lsls	r2, r2, #6
 8002c52:	0a54      	lsrs	r4, r2, #9
 8002c54:	b2d8      	uxtb	r0, r3
 8002c56:	e7f1      	b.n	8002c3c <__aeabi_d2f+0x28>
 8002c58:	4325      	orrs	r5, r4
 8002c5a:	d0ed      	beq.n	8002c38 <__aeabi_d2f+0x24>
 8002c5c:	2080      	movs	r0, #128	; 0x80
 8002c5e:	03c0      	lsls	r0, r0, #15
 8002c60:	4304      	orrs	r4, r0
 8002c62:	20ff      	movs	r0, #255	; 0xff
 8002c64:	e7ea      	b.n	8002c3c <__aeabi_d2f+0x28>
 8002c66:	2e00      	cmp	r6, #0
 8002c68:	dd1b      	ble.n	8002ca2 <__aeabi_d2f+0x8e>
 8002c6a:	0192      	lsls	r2, r2, #6
 8002c6c:	1e53      	subs	r3, r2, #1
 8002c6e:	419a      	sbcs	r2, r3
 8002c70:	00e4      	lsls	r4, r4, #3
 8002c72:	0f6d      	lsrs	r5, r5, #29
 8002c74:	4322      	orrs	r2, r4
 8002c76:	432a      	orrs	r2, r5
 8002c78:	0753      	lsls	r3, r2, #29
 8002c7a:	d048      	beq.n	8002d0e <__aeabi_d2f+0xfa>
 8002c7c:	230f      	movs	r3, #15
 8002c7e:	4013      	ands	r3, r2
 8002c80:	2b04      	cmp	r3, #4
 8002c82:	d000      	beq.n	8002c86 <__aeabi_d2f+0x72>
 8002c84:	3204      	adds	r2, #4
 8002c86:	2380      	movs	r3, #128	; 0x80
 8002c88:	04db      	lsls	r3, r3, #19
 8002c8a:	4013      	ands	r3, r2
 8002c8c:	d03f      	beq.n	8002d0e <__aeabi_d2f+0xfa>
 8002c8e:	1c70      	adds	r0, r6, #1
 8002c90:	2efe      	cmp	r6, #254	; 0xfe
 8002c92:	d0d1      	beq.n	8002c38 <__aeabi_d2f+0x24>
 8002c94:	0192      	lsls	r2, r2, #6
 8002c96:	0a54      	lsrs	r4, r2, #9
 8002c98:	b2c0      	uxtb	r0, r0
 8002c9a:	e7cf      	b.n	8002c3c <__aeabi_d2f+0x28>
 8002c9c:	2000      	movs	r0, #0
 8002c9e:	2400      	movs	r4, #0
 8002ca0:	e7cc      	b.n	8002c3c <__aeabi_d2f+0x28>
 8002ca2:	0032      	movs	r2, r6
 8002ca4:	3217      	adds	r2, #23
 8002ca6:	db22      	blt.n	8002cee <__aeabi_d2f+0xda>
 8002ca8:	2080      	movs	r0, #128	; 0x80
 8002caa:	0400      	lsls	r0, r0, #16
 8002cac:	4320      	orrs	r0, r4
 8002cae:	241e      	movs	r4, #30
 8002cb0:	1ba4      	subs	r4, r4, r6
 8002cb2:	2c1f      	cmp	r4, #31
 8002cb4:	dd1d      	ble.n	8002cf2 <__aeabi_d2f+0xde>
 8002cb6:	2202      	movs	r2, #2
 8002cb8:	4252      	negs	r2, r2
 8002cba:	1b96      	subs	r6, r2, r6
 8002cbc:	0002      	movs	r2, r0
 8002cbe:	40f2      	lsrs	r2, r6
 8002cc0:	0016      	movs	r6, r2
 8002cc2:	2c20      	cmp	r4, #32
 8002cc4:	d004      	beq.n	8002cd0 <__aeabi_d2f+0xbc>
 8002cc6:	4a15      	ldr	r2, [pc, #84]	; (8002d1c <__aeabi_d2f+0x108>)
 8002cc8:	4694      	mov	ip, r2
 8002cca:	4463      	add	r3, ip
 8002ccc:	4098      	lsls	r0, r3
 8002cce:	4305      	orrs	r5, r0
 8002cd0:	002a      	movs	r2, r5
 8002cd2:	1e53      	subs	r3, r2, #1
 8002cd4:	419a      	sbcs	r2, r3
 8002cd6:	4332      	orrs	r2, r6
 8002cd8:	2600      	movs	r6, #0
 8002cda:	0753      	lsls	r3, r2, #29
 8002cdc:	d1ce      	bne.n	8002c7c <__aeabi_d2f+0x68>
 8002cde:	2480      	movs	r4, #128	; 0x80
 8002ce0:	0013      	movs	r3, r2
 8002ce2:	04e4      	lsls	r4, r4, #19
 8002ce4:	2001      	movs	r0, #1
 8002ce6:	4023      	ands	r3, r4
 8002ce8:	4222      	tst	r2, r4
 8002cea:	d1d3      	bne.n	8002c94 <__aeabi_d2f+0x80>
 8002cec:	e7b0      	b.n	8002c50 <__aeabi_d2f+0x3c>
 8002cee:	2300      	movs	r3, #0
 8002cf0:	e7ad      	b.n	8002c4e <__aeabi_d2f+0x3a>
 8002cf2:	4a0b      	ldr	r2, [pc, #44]	; (8002d20 <__aeabi_d2f+0x10c>)
 8002cf4:	4694      	mov	ip, r2
 8002cf6:	002a      	movs	r2, r5
 8002cf8:	40e2      	lsrs	r2, r4
 8002cfa:	0014      	movs	r4, r2
 8002cfc:	002a      	movs	r2, r5
 8002cfe:	4463      	add	r3, ip
 8002d00:	409a      	lsls	r2, r3
 8002d02:	4098      	lsls	r0, r3
 8002d04:	1e55      	subs	r5, r2, #1
 8002d06:	41aa      	sbcs	r2, r5
 8002d08:	4302      	orrs	r2, r0
 8002d0a:	4322      	orrs	r2, r4
 8002d0c:	e7e4      	b.n	8002cd8 <__aeabi_d2f+0xc4>
 8002d0e:	0033      	movs	r3, r6
 8002d10:	e79e      	b.n	8002c50 <__aeabi_d2f+0x3c>
 8002d12:	46c0      	nop			; (mov r8, r8)
 8002d14:	000007fe 	.word	0x000007fe
 8002d18:	fffffc80 	.word	0xfffffc80
 8002d1c:	fffffca2 	.word	0xfffffca2
 8002d20:	fffffc82 	.word	0xfffffc82

08002d24 <__clzsi2>:
 8002d24:	211c      	movs	r1, #28
 8002d26:	2301      	movs	r3, #1
 8002d28:	041b      	lsls	r3, r3, #16
 8002d2a:	4298      	cmp	r0, r3
 8002d2c:	d301      	bcc.n	8002d32 <__clzsi2+0xe>
 8002d2e:	0c00      	lsrs	r0, r0, #16
 8002d30:	3910      	subs	r1, #16
 8002d32:	0a1b      	lsrs	r3, r3, #8
 8002d34:	4298      	cmp	r0, r3
 8002d36:	d301      	bcc.n	8002d3c <__clzsi2+0x18>
 8002d38:	0a00      	lsrs	r0, r0, #8
 8002d3a:	3908      	subs	r1, #8
 8002d3c:	091b      	lsrs	r3, r3, #4
 8002d3e:	4298      	cmp	r0, r3
 8002d40:	d301      	bcc.n	8002d46 <__clzsi2+0x22>
 8002d42:	0900      	lsrs	r0, r0, #4
 8002d44:	3904      	subs	r1, #4
 8002d46:	a202      	add	r2, pc, #8	; (adr r2, 8002d50 <__clzsi2+0x2c>)
 8002d48:	5c10      	ldrb	r0, [r2, r0]
 8002d4a:	1840      	adds	r0, r0, r1
 8002d4c:	4770      	bx	lr
 8002d4e:	46c0      	nop			; (mov r8, r8)
 8002d50:	02020304 	.word	0x02020304
 8002d54:	01010101 	.word	0x01010101
	...

08002d60 <__clzdi2>:
 8002d60:	b510      	push	{r4, lr}
 8002d62:	2900      	cmp	r1, #0
 8002d64:	d103      	bne.n	8002d6e <__clzdi2+0xe>
 8002d66:	f7ff ffdd 	bl	8002d24 <__clzsi2>
 8002d6a:	3020      	adds	r0, #32
 8002d6c:	e002      	b.n	8002d74 <__clzdi2+0x14>
 8002d6e:	0008      	movs	r0, r1
 8002d70:	f7ff ffd8 	bl	8002d24 <__clzsi2>
 8002d74:	bd10      	pop	{r4, pc}
 8002d76:	46c0      	nop			; (mov r8, r8)

08002d78 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002d78:	b590      	push	{r4, r7, lr}
 8002d7a:	b089      	sub	sp, #36	; 0x24
 8002d7c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d7e:	240c      	movs	r4, #12
 8002d80:	193b      	adds	r3, r7, r4
 8002d82:	0018      	movs	r0, r3
 8002d84:	2314      	movs	r3, #20
 8002d86:	001a      	movs	r2, r3
 8002d88:	2100      	movs	r1, #0
 8002d8a:	f003 f981 	bl	8006090 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d8e:	4b28      	ldr	r3, [pc, #160]	; (8002e30 <MX_GPIO_Init+0xb8>)
 8002d90:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d92:	4b27      	ldr	r3, [pc, #156]	; (8002e30 <MX_GPIO_Init+0xb8>)
 8002d94:	2104      	movs	r1, #4
 8002d96:	430a      	orrs	r2, r1
 8002d98:	635a      	str	r2, [r3, #52]	; 0x34
 8002d9a:	4b25      	ldr	r3, [pc, #148]	; (8002e30 <MX_GPIO_Init+0xb8>)
 8002d9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d9e:	2204      	movs	r2, #4
 8002da0:	4013      	ands	r3, r2
 8002da2:	60bb      	str	r3, [r7, #8]
 8002da4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002da6:	4b22      	ldr	r3, [pc, #136]	; (8002e30 <MX_GPIO_Init+0xb8>)
 8002da8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002daa:	4b21      	ldr	r3, [pc, #132]	; (8002e30 <MX_GPIO_Init+0xb8>)
 8002dac:	2120      	movs	r1, #32
 8002dae:	430a      	orrs	r2, r1
 8002db0:	635a      	str	r2, [r3, #52]	; 0x34
 8002db2:	4b1f      	ldr	r3, [pc, #124]	; (8002e30 <MX_GPIO_Init+0xb8>)
 8002db4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002db6:	2220      	movs	r2, #32
 8002db8:	4013      	ands	r3, r2
 8002dba:	607b      	str	r3, [r7, #4]
 8002dbc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002dbe:	4b1c      	ldr	r3, [pc, #112]	; (8002e30 <MX_GPIO_Init+0xb8>)
 8002dc0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002dc2:	4b1b      	ldr	r3, [pc, #108]	; (8002e30 <MX_GPIO_Init+0xb8>)
 8002dc4:	2101      	movs	r1, #1
 8002dc6:	430a      	orrs	r2, r1
 8002dc8:	635a      	str	r2, [r3, #52]	; 0x34
 8002dca:	4b19      	ldr	r3, [pc, #100]	; (8002e30 <MX_GPIO_Init+0xb8>)
 8002dcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dce:	2201      	movs	r2, #1
 8002dd0:	4013      	ands	r3, r2
 8002dd2:	603b      	str	r3, [r7, #0]
 8002dd4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8002dd6:	4b17      	ldr	r3, [pc, #92]	; (8002e34 <MX_GPIO_Init+0xbc>)
 8002dd8:	2200      	movs	r2, #0
 8002dda:	2140      	movs	r1, #64	; 0x40
 8002ddc:	0018      	movs	r0, r3
 8002dde:	f000 ff83 	bl	8003ce8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = T_NRST_Pin;
 8002de2:	193b      	adds	r3, r7, r4
 8002de4:	2204      	movs	r2, #4
 8002de6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002de8:	193b      	adds	r3, r7, r4
 8002dea:	2288      	movs	r2, #136	; 0x88
 8002dec:	0352      	lsls	r2, r2, #13
 8002dee:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002df0:	193b      	adds	r3, r7, r4
 8002df2:	2200      	movs	r2, #0
 8002df4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(T_NRST_GPIO_Port, &GPIO_InitStruct);
 8002df6:	193b      	adds	r3, r7, r4
 8002df8:	4a0f      	ldr	r2, [pc, #60]	; (8002e38 <MX_GPIO_Init+0xc0>)
 8002dfa:	0019      	movs	r1, r3
 8002dfc:	0010      	movs	r0, r2
 8002dfe:	f000 fe0f 	bl	8003a20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8002e02:	0021      	movs	r1, r4
 8002e04:	187b      	adds	r3, r7, r1
 8002e06:	2240      	movs	r2, #64	; 0x40
 8002e08:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e0a:	187b      	adds	r3, r7, r1
 8002e0c:	2201      	movs	r2, #1
 8002e0e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e10:	187b      	adds	r3, r7, r1
 8002e12:	2200      	movs	r2, #0
 8002e14:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e16:	187b      	adds	r3, r7, r1
 8002e18:	2200      	movs	r2, #0
 8002e1a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8002e1c:	187b      	adds	r3, r7, r1
 8002e1e:	4a05      	ldr	r2, [pc, #20]	; (8002e34 <MX_GPIO_Init+0xbc>)
 8002e20:	0019      	movs	r1, r3
 8002e22:	0010      	movs	r0, r2
 8002e24:	f000 fdfc 	bl	8003a20 <HAL_GPIO_Init>

}
 8002e28:	46c0      	nop			; (mov r8, r8)
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	b009      	add	sp, #36	; 0x24
 8002e2e:	bd90      	pop	{r4, r7, pc}
 8002e30:	40021000 	.word	0x40021000
 8002e34:	50000800 	.word	0x50000800
 8002e38:	50001400 	.word	0x50001400

08002e3c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002e40:	4b1b      	ldr	r3, [pc, #108]	; (8002eb0 <MX_I2C1_Init+0x74>)
 8002e42:	4a1c      	ldr	r2, [pc, #112]	; (8002eb4 <MX_I2C1_Init+0x78>)
 8002e44:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00303D5B;
 8002e46:	4b1a      	ldr	r3, [pc, #104]	; (8002eb0 <MX_I2C1_Init+0x74>)
 8002e48:	4a1b      	ldr	r2, [pc, #108]	; (8002eb8 <MX_I2C1_Init+0x7c>)
 8002e4a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002e4c:	4b18      	ldr	r3, [pc, #96]	; (8002eb0 <MX_I2C1_Init+0x74>)
 8002e4e:	2200      	movs	r2, #0
 8002e50:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002e52:	4b17      	ldr	r3, [pc, #92]	; (8002eb0 <MX_I2C1_Init+0x74>)
 8002e54:	2201      	movs	r2, #1
 8002e56:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002e58:	4b15      	ldr	r3, [pc, #84]	; (8002eb0 <MX_I2C1_Init+0x74>)
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002e5e:	4b14      	ldr	r3, [pc, #80]	; (8002eb0 <MX_I2C1_Init+0x74>)
 8002e60:	2200      	movs	r2, #0
 8002e62:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002e64:	4b12      	ldr	r3, [pc, #72]	; (8002eb0 <MX_I2C1_Init+0x74>)
 8002e66:	2200      	movs	r2, #0
 8002e68:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002e6a:	4b11      	ldr	r3, [pc, #68]	; (8002eb0 <MX_I2C1_Init+0x74>)
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002e70:	4b0f      	ldr	r3, [pc, #60]	; (8002eb0 <MX_I2C1_Init+0x74>)
 8002e72:	2200      	movs	r2, #0
 8002e74:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002e76:	4b0e      	ldr	r3, [pc, #56]	; (8002eb0 <MX_I2C1_Init+0x74>)
 8002e78:	0018      	movs	r0, r3
 8002e7a:	f000 ff53 	bl	8003d24 <HAL_I2C_Init>
 8002e7e:	1e03      	subs	r3, r0, #0
 8002e80:	d001      	beq.n	8002e86 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002e82:	f000 f8d6 	bl	8003032 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002e86:	4b0a      	ldr	r3, [pc, #40]	; (8002eb0 <MX_I2C1_Init+0x74>)
 8002e88:	2100      	movs	r1, #0
 8002e8a:	0018      	movs	r0, r3
 8002e8c:	f001 fc80 	bl	8004790 <HAL_I2CEx_ConfigAnalogFilter>
 8002e90:	1e03      	subs	r3, r0, #0
 8002e92:	d001      	beq.n	8002e98 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002e94:	f000 f8cd 	bl	8003032 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002e98:	4b05      	ldr	r3, [pc, #20]	; (8002eb0 <MX_I2C1_Init+0x74>)
 8002e9a:	2100      	movs	r1, #0
 8002e9c:	0018      	movs	r0, r3
 8002e9e:	f001 fcc3 	bl	8004828 <HAL_I2CEx_ConfigDigitalFilter>
 8002ea2:	1e03      	subs	r3, r0, #0
 8002ea4:	d001      	beq.n	8002eaa <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002ea6:	f000 f8c4 	bl	8003032 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002eaa:	46c0      	nop			; (mov r8, r8)
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bd80      	pop	{r7, pc}
 8002eb0:	200001fc 	.word	0x200001fc
 8002eb4:	40005400 	.word	0x40005400
 8002eb8:	00303d5b 	.word	0x00303d5b

08002ebc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002ebc:	b590      	push	{r4, r7, lr}
 8002ebe:	b095      	sub	sp, #84	; 0x54
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ec4:	233c      	movs	r3, #60	; 0x3c
 8002ec6:	18fb      	adds	r3, r7, r3
 8002ec8:	0018      	movs	r0, r3
 8002eca:	2314      	movs	r3, #20
 8002ecc:	001a      	movs	r2, r3
 8002ece:	2100      	movs	r1, #0
 8002ed0:	f003 f8de 	bl	8006090 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002ed4:	2414      	movs	r4, #20
 8002ed6:	193b      	adds	r3, r7, r4
 8002ed8:	0018      	movs	r0, r3
 8002eda:	2328      	movs	r3, #40	; 0x28
 8002edc:	001a      	movs	r2, r3
 8002ede:	2100      	movs	r1, #0
 8002ee0:	f003 f8d6 	bl	8006090 <memset>
  if(i2cHandle->Instance==I2C1)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4a23      	ldr	r2, [pc, #140]	; (8002f78 <HAL_I2C_MspInit+0xbc>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d13f      	bne.n	8002f6e <HAL_I2C_MspInit+0xb2>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002eee:	193b      	adds	r3, r7, r4
 8002ef0:	2220      	movs	r2, #32
 8002ef2:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002ef4:	193b      	adds	r3, r7, r4
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002efa:	193b      	adds	r3, r7, r4
 8002efc:	0018      	movs	r0, r3
 8002efe:	f002 f9ef 	bl	80052e0 <HAL_RCCEx_PeriphCLKConfig>
 8002f02:	1e03      	subs	r3, r0, #0
 8002f04:	d001      	beq.n	8002f0a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8002f06:	f000 f894 	bl	8003032 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f0a:	4b1c      	ldr	r3, [pc, #112]	; (8002f7c <HAL_I2C_MspInit+0xc0>)
 8002f0c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f0e:	4b1b      	ldr	r3, [pc, #108]	; (8002f7c <HAL_I2C_MspInit+0xc0>)
 8002f10:	2101      	movs	r1, #1
 8002f12:	430a      	orrs	r2, r1
 8002f14:	635a      	str	r2, [r3, #52]	; 0x34
 8002f16:	4b19      	ldr	r3, [pc, #100]	; (8002f7c <HAL_I2C_MspInit+0xc0>)
 8002f18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f1a:	2201      	movs	r2, #1
 8002f1c:	4013      	ands	r3, r2
 8002f1e:	613b      	str	r3, [r7, #16]
 8002f20:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002f22:	213c      	movs	r1, #60	; 0x3c
 8002f24:	187b      	adds	r3, r7, r1
 8002f26:	22c0      	movs	r2, #192	; 0xc0
 8002f28:	00d2      	lsls	r2, r2, #3
 8002f2a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002f2c:	187b      	adds	r3, r7, r1
 8002f2e:	2212      	movs	r2, #18
 8002f30:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f32:	187b      	adds	r3, r7, r1
 8002f34:	2200      	movs	r2, #0
 8002f36:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f38:	187b      	adds	r3, r7, r1
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8002f3e:	187b      	adds	r3, r7, r1
 8002f40:	2206      	movs	r2, #6
 8002f42:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f44:	187a      	adds	r2, r7, r1
 8002f46:	23a0      	movs	r3, #160	; 0xa0
 8002f48:	05db      	lsls	r3, r3, #23
 8002f4a:	0011      	movs	r1, r2
 8002f4c:	0018      	movs	r0, r3
 8002f4e:	f000 fd67 	bl	8003a20 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002f52:	4b0a      	ldr	r3, [pc, #40]	; (8002f7c <HAL_I2C_MspInit+0xc0>)
 8002f54:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002f56:	4b09      	ldr	r3, [pc, #36]	; (8002f7c <HAL_I2C_MspInit+0xc0>)
 8002f58:	2180      	movs	r1, #128	; 0x80
 8002f5a:	0389      	lsls	r1, r1, #14
 8002f5c:	430a      	orrs	r2, r1
 8002f5e:	63da      	str	r2, [r3, #60]	; 0x3c
 8002f60:	4b06      	ldr	r3, [pc, #24]	; (8002f7c <HAL_I2C_MspInit+0xc0>)
 8002f62:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002f64:	2380      	movs	r3, #128	; 0x80
 8002f66:	039b      	lsls	r3, r3, #14
 8002f68:	4013      	ands	r3, r2
 8002f6a:	60fb      	str	r3, [r7, #12]
 8002f6c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8002f6e:	46c0      	nop			; (mov r8, r8)
 8002f70:	46bd      	mov	sp, r7
 8002f72:	b015      	add	sp, #84	; 0x54
 8002f74:	bd90      	pop	{r4, r7, pc}
 8002f76:	46c0      	nop			; (mov r8, r8)
 8002f78:	40005400 	.word	0x40005400
 8002f7c:	40021000 	.word	0x40021000

08002f80 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002f84:	f000 fc12 	bl	80037ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002f88:	f000 f80b 	bl	8002fa2 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002f8c:	f7ff fef4 	bl	8002d78 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8002f90:	f000 f952 	bl	8003238 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8002f94:	f7ff ff52 	bl	8002e3c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  FSM_init();
 8002f98:	f000 f9f6 	bl	8003388 <FSM_init>
  /* USER CODE BEGIN WHILE */
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		FSM_update();
 8002f9c:	f000 fa1e 	bl	80033dc <FSM_update>
 8002fa0:	e7fc      	b.n	8002f9c <main+0x1c>

08002fa2 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002fa2:	b590      	push	{r4, r7, lr}
 8002fa4:	b093      	sub	sp, #76	; 0x4c
 8002fa6:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002fa8:	2410      	movs	r4, #16
 8002faa:	193b      	adds	r3, r7, r4
 8002fac:	0018      	movs	r0, r3
 8002fae:	2338      	movs	r3, #56	; 0x38
 8002fb0:	001a      	movs	r2, r3
 8002fb2:	2100      	movs	r1, #0
 8002fb4:	f003 f86c 	bl	8006090 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002fb8:	003b      	movs	r3, r7
 8002fba:	0018      	movs	r0, r3
 8002fbc:	2310      	movs	r3, #16
 8002fbe:	001a      	movs	r2, r3
 8002fc0:	2100      	movs	r1, #0
 8002fc2:	f003 f865 	bl	8006090 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002fc6:	2380      	movs	r3, #128	; 0x80
 8002fc8:	009b      	lsls	r3, r3, #2
 8002fca:	0018      	movs	r0, r3
 8002fcc:	f001 fc78 	bl	80048c0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002fd0:	193b      	adds	r3, r7, r4
 8002fd2:	2202      	movs	r2, #2
 8002fd4:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002fd6:	193b      	adds	r3, r7, r4
 8002fd8:	2280      	movs	r2, #128	; 0x80
 8002fda:	0052      	lsls	r2, r2, #1
 8002fdc:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8002fde:	193b      	adds	r3, r7, r4
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002fe4:	193b      	adds	r3, r7, r4
 8002fe6:	2240      	movs	r2, #64	; 0x40
 8002fe8:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002fea:	193b      	adds	r3, r7, r4
 8002fec:	2200      	movs	r2, #0
 8002fee:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002ff0:	193b      	adds	r3, r7, r4
 8002ff2:	0018      	movs	r0, r3
 8002ff4:	f001 fcb0 	bl	8004958 <HAL_RCC_OscConfig>
 8002ff8:	1e03      	subs	r3, r0, #0
 8002ffa:	d001      	beq.n	8003000 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8002ffc:	f000 f819 	bl	8003032 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003000:	003b      	movs	r3, r7
 8003002:	2207      	movs	r2, #7
 8003004:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8003006:	003b      	movs	r3, r7
 8003008:	2200      	movs	r2, #0
 800300a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800300c:	003b      	movs	r3, r7
 800300e:	2200      	movs	r2, #0
 8003010:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003012:	003b      	movs	r3, r7
 8003014:	2200      	movs	r2, #0
 8003016:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8003018:	003b      	movs	r3, r7
 800301a:	2100      	movs	r1, #0
 800301c:	0018      	movs	r0, r3
 800301e:	f001 ffb5 	bl	8004f8c <HAL_RCC_ClockConfig>
 8003022:	1e03      	subs	r3, r0, #0
 8003024:	d001      	beq.n	800302a <SystemClock_Config+0x88>
  {
    Error_Handler();
 8003026:	f000 f804 	bl	8003032 <Error_Handler>
  }
}
 800302a:	46c0      	nop			; (mov r8, r8)
 800302c:	46bd      	mov	sp, r7
 800302e:	b013      	add	sp, #76	; 0x4c
 8003030:	bd90      	pop	{r4, r7, pc}

08003032 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003032:	b580      	push	{r7, lr}
 8003034:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003036:	b672      	cpsid	i
}
 8003038:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800303a:	e7fe      	b.n	800303a <Error_Handler+0x8>

0800303c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b082      	sub	sp, #8
 8003040:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003042:	4b0f      	ldr	r3, [pc, #60]	; (8003080 <HAL_MspInit+0x44>)
 8003044:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003046:	4b0e      	ldr	r3, [pc, #56]	; (8003080 <HAL_MspInit+0x44>)
 8003048:	2101      	movs	r1, #1
 800304a:	430a      	orrs	r2, r1
 800304c:	641a      	str	r2, [r3, #64]	; 0x40
 800304e:	4b0c      	ldr	r3, [pc, #48]	; (8003080 <HAL_MspInit+0x44>)
 8003050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003052:	2201      	movs	r2, #1
 8003054:	4013      	ands	r3, r2
 8003056:	607b      	str	r3, [r7, #4]
 8003058:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800305a:	4b09      	ldr	r3, [pc, #36]	; (8003080 <HAL_MspInit+0x44>)
 800305c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800305e:	4b08      	ldr	r3, [pc, #32]	; (8003080 <HAL_MspInit+0x44>)
 8003060:	2180      	movs	r1, #128	; 0x80
 8003062:	0549      	lsls	r1, r1, #21
 8003064:	430a      	orrs	r2, r1
 8003066:	63da      	str	r2, [r3, #60]	; 0x3c
 8003068:	4b05      	ldr	r3, [pc, #20]	; (8003080 <HAL_MspInit+0x44>)
 800306a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800306c:	2380      	movs	r3, #128	; 0x80
 800306e:	055b      	lsls	r3, r3, #21
 8003070:	4013      	ands	r3, r2
 8003072:	603b      	str	r3, [r7, #0]
 8003074:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003076:	46c0      	nop			; (mov r8, r8)
 8003078:	46bd      	mov	sp, r7
 800307a:	b002      	add	sp, #8
 800307c:	bd80      	pop	{r7, pc}
 800307e:	46c0      	nop			; (mov r8, r8)
 8003080:	40021000 	.word	0x40021000

08003084 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003088:	e7fe      	b.n	8003088 <NMI_Handler+0x4>

0800308a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800308a:	b580      	push	{r7, lr}
 800308c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800308e:	e7fe      	b.n	800308e <HardFault_Handler+0x4>

08003090 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8003094:	46c0      	nop			; (mov r8, r8)
 8003096:	46bd      	mov	sp, r7
 8003098:	bd80      	pop	{r7, pc}

0800309a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800309a:	b580      	push	{r7, lr}
 800309c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800309e:	46c0      	nop			; (mov r8, r8)
 80030a0:	46bd      	mov	sp, r7
 80030a2:	bd80      	pop	{r7, pc}

080030a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80030a8:	f000 fbea 	bl	8003880 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80030ac:	46c0      	nop			; (mov r8, r8)
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}

080030b2 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80030b2:	b580      	push	{r7, lr}
 80030b4:	af00      	add	r7, sp, #0
  return 1;
 80030b6:	2301      	movs	r3, #1
}
 80030b8:	0018      	movs	r0, r3
 80030ba:	46bd      	mov	sp, r7
 80030bc:	bd80      	pop	{r7, pc}

080030be <_kill>:

int _kill(int pid, int sig)
{
 80030be:	b580      	push	{r7, lr}
 80030c0:	b082      	sub	sp, #8
 80030c2:	af00      	add	r7, sp, #0
 80030c4:	6078      	str	r0, [r7, #4]
 80030c6:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80030c8:	f002 ffb8 	bl	800603c <__errno>
 80030cc:	0003      	movs	r3, r0
 80030ce:	2216      	movs	r2, #22
 80030d0:	601a      	str	r2, [r3, #0]
  return -1;
 80030d2:	2301      	movs	r3, #1
 80030d4:	425b      	negs	r3, r3
}
 80030d6:	0018      	movs	r0, r3
 80030d8:	46bd      	mov	sp, r7
 80030da:	b002      	add	sp, #8
 80030dc:	bd80      	pop	{r7, pc}

080030de <_exit>:

void _exit (int status)
{
 80030de:	b580      	push	{r7, lr}
 80030e0:	b082      	sub	sp, #8
 80030e2:	af00      	add	r7, sp, #0
 80030e4:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80030e6:	2301      	movs	r3, #1
 80030e8:	425a      	negs	r2, r3
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	0011      	movs	r1, r2
 80030ee:	0018      	movs	r0, r3
 80030f0:	f7ff ffe5 	bl	80030be <_kill>
  while (1) {}    /* Make sure we hang here */
 80030f4:	e7fe      	b.n	80030f4 <_exit+0x16>

080030f6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80030f6:	b580      	push	{r7, lr}
 80030f8:	b086      	sub	sp, #24
 80030fa:	af00      	add	r7, sp, #0
 80030fc:	60f8      	str	r0, [r7, #12]
 80030fe:	60b9      	str	r1, [r7, #8]
 8003100:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003102:	2300      	movs	r3, #0
 8003104:	617b      	str	r3, [r7, #20]
 8003106:	e00a      	b.n	800311e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003108:	e000      	b.n	800310c <_read+0x16>
 800310a:	bf00      	nop
 800310c:	0001      	movs	r1, r0
 800310e:	68bb      	ldr	r3, [r7, #8]
 8003110:	1c5a      	adds	r2, r3, #1
 8003112:	60ba      	str	r2, [r7, #8]
 8003114:	b2ca      	uxtb	r2, r1
 8003116:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003118:	697b      	ldr	r3, [r7, #20]
 800311a:	3301      	adds	r3, #1
 800311c:	617b      	str	r3, [r7, #20]
 800311e:	697a      	ldr	r2, [r7, #20]
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	429a      	cmp	r2, r3
 8003124:	dbf0      	blt.n	8003108 <_read+0x12>
  }

  return len;
 8003126:	687b      	ldr	r3, [r7, #4]
}
 8003128:	0018      	movs	r0, r3
 800312a:	46bd      	mov	sp, r7
 800312c:	b006      	add	sp, #24
 800312e:	bd80      	pop	{r7, pc}

08003130 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b086      	sub	sp, #24
 8003134:	af00      	add	r7, sp, #0
 8003136:	60f8      	str	r0, [r7, #12]
 8003138:	60b9      	str	r1, [r7, #8]
 800313a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800313c:	2300      	movs	r3, #0
 800313e:	617b      	str	r3, [r7, #20]
 8003140:	e009      	b.n	8003156 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003142:	68bb      	ldr	r3, [r7, #8]
 8003144:	1c5a      	adds	r2, r3, #1
 8003146:	60ba      	str	r2, [r7, #8]
 8003148:	781b      	ldrb	r3, [r3, #0]
 800314a:	0018      	movs	r0, r3
 800314c:	f000 fb1c 	bl	8003788 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003150:	697b      	ldr	r3, [r7, #20]
 8003152:	3301      	adds	r3, #1
 8003154:	617b      	str	r3, [r7, #20]
 8003156:	697a      	ldr	r2, [r7, #20]
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	429a      	cmp	r2, r3
 800315c:	dbf1      	blt.n	8003142 <_write+0x12>
  }
  return len;
 800315e:	687b      	ldr	r3, [r7, #4]
}
 8003160:	0018      	movs	r0, r3
 8003162:	46bd      	mov	sp, r7
 8003164:	b006      	add	sp, #24
 8003166:	bd80      	pop	{r7, pc}

08003168 <_close>:

int _close(int file)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b082      	sub	sp, #8
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003170:	2301      	movs	r3, #1
 8003172:	425b      	negs	r3, r3
}
 8003174:	0018      	movs	r0, r3
 8003176:	46bd      	mov	sp, r7
 8003178:	b002      	add	sp, #8
 800317a:	bd80      	pop	{r7, pc}

0800317c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b082      	sub	sp, #8
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
 8003184:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	2280      	movs	r2, #128	; 0x80
 800318a:	0192      	lsls	r2, r2, #6
 800318c:	605a      	str	r2, [r3, #4]
  return 0;
 800318e:	2300      	movs	r3, #0
}
 8003190:	0018      	movs	r0, r3
 8003192:	46bd      	mov	sp, r7
 8003194:	b002      	add	sp, #8
 8003196:	bd80      	pop	{r7, pc}

08003198 <_isatty>:

int _isatty(int file)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b082      	sub	sp, #8
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80031a0:	2301      	movs	r3, #1
}
 80031a2:	0018      	movs	r0, r3
 80031a4:	46bd      	mov	sp, r7
 80031a6:	b002      	add	sp, #8
 80031a8:	bd80      	pop	{r7, pc}

080031aa <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80031aa:	b580      	push	{r7, lr}
 80031ac:	b084      	sub	sp, #16
 80031ae:	af00      	add	r7, sp, #0
 80031b0:	60f8      	str	r0, [r7, #12]
 80031b2:	60b9      	str	r1, [r7, #8]
 80031b4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80031b6:	2300      	movs	r3, #0
}
 80031b8:	0018      	movs	r0, r3
 80031ba:	46bd      	mov	sp, r7
 80031bc:	b004      	add	sp, #16
 80031be:	bd80      	pop	{r7, pc}

080031c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b086      	sub	sp, #24
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80031c8:	4a14      	ldr	r2, [pc, #80]	; (800321c <_sbrk+0x5c>)
 80031ca:	4b15      	ldr	r3, [pc, #84]	; (8003220 <_sbrk+0x60>)
 80031cc:	1ad3      	subs	r3, r2, r3
 80031ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80031d0:	697b      	ldr	r3, [r7, #20]
 80031d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80031d4:	4b13      	ldr	r3, [pc, #76]	; (8003224 <_sbrk+0x64>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d102      	bne.n	80031e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80031dc:	4b11      	ldr	r3, [pc, #68]	; (8003224 <_sbrk+0x64>)
 80031de:	4a12      	ldr	r2, [pc, #72]	; (8003228 <_sbrk+0x68>)
 80031e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80031e2:	4b10      	ldr	r3, [pc, #64]	; (8003224 <_sbrk+0x64>)
 80031e4:	681a      	ldr	r2, [r3, #0]
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	18d3      	adds	r3, r2, r3
 80031ea:	693a      	ldr	r2, [r7, #16]
 80031ec:	429a      	cmp	r2, r3
 80031ee:	d207      	bcs.n	8003200 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80031f0:	f002 ff24 	bl	800603c <__errno>
 80031f4:	0003      	movs	r3, r0
 80031f6:	220c      	movs	r2, #12
 80031f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80031fa:	2301      	movs	r3, #1
 80031fc:	425b      	negs	r3, r3
 80031fe:	e009      	b.n	8003214 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003200:	4b08      	ldr	r3, [pc, #32]	; (8003224 <_sbrk+0x64>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003206:	4b07      	ldr	r3, [pc, #28]	; (8003224 <_sbrk+0x64>)
 8003208:	681a      	ldr	r2, [r3, #0]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	18d2      	adds	r2, r2, r3
 800320e:	4b05      	ldr	r3, [pc, #20]	; (8003224 <_sbrk+0x64>)
 8003210:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8003212:	68fb      	ldr	r3, [r7, #12]
}
 8003214:	0018      	movs	r0, r3
 8003216:	46bd      	mov	sp, r7
 8003218:	b006      	add	sp, #24
 800321a:	bd80      	pop	{r7, pc}
 800321c:	20002000 	.word	0x20002000
 8003220:	00000400 	.word	0x00000400
 8003224:	20000250 	.word	0x20000250
 8003228:	20000358 	.word	0x20000358

0800322c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003230:	46c0      	nop			; (mov r8, r8)
 8003232:	46bd      	mov	sp, r7
 8003234:	bd80      	pop	{r7, pc}
	...

08003238 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800323c:	4b16      	ldr	r3, [pc, #88]	; (8003298 <MX_USART2_UART_Init+0x60>)
 800323e:	4a17      	ldr	r2, [pc, #92]	; (800329c <MX_USART2_UART_Init+0x64>)
 8003240:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8003242:	4b15      	ldr	r3, [pc, #84]	; (8003298 <MX_USART2_UART_Init+0x60>)
 8003244:	2296      	movs	r2, #150	; 0x96
 8003246:	0192      	lsls	r2, r2, #6
 8003248:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800324a:	4b13      	ldr	r3, [pc, #76]	; (8003298 <MX_USART2_UART_Init+0x60>)
 800324c:	2200      	movs	r2, #0
 800324e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003250:	4b11      	ldr	r3, [pc, #68]	; (8003298 <MX_USART2_UART_Init+0x60>)
 8003252:	2200      	movs	r2, #0
 8003254:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003256:	4b10      	ldr	r3, [pc, #64]	; (8003298 <MX_USART2_UART_Init+0x60>)
 8003258:	2200      	movs	r2, #0
 800325a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800325c:	4b0e      	ldr	r3, [pc, #56]	; (8003298 <MX_USART2_UART_Init+0x60>)
 800325e:	220c      	movs	r2, #12
 8003260:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003262:	4b0d      	ldr	r3, [pc, #52]	; (8003298 <MX_USART2_UART_Init+0x60>)
 8003264:	2200      	movs	r2, #0
 8003266:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003268:	4b0b      	ldr	r3, [pc, #44]	; (8003298 <MX_USART2_UART_Init+0x60>)
 800326a:	2200      	movs	r2, #0
 800326c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800326e:	4b0a      	ldr	r3, [pc, #40]	; (8003298 <MX_USART2_UART_Init+0x60>)
 8003270:	2200      	movs	r2, #0
 8003272:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003274:	4b08      	ldr	r3, [pc, #32]	; (8003298 <MX_USART2_UART_Init+0x60>)
 8003276:	2200      	movs	r2, #0
 8003278:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800327a:	4b07      	ldr	r3, [pc, #28]	; (8003298 <MX_USART2_UART_Init+0x60>)
 800327c:	2200      	movs	r2, #0
 800327e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003280:	4b05      	ldr	r3, [pc, #20]	; (8003298 <MX_USART2_UART_Init+0x60>)
 8003282:	0018      	movs	r0, r3
 8003284:	f002 f9a6 	bl	80055d4 <HAL_UART_Init>
 8003288:	1e03      	subs	r3, r0, #0
 800328a:	d001      	beq.n	8003290 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 800328c:	f7ff fed1 	bl	8003032 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003290:	46c0      	nop			; (mov r8, r8)
 8003292:	46bd      	mov	sp, r7
 8003294:	bd80      	pop	{r7, pc}
 8003296:	46c0      	nop			; (mov r8, r8)
 8003298:	20000254 	.word	0x20000254
 800329c:	40004400 	.word	0x40004400

080032a0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80032a0:	b590      	push	{r4, r7, lr}
 80032a2:	b08b      	sub	sp, #44	; 0x2c
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032a8:	2414      	movs	r4, #20
 80032aa:	193b      	adds	r3, r7, r4
 80032ac:	0018      	movs	r0, r3
 80032ae:	2314      	movs	r3, #20
 80032b0:	001a      	movs	r2, r3
 80032b2:	2100      	movs	r1, #0
 80032b4:	f002 feec 	bl	8006090 <memset>
  if(uartHandle->Instance==USART2)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4a1b      	ldr	r2, [pc, #108]	; (800332c <HAL_UART_MspInit+0x8c>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d130      	bne.n	8003324 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80032c2:	4b1b      	ldr	r3, [pc, #108]	; (8003330 <HAL_UART_MspInit+0x90>)
 80032c4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80032c6:	4b1a      	ldr	r3, [pc, #104]	; (8003330 <HAL_UART_MspInit+0x90>)
 80032c8:	2180      	movs	r1, #128	; 0x80
 80032ca:	0289      	lsls	r1, r1, #10
 80032cc:	430a      	orrs	r2, r1
 80032ce:	63da      	str	r2, [r3, #60]	; 0x3c
 80032d0:	4b17      	ldr	r3, [pc, #92]	; (8003330 <HAL_UART_MspInit+0x90>)
 80032d2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80032d4:	2380      	movs	r3, #128	; 0x80
 80032d6:	029b      	lsls	r3, r3, #10
 80032d8:	4013      	ands	r3, r2
 80032da:	613b      	str	r3, [r7, #16]
 80032dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032de:	4b14      	ldr	r3, [pc, #80]	; (8003330 <HAL_UART_MspInit+0x90>)
 80032e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80032e2:	4b13      	ldr	r3, [pc, #76]	; (8003330 <HAL_UART_MspInit+0x90>)
 80032e4:	2101      	movs	r1, #1
 80032e6:	430a      	orrs	r2, r1
 80032e8:	635a      	str	r2, [r3, #52]	; 0x34
 80032ea:	4b11      	ldr	r3, [pc, #68]	; (8003330 <HAL_UART_MspInit+0x90>)
 80032ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032ee:	2201      	movs	r2, #1
 80032f0:	4013      	ands	r3, r2
 80032f2:	60fb      	str	r3, [r7, #12]
 80032f4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = T_VCP_TX_Pin|T_VCP_RX_Pin;
 80032f6:	0021      	movs	r1, r4
 80032f8:	187b      	adds	r3, r7, r1
 80032fa:	220c      	movs	r2, #12
 80032fc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032fe:	187b      	adds	r3, r7, r1
 8003300:	2202      	movs	r2, #2
 8003302:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003304:	187b      	adds	r3, r7, r1
 8003306:	2201      	movs	r2, #1
 8003308:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800330a:	187b      	adds	r3, r7, r1
 800330c:	2200      	movs	r2, #0
 800330e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8003310:	187b      	adds	r3, r7, r1
 8003312:	2201      	movs	r2, #1
 8003314:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003316:	187a      	adds	r2, r7, r1
 8003318:	23a0      	movs	r3, #160	; 0xa0
 800331a:	05db      	lsls	r3, r3, #23
 800331c:	0011      	movs	r1, r2
 800331e:	0018      	movs	r0, r3
 8003320:	f000 fb7e 	bl	8003a20 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8003324:	46c0      	nop			; (mov r8, r8)
 8003326:	46bd      	mov	sp, r7
 8003328:	b00b      	add	sp, #44	; 0x2c
 800332a:	bd90      	pop	{r4, r7, pc}
 800332c:	40004400 	.word	0x40004400
 8003330:	40021000 	.word	0x40021000

08003334 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003334:	480d      	ldr	r0, [pc, #52]	; (800336c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003336:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003338:	f7ff ff78 	bl	800322c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800333c:	480c      	ldr	r0, [pc, #48]	; (8003370 <LoopForever+0x6>)
  ldr r1, =_edata
 800333e:	490d      	ldr	r1, [pc, #52]	; (8003374 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003340:	4a0d      	ldr	r2, [pc, #52]	; (8003378 <LoopForever+0xe>)
  movs r3, #0
 8003342:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003344:	e002      	b.n	800334c <LoopCopyDataInit>

08003346 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003346:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003348:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800334a:	3304      	adds	r3, #4

0800334c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800334c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800334e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003350:	d3f9      	bcc.n	8003346 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003352:	4a0a      	ldr	r2, [pc, #40]	; (800337c <LoopForever+0x12>)
  ldr r4, =_ebss
 8003354:	4c0a      	ldr	r4, [pc, #40]	; (8003380 <LoopForever+0x16>)
  movs r3, #0
 8003356:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003358:	e001      	b.n	800335e <LoopFillZerobss>

0800335a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800335a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800335c:	3204      	adds	r2, #4

0800335e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800335e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003360:	d3fb      	bcc.n	800335a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8003362:	f002 fe71 	bl	8006048 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8003366:	f7ff fe0b 	bl	8002f80 <main>

0800336a <LoopForever>:

LoopForever:
  b LoopForever
 800336a:	e7fe      	b.n	800336a <LoopForever>
  ldr   r0, =_estack
 800336c:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8003370:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003374:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8003378:	0800b1bc 	.word	0x0800b1bc
  ldr r2, =_sbss
 800337c:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8003380:	20000358 	.word	0x20000358

08003384 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003384:	e7fe      	b.n	8003384 <ADC1_IRQHandler>
	...

08003388 <FSM_init>:
static sht31_t sht31Sensor;					//sensor data variable
static delay_t delaySamplePeriod;			//delay sample period structure
static delay_t delayMeasuring;				//measure time delay structure
static uint8_t buf[MSG_MAX_LENGHT];			//buffer of print messages

void FSM_init() {
 8003388:	b580      	push	{r7, lr}
 800338a:	af00      	add	r7, sp, #0
	delayInit(&delaySamplePeriod, FSM_SAMPLE_PERIOD);
 800338c:	4a0e      	ldr	r2, [pc, #56]	; (80033c8 <FSM_init+0x40>)
 800338e:	4b0f      	ldr	r3, [pc, #60]	; (80033cc <FSM_init+0x44>)
 8003390:	0011      	movs	r1, r2
 8003392:	0018      	movs	r0, r3
 8003394:	f000 f888 	bl	80034a8 <delayInit>
	delayInit(&delayMeasuring, FSM_MEASURE_WAIT_TIME);
 8003398:	4b0d      	ldr	r3, [pc, #52]	; (80033d0 <FSM_init+0x48>)
 800339a:	2114      	movs	r1, #20
 800339c:	0018      	movs	r0, r3
 800339e:	f000 f883 	bl	80034a8 <delayInit>
	sht31Sensor.errState=false;
 80033a2:	4b0c      	ldr	r3, [pc, #48]	; (80033d4 <FSM_init+0x4c>)
 80033a4:	2200      	movs	r2, #0
 80033a6:	729a      	strb	r2, [r3, #10]
	sht31Sensor.humidity=0;
 80033a8:	4b0a      	ldr	r3, [pc, #40]	; (80033d4 <FSM_init+0x4c>)
 80033aa:	2200      	movs	r2, #0
 80033ac:	605a      	str	r2, [r3, #4]
	sht31Sensor.temperature=0;
 80033ae:	4b09      	ldr	r3, [pc, #36]	; (80033d4 <FSM_init+0x4c>)
 80033b0:	2200      	movs	r2, #0
 80033b2:	601a      	str	r2, [r3, #0]
	sht31Sensor.readCMD = SS_CLOCK_STR_DIS_HGH_REP;
 80033b4:	4b07      	ldr	r3, [pc, #28]	; (80033d4 <FSM_init+0x4c>)
 80033b6:	2290      	movs	r2, #144	; 0x90
 80033b8:	0192      	lsls	r2, r2, #6
 80033ba:	811a      	strh	r2, [r3, #8]
	SensorReadState = IDLE;					//Initialize FMS and goes to IDLE state
 80033bc:	4b06      	ldr	r3, [pc, #24]	; (80033d8 <FSM_init+0x50>)
 80033be:	2200      	movs	r2, #0
 80033c0:	701a      	strb	r2, [r3, #0]
}
 80033c2:	46c0      	nop			; (mov r8, r8)
 80033c4:	46bd      	mov	sp, r7
 80033c6:	bd80      	pop	{r7, pc}
 80033c8:	00002710 	.word	0x00002710
 80033cc:	200002f8 	.word	0x200002f8
 80033d0:	20000304 	.word	0x20000304
 80033d4:	200002ec 	.word	0x200002ec
 80033d8:	200002e8 	.word	0x200002e8

080033dc <FSM_update>:

void FSM_update() {
 80033dc:	b580      	push	{r7, lr}
 80033de:	af00      	add	r7, sp, #0
	switch (SensorReadState) {
 80033e0:	4b2b      	ldr	r3, [pc, #172]	; (8003490 <FSM_update+0xb4>)
 80033e2:	781b      	ldrb	r3, [r3, #0]
 80033e4:	2b04      	cmp	r3, #4
 80033e6:	d848      	bhi.n	800347a <FSM_update+0x9e>
 80033e8:	009a      	lsls	r2, r3, #2
 80033ea:	4b2a      	ldr	r3, [pc, #168]	; (8003494 <FSM_update+0xb8>)
 80033ec:	18d3      	adds	r3, r2, r3
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	469f      	mov	pc, r3
	case IDLE:
		if (delayRead(&delaySamplePeriod)) {
 80033f2:	4b29      	ldr	r3, [pc, #164]	; (8003498 <FSM_update+0xbc>)
 80033f4:	0018      	movs	r0, r3
 80033f6:	f000 f866 	bl	80034c6 <delayRead>
 80033fa:	1e03      	subs	r3, r0, #0
 80033fc:	d041      	beq.n	8003482 <FSM_update+0xa6>
			SensorReadState = NEW_MEASURE;	//When sample period has elapsed, initializes another
 80033fe:	4b24      	ldr	r3, [pc, #144]	; (8003490 <FSM_update+0xb4>)
 8003400:	2201      	movs	r2, #1
 8003402:	701a      	strb	r2, [r3, #0]
		}
		break;
 8003404:	e03d      	b.n	8003482 <FSM_update+0xa6>
	case NEW_MEASURE:
		initNewMeasure(&sht31Sensor);		//sends new measure command
 8003406:	4b25      	ldr	r3, [pc, #148]	; (800349c <FSM_update+0xc0>)
 8003408:	0018      	movs	r0, r3
 800340a:	f000 f88b 	bl	8003524 <initNewMeasure>
		if (!sht31Sensor.errState) {
 800340e:	4b23      	ldr	r3, [pc, #140]	; (800349c <FSM_update+0xc0>)
 8003410:	7a9b      	ldrb	r3, [r3, #10]
 8003412:	2201      	movs	r2, #1
 8003414:	4053      	eors	r3, r2
 8003416:	b2db      	uxtb	r3, r3
 8003418:	2b00      	cmp	r3, #0
 800341a:	d003      	beq.n	8003424 <FSM_update+0x48>
			SensorReadState = MEASURING;	//If read command was sent correctly, waits for it to complete
 800341c:	4b1c      	ldr	r3, [pc, #112]	; (8003490 <FSM_update+0xb4>)
 800341e:	2202      	movs	r2, #2
 8003420:	701a      	strb	r2, [r3, #0]
		}
		else {
			SensorReadState = SEND_DATA; 	//If there is a error, send a error message via UART
		}
		break;
 8003422:	e031      	b.n	8003488 <FSM_update+0xac>
			SensorReadState = SEND_DATA; 	//If there is a error, send a error message via UART
 8003424:	4b1a      	ldr	r3, [pc, #104]	; (8003490 <FSM_update+0xb4>)
 8003426:	2204      	movs	r2, #4
 8003428:	701a      	strb	r2, [r3, #0]
		break;
 800342a:	e02d      	b.n	8003488 <FSM_update+0xac>
	case MEASURING:
		if (delayRead(&delayMeasuring)) {
 800342c:	4b1c      	ldr	r3, [pc, #112]	; (80034a0 <FSM_update+0xc4>)
 800342e:	0018      	movs	r0, r3
 8003430:	f000 f849 	bl	80034c6 <delayRead>
 8003434:	1e03      	subs	r3, r0, #0
 8003436:	d026      	beq.n	8003486 <FSM_update+0xaa>
			SensorReadState = DATA_READ;	//When measure is ready, goes to sensor measure
 8003438:	4b15      	ldr	r3, [pc, #84]	; (8003490 <FSM_update+0xb4>)
 800343a:	2203      	movs	r2, #3
 800343c:	701a      	strb	r2, [r3, #0]
		}
		break;
 800343e:	e022      	b.n	8003486 <FSM_update+0xaa>
	case DATA_READ:
		readSensorData(&sht31Sensor);		//stores data in sensor structure, whether is correct or not
 8003440:	4b16      	ldr	r3, [pc, #88]	; (800349c <FSM_update+0xc0>)
 8003442:	0018      	movs	r0, r3
 8003444:	f000 f892 	bl	800356c <readSensorData>
		SensorReadState = SEND_DATA;		//sends data state
 8003448:	4b11      	ldr	r3, [pc, #68]	; (8003490 <FSM_update+0xb4>)
 800344a:	2204      	movs	r2, #4
 800344c:	701a      	strb	r2, [r3, #0]
		break;
 800344e:	e01b      	b.n	8003488 <FSM_update+0xac>
	case SEND_DATA:
		sensorDataString(&sht31Sensor,buf);	//create string with temperature and humidity
 8003450:	4a14      	ldr	r2, [pc, #80]	; (80034a4 <FSM_update+0xc8>)
 8003452:	4b12      	ldr	r3, [pc, #72]	; (800349c <FSM_update+0xc0>)
 8003454:	0011      	movs	r1, r2
 8003456:	0018      	movs	r0, r3
 8003458:	f000 f8c0 	bl	80035dc <sensorDataString>
											// creates an error message if errState is asserted
		sendStringUart(buf,(uint8_t) strlen(buf));	//send string via UART
 800345c:	4b11      	ldr	r3, [pc, #68]	; (80034a4 <FSM_update+0xc8>)
 800345e:	0018      	movs	r0, r3
 8003460:	f7fc fe50 	bl	8000104 <strlen>
 8003464:	0003      	movs	r3, r0
 8003466:	b2da      	uxtb	r2, r3
 8003468:	4b0e      	ldr	r3, [pc, #56]	; (80034a4 <FSM_update+0xc8>)
 800346a:	0011      	movs	r1, r2
 800346c:	0018      	movs	r0, r3
 800346e:	f000 f975 	bl	800375c <sendStringUart>
		SensorReadState = IDLE;						//waits for new measure
 8003472:	4b07      	ldr	r3, [pc, #28]	; (8003490 <FSM_update+0xb4>)
 8003474:	2200      	movs	r2, #0
 8003476:	701a      	strb	r2, [r3, #0]
		break;
 8003478:	e006      	b.n	8003488 <FSM_update+0xac>
	default:
		SensorReadState = IDLE;				//in case states reaches this section, goes back to IDLE state
 800347a:	4b05      	ldr	r3, [pc, #20]	; (8003490 <FSM_update+0xb4>)
 800347c:	2200      	movs	r2, #0
 800347e:	701a      	strb	r2, [r3, #0]
		break;
 8003480:	e002      	b.n	8003488 <FSM_update+0xac>
		break;
 8003482:	46c0      	nop			; (mov r8, r8)
 8003484:	e000      	b.n	8003488 <FSM_update+0xac>
		break;
 8003486:	46c0      	nop			; (mov r8, r8)
	}
}
 8003488:	46c0      	nop			; (mov r8, r8)
 800348a:	46bd      	mov	sp, r7
 800348c:	bd80      	pop	{r7, pc}
 800348e:	46c0      	nop			; (mov r8, r8)
 8003490:	200002e8 	.word	0x200002e8
 8003494:	0800acdc 	.word	0x0800acdc
 8003498:	200002f8 	.word	0x200002f8
 800349c:	200002ec 	.word	0x200002ec
 80034a0:	20000304 	.word	0x20000304
 80034a4:	20000310 	.word	0x20000310

080034a8 <delayInit>:
 *      Author: leonardo
 */
#include "API_delay.h"

// Initializes delay structure
void delayInit(delay_t *delay, tick_t duration) {
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b082      	sub	sp, #8
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
 80034b0:	6039      	str	r1, [r7, #0]
	delay->duration = duration;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	683a      	ldr	r2, [r7, #0]
 80034b6:	605a      	str	r2, [r3, #4]
	delay->running = false;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2200      	movs	r2, #0
 80034bc:	721a      	strb	r2, [r3, #8]
}
 80034be:	46c0      	nop			; (mov r8, r8)
 80034c0:	46bd      	mov	sp, r7
 80034c2:	b002      	add	sp, #8
 80034c4:	bd80      	pop	{r7, pc}

080034c6 <delayRead>:


bool_t delayRead(delay_t *delay) {
 80034c6:	b580      	push	{r7, lr}
 80034c8:	b082      	sub	sp, #8
 80034ca:	af00      	add	r7, sp, #0
 80034cc:	6078      	str	r0, [r7, #4]
	if(delay->duration == 0)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d101      	bne.n	80034da <delayRead+0x14>
		return false;						// Checks delay duration
 80034d6:	2300      	movs	r3, #0
 80034d8:	e020      	b.n	800351c <delayRead+0x56>
	if (!delay->running) {					//If not running, it starts counting
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	7a1b      	ldrb	r3, [r3, #8]
 80034de:	2201      	movs	r2, #1
 80034e0:	4053      	eors	r3, r2
 80034e2:	b2db      	uxtb	r3, r3
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d009      	beq.n	80034fc <delayRead+0x36>
		delay->running = true;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2201      	movs	r2, #1
 80034ec:	721a      	strb	r2, [r3, #8]
		delay->startTime = GetTick();		//Uses HAL_GetTick in ports.c
 80034ee:	f000 f8ed 	bl	80036cc <GetTick>
 80034f2:	0002      	movs	r2, r0
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	601a      	str	r2, [r3, #0]
		return false;						//
 80034f8:	2300      	movs	r3, #0
 80034fa:	e00f      	b.n	800351c <delayRead+0x56>
	} else {
		if ((GetTick() - delay->startTime) >= delay->duration) {
 80034fc:	f000 f8e6 	bl	80036cc <GetTick>
 8003500:	0002      	movs	r2, r0
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	1ad2      	subs	r2, r2, r3
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	685b      	ldr	r3, [r3, #4]
 800350c:	429a      	cmp	r2, r3
 800350e:	d304      	bcc.n	800351a <delayRead+0x54>
			delay->running = false;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2200      	movs	r2, #0
 8003514:	721a      	strb	r2, [r3, #8]
			return true;					// Returns true when the time has elapsed
 8003516:	2301      	movs	r3, #1
 8003518:	e000      	b.n	800351c <delayRead+0x56>
		} else
			return false;					//returns false when wait period is not over yet
 800351a:	2300      	movs	r3, #0
	}
}
 800351c:	0018      	movs	r0, r3
 800351e:	46bd      	mov	sp, r7
 8003520:	b002      	add	sp, #8
 8003522:	bd80      	pop	{r7, pc}

08003524 <initNewMeasure>:
#include "API_sht31.h"

static float tempConv (uint16_t temp);	//converts raw 16 bits temperature in its actual value
static float humConv (uint16_t hum);	//converts raw 16 bits temperature in its actual value

void initNewMeasure(sht31_t *sht31Sensor) {
 8003524:	b580      	push	{r7, lr}
 8003526:	b084      	sub	sp, #16
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
	uint8_t i2cWriteCMD[CMD_BYTES_SIZE];
	i2cWriteCMD[0] = (uint8_t) ((sht31Sensor->readCMD & 0xFF00) >> 8);	//first byte command
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	891b      	ldrh	r3, [r3, #8]
 8003530:	0a1b      	lsrs	r3, r3, #8
 8003532:	b29b      	uxth	r3, r3
 8003534:	b2da      	uxtb	r2, r3
 8003536:	210c      	movs	r1, #12
 8003538:	187b      	adds	r3, r7, r1
 800353a:	701a      	strb	r2, [r3, #0]
	i2cWriteCMD[1] = (uint8_t) (sht31Sensor->readCMD & 0x00FF);			//second byte command
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	891b      	ldrh	r3, [r3, #8]
 8003540:	b2da      	uxtb	r2, r3
 8003542:	187b      	adds	r3, r7, r1
 8003544:	705a      	strb	r2, [r3, #1]
	if (!sendI2C_CMD((DEFAULT_ADDR << 1), i2cWriteCMD, CMD_BYTES_SIZE))
 8003546:	187b      	adds	r3, r7, r1
 8003548:	2202      	movs	r2, #2
 800354a:	0019      	movs	r1, r3
 800354c:	2088      	movs	r0, #136	; 0x88
 800354e:	f000 f8c5 	bl	80036dc <sendI2C_CMD>
 8003552:	1e03      	subs	r3, r0, #0
 8003554:	d103      	bne.n	800355e <initNewMeasure+0x3a>
		sht31Sensor->errState = false;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2200      	movs	r2, #0
 800355a:	729a      	strb	r2, [r3, #10]
	else
		sht31Sensor->errState = true;
}
 800355c:	e002      	b.n	8003564 <initNewMeasure+0x40>
		sht31Sensor->errState = true;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2201      	movs	r2, #1
 8003562:	729a      	strb	r2, [r3, #10]
}
 8003564:	46c0      	nop			; (mov r8, r8)
 8003566:	46bd      	mov	sp, r7
 8003568:	b004      	add	sp, #16
 800356a:	bd80      	pop	{r7, pc}

0800356c <readSensorData>:

void readSensorData(sht31_t *sht31Sensor) {
 800356c:	b590      	push	{r4, r7, lr}
 800356e:	b085      	sub	sp, #20
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
	uint8_t i2cReadData[DATA_BYTES_SIZE];
	if (!readI2C_Data((DEFAULT_ADDR << 1), i2cReadData, DATA_BYTES_SIZE)) {
 8003574:	2408      	movs	r4, #8
 8003576:	193b      	adds	r3, r7, r4
 8003578:	2206      	movs	r2, #6
 800357a:	0019      	movs	r1, r3
 800357c:	2088      	movs	r0, #136	; 0x88
 800357e:	f000 f8cd 	bl	800371c <readI2C_Data>
 8003582:	1e03      	subs	r3, r0, #0
 8003584:	d123      	bne.n	80035ce <readSensorData+0x62>
		sht31Sensor->errState = false;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2200      	movs	r2, #0
 800358a:	729a      	strb	r2, [r3, #10]

		//Merge return bytes in a single uint16_t variable and converts it to its value
		sht31Sensor->temperature = tempConv(
				(((uint16_t) i2cReadData[MSB_TEMPERATURE]) << 8)
 800358c:	193b      	adds	r3, r7, r4
 800358e:	781b      	ldrb	r3, [r3, #0]
 8003590:	021b      	lsls	r3, r3, #8
						| i2cReadData[LSB_TEMPERATURE]);
 8003592:	b21a      	sxth	r2, r3
 8003594:	193b      	adds	r3, r7, r4
 8003596:	785b      	ldrb	r3, [r3, #1]
 8003598:	b21b      	sxth	r3, r3
 800359a:	4313      	orrs	r3, r2
 800359c:	b21b      	sxth	r3, r3
		sht31Sensor->temperature = tempConv(
 800359e:	b29b      	uxth	r3, r3
 80035a0:	0018      	movs	r0, r3
 80035a2:	f000 f84d 	bl	8003640 <tempConv>
 80035a6:	1c02      	adds	r2, r0, #0
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	601a      	str	r2, [r3, #0]
		sht31Sensor->humidity = humConv(
				(((uint16_t) i2cReadData[MSB_HUMIDITY]) << 8)
 80035ac:	193b      	adds	r3, r7, r4
 80035ae:	78db      	ldrb	r3, [r3, #3]
 80035b0:	021b      	lsls	r3, r3, #8
						| i2cReadData[LSB_HUMIDITY]);
 80035b2:	b21a      	sxth	r2, r3
 80035b4:	193b      	adds	r3, r7, r4
 80035b6:	791b      	ldrb	r3, [r3, #4]
 80035b8:	b21b      	sxth	r3, r3
 80035ba:	4313      	orrs	r3, r2
 80035bc:	b21b      	sxth	r3, r3
		sht31Sensor->humidity = humConv(
 80035be:	b29b      	uxth	r3, r3
 80035c0:	0018      	movs	r0, r3
 80035c2:	f000 f863 	bl	800368c <humConv>
 80035c6:	1c02      	adds	r2, r0, #0
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	605a      	str	r2, [r3, #4]
	} else
		sht31Sensor->errState = true;
}
 80035cc:	e002      	b.n	80035d4 <readSensorData+0x68>
		sht31Sensor->errState = true;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2201      	movs	r2, #1
 80035d2:	729a      	strb	r2, [r3, #10]
}
 80035d4:	46c0      	nop			; (mov r8, r8)
 80035d6:	46bd      	mov	sp, r7
 80035d8:	b005      	add	sp, #20
 80035da:	bd90      	pop	{r4, r7, pc}

080035dc <sensorDataString>:

//generates string to be sent (if error flag is asserted return error message)
void sensorDataString(sht31_t *sht31Sensor, uint8_t *buf) {
 80035dc:	b5b0      	push	{r4, r5, r7, lr}
 80035de:	b084      	sub	sp, #16
 80035e0:	af02      	add	r7, sp, #8
 80035e2:	6078      	str	r0, [r7, #4]
 80035e4:	6039      	str	r1, [r7, #0]
	if (!sht31Sensor->errState) {
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	7a9b      	ldrb	r3, [r3, #10]
 80035ea:	2201      	movs	r2, #1
 80035ec:	4053      	eors	r3, r2
 80035ee:	b2db      	uxtb	r3, r3
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d016      	beq.n	8003622 <sensorDataString+0x46>
		sprintf(buf, "Temperature:%.2f - Humidity:%.2f\r\n",
				sht31Sensor->temperature, sht31Sensor->humidity);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
		sprintf(buf, "Temperature:%.2f - Humidity:%.2f\r\n",
 80035f8:	1c18      	adds	r0, r3, #0
 80035fa:	f7ff fac3 	bl	8002b84 <__aeabi_f2d>
 80035fe:	0004      	movs	r4, r0
 8003600:	000d      	movs	r5, r1
				sht31Sensor->temperature, sht31Sensor->humidity);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	685b      	ldr	r3, [r3, #4]
		sprintf(buf, "Temperature:%.2f - Humidity:%.2f\r\n",
 8003606:	1c18      	adds	r0, r3, #0
 8003608:	f7ff fabc 	bl	8002b84 <__aeabi_f2d>
 800360c:	0002      	movs	r2, r0
 800360e:	000b      	movs	r3, r1
 8003610:	4909      	ldr	r1, [pc, #36]	; (8003638 <sensorDataString+0x5c>)
 8003612:	6838      	ldr	r0, [r7, #0]
 8003614:	9200      	str	r2, [sp, #0]
 8003616:	9301      	str	r3, [sp, #4]
 8003618:	0022      	movs	r2, r4
 800361a:	002b      	movs	r3, r5
 800361c:	f003 fbba 	bl	8006d94 <siprintf>
	} else {
		sprintf(buf, "Sensor error\r\n");
	}
}
 8003620:	e005      	b.n	800362e <sensorDataString+0x52>
		sprintf(buf, "Sensor error\r\n");
 8003622:	4a06      	ldr	r2, [pc, #24]	; (800363c <sensorDataString+0x60>)
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	0011      	movs	r1, r2
 8003628:	0018      	movs	r0, r3
 800362a:	f003 fbb3 	bl	8006d94 <siprintf>
}
 800362e:	46c0      	nop			; (mov r8, r8)
 8003630:	46bd      	mov	sp, r7
 8003632:	b002      	add	sp, #8
 8003634:	bdb0      	pop	{r4, r5, r7, pc}
 8003636:	46c0      	nop			; (mov r8, r8)
 8003638:	0800ab08 	.word	0x0800ab08
 800363c:	0800ab2c 	.word	0x0800ab2c

08003640 <tempConv>:

//the following formulas are provided in sensor's data sheet
static float tempConv(uint16_t temp) {
 8003640:	b580      	push	{r7, lr}
 8003642:	b084      	sub	sp, #16
 8003644:	af00      	add	r7, sp, #0
 8003646:	0002      	movs	r2, r0
 8003648:	1dbb      	adds	r3, r7, #6
 800364a:	801a      	strh	r2, [r3, #0]
	float temperature = ((float) (temp)) / 65537;
 800364c:	1dbb      	adds	r3, r7, #6
 800364e:	881b      	ldrh	r3, [r3, #0]
 8003650:	0018      	movs	r0, r3
 8003652:	f7fd fc6f 	bl	8000f34 <__aeabi_ui2f>
 8003656:	1c03      	adds	r3, r0, #0
 8003658:	4909      	ldr	r1, [pc, #36]	; (8003680 <tempConv+0x40>)
 800365a:	1c18      	adds	r0, r3, #0
 800365c:	f7fd f87e 	bl	800075c <__aeabi_fdiv>
 8003660:	1c03      	adds	r3, r0, #0
 8003662:	60fb      	str	r3, [r7, #12]
	return (-45 + (temperature * 175));
 8003664:	4907      	ldr	r1, [pc, #28]	; (8003684 <tempConv+0x44>)
 8003666:	68f8      	ldr	r0, [r7, #12]
 8003668:	f7fd f990 	bl	800098c <__aeabi_fmul>
 800366c:	1c03      	adds	r3, r0, #0
 800366e:	4906      	ldr	r1, [pc, #24]	; (8003688 <tempConv+0x48>)
 8003670:	1c18      	adds	r0, r3, #0
 8003672:	f7fd fab1 	bl	8000bd8 <__aeabi_fsub>
 8003676:	1c03      	adds	r3, r0, #0
}
 8003678:	1c18      	adds	r0, r3, #0
 800367a:	46bd      	mov	sp, r7
 800367c:	b004      	add	sp, #16
 800367e:	bd80      	pop	{r7, pc}
 8003680:	47800080 	.word	0x47800080
 8003684:	432f0000 	.word	0x432f0000
 8003688:	42340000 	.word	0x42340000

0800368c <humConv>:

static float humConv(uint16_t hum) {
 800368c:	b580      	push	{r7, lr}
 800368e:	b084      	sub	sp, #16
 8003690:	af00      	add	r7, sp, #0
 8003692:	0002      	movs	r2, r0
 8003694:	1dbb      	adds	r3, r7, #6
 8003696:	801a      	strh	r2, [r3, #0]
	float humidity = (float) (hum);
 8003698:	1dbb      	adds	r3, r7, #6
 800369a:	881b      	ldrh	r3, [r3, #0]
 800369c:	0018      	movs	r0, r3
 800369e:	f7fd fc49 	bl	8000f34 <__aeabi_ui2f>
 80036a2:	1c03      	adds	r3, r0, #0
 80036a4:	60fb      	str	r3, [r7, #12]
	return (100 * humidity / 65537);
 80036a6:	4907      	ldr	r1, [pc, #28]	; (80036c4 <humConv+0x38>)
 80036a8:	68f8      	ldr	r0, [r7, #12]
 80036aa:	f7fd f96f 	bl	800098c <__aeabi_fmul>
 80036ae:	1c03      	adds	r3, r0, #0
 80036b0:	4905      	ldr	r1, [pc, #20]	; (80036c8 <humConv+0x3c>)
 80036b2:	1c18      	adds	r0, r3, #0
 80036b4:	f7fd f852 	bl	800075c <__aeabi_fdiv>
 80036b8:	1c03      	adds	r3, r0, #0
}
 80036ba:	1c18      	adds	r0, r3, #0
 80036bc:	46bd      	mov	sp, r7
 80036be:	b004      	add	sp, #16
 80036c0:	bd80      	pop	{r7, pc}
 80036c2:	46c0      	nop			; (mov r8, r8)
 80036c4:	42c80000 	.word	0x42c80000
 80036c8:	47800080 	.word	0x47800080

080036cc <GetTick>:
#include "i2c.h"
#include "usart.h"

#define MAX_COM_TIMEOUT		100

uint32_t GetTick(){
 80036cc:	b580      	push	{r7, lr}
 80036ce:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 80036d0:	f000 f8e8 	bl	80038a4 <HAL_GetTick>
 80036d4:	0003      	movs	r3, r0
}
 80036d6:	0018      	movs	r0, r3
 80036d8:	46bd      	mov	sp, r7
 80036da:	bd80      	pop	{r7, pc}

080036dc <sendI2C_CMD>:

uint8_t sendI2C_CMD (uint8_t addr, uint8_t * sendCMD,int8_t size){
 80036dc:	b590      	push	{r4, r7, lr}
 80036de:	b085      	sub	sp, #20
 80036e0:	af02      	add	r7, sp, #8
 80036e2:	6039      	str	r1, [r7, #0]
 80036e4:	0011      	movs	r1, r2
 80036e6:	1dfb      	adds	r3, r7, #7
 80036e8:	1c02      	adds	r2, r0, #0
 80036ea:	701a      	strb	r2, [r3, #0]
 80036ec:	1dbb      	adds	r3, r7, #6
 80036ee:	1c0a      	adds	r2, r1, #0
 80036f0:	701a      	strb	r2, [r3, #0]
	 return HAL_I2C_Master_Transmit(&hi2c1, addr, sendCMD, size, MAX_COM_TIMEOUT);
 80036f2:	1dfb      	adds	r3, r7, #7
 80036f4:	781b      	ldrb	r3, [r3, #0]
 80036f6:	b299      	uxth	r1, r3
 80036f8:	1dbb      	adds	r3, r7, #6
 80036fa:	781b      	ldrb	r3, [r3, #0]
 80036fc:	b25b      	sxtb	r3, r3
 80036fe:	b29b      	uxth	r3, r3
 8003700:	683a      	ldr	r2, [r7, #0]
 8003702:	4805      	ldr	r0, [pc, #20]	; (8003718 <sendI2C_CMD+0x3c>)
 8003704:	2464      	movs	r4, #100	; 0x64
 8003706:	9400      	str	r4, [sp, #0]
 8003708:	f000 fba2 	bl	8003e50 <HAL_I2C_Master_Transmit>
 800370c:	0003      	movs	r3, r0
}
 800370e:	0018      	movs	r0, r3
 8003710:	46bd      	mov	sp, r7
 8003712:	b003      	add	sp, #12
 8003714:	bd90      	pop	{r4, r7, pc}
 8003716:	46c0      	nop			; (mov r8, r8)
 8003718:	200001fc 	.word	0x200001fc

0800371c <readI2C_Data>:
uint8_t readI2C_Data (uint8_t addr,uint8_t * data,int8_t size){
 800371c:	b590      	push	{r4, r7, lr}
 800371e:	b085      	sub	sp, #20
 8003720:	af02      	add	r7, sp, #8
 8003722:	6039      	str	r1, [r7, #0]
 8003724:	0011      	movs	r1, r2
 8003726:	1dfb      	adds	r3, r7, #7
 8003728:	1c02      	adds	r2, r0, #0
 800372a:	701a      	strb	r2, [r3, #0]
 800372c:	1dbb      	adds	r3, r7, #6
 800372e:	1c0a      	adds	r2, r1, #0
 8003730:	701a      	strb	r2, [r3, #0]
	return HAL_I2C_Master_Receive(&hi2c1, addr, data, size,MAX_COM_TIMEOUT);
 8003732:	1dfb      	adds	r3, r7, #7
 8003734:	781b      	ldrb	r3, [r3, #0]
 8003736:	b299      	uxth	r1, r3
 8003738:	1dbb      	adds	r3, r7, #6
 800373a:	781b      	ldrb	r3, [r3, #0]
 800373c:	b25b      	sxtb	r3, r3
 800373e:	b29b      	uxth	r3, r3
 8003740:	683a      	ldr	r2, [r7, #0]
 8003742:	4805      	ldr	r0, [pc, #20]	; (8003758 <readI2C_Data+0x3c>)
 8003744:	2464      	movs	r4, #100	; 0x64
 8003746:	9400      	str	r4, [sp, #0]
 8003748:	f000 fc8a 	bl	8004060 <HAL_I2C_Master_Receive>
 800374c:	0003      	movs	r3, r0
}
 800374e:	0018      	movs	r0, r3
 8003750:	46bd      	mov	sp, r7
 8003752:	b003      	add	sp, #12
 8003754:	bd90      	pop	{r4, r7, pc}
 8003756:	46c0      	nop			; (mov r8, r8)
 8003758:	200001fc 	.word	0x200001fc

0800375c <sendStringUart>:

void sendStringUart(uint8_t * buf, uint8_t size){
 800375c:	b580      	push	{r7, lr}
 800375e:	b082      	sub	sp, #8
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
 8003764:	000a      	movs	r2, r1
 8003766:	1cfb      	adds	r3, r7, #3
 8003768:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart2, buf, size, MAX_COM_TIMEOUT);
 800376a:	1cfb      	adds	r3, r7, #3
 800376c:	781b      	ldrb	r3, [r3, #0]
 800376e:	b29a      	uxth	r2, r3
 8003770:	6879      	ldr	r1, [r7, #4]
 8003772:	4804      	ldr	r0, [pc, #16]	; (8003784 <sendStringUart+0x28>)
 8003774:	2364      	movs	r3, #100	; 0x64
 8003776:	f001 ff83 	bl	8005680 <HAL_UART_Transmit>
}
 800377a:	46c0      	nop			; (mov r8, r8)
 800377c:	46bd      	mov	sp, r7
 800377e:	b002      	add	sp, #8
 8003780:	bd80      	pop	{r7, pc}
 8003782:	46c0      	nop			; (mov r8, r8)
 8003784:	20000254 	.word	0x20000254

08003788 <__io_putchar>:

int __io_putchar(int ch) {
 8003788:	b580      	push	{r7, lr}
 800378a:	b082      	sub	sp, #8
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*) &ch, 1, MAX_COM_TIMEOUT);
 8003790:	1d39      	adds	r1, r7, #4
 8003792:	4805      	ldr	r0, [pc, #20]	; (80037a8 <__io_putchar+0x20>)
 8003794:	2364      	movs	r3, #100	; 0x64
 8003796:	2201      	movs	r2, #1
 8003798:	f001 ff72 	bl	8005680 <HAL_UART_Transmit>
	return ch;
 800379c:	687b      	ldr	r3, [r7, #4]
}
 800379e:	0018      	movs	r0, r3
 80037a0:	46bd      	mov	sp, r7
 80037a2:	b002      	add	sp, #8
 80037a4:	bd80      	pop	{r7, pc}
 80037a6:	46c0      	nop			; (mov r8, r8)
 80037a8:	20000254 	.word	0x20000254

080037ac <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b082      	sub	sp, #8
 80037b0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80037b2:	1dfb      	adds	r3, r7, #7
 80037b4:	2200      	movs	r2, #0
 80037b6:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80037b8:	4b0b      	ldr	r3, [pc, #44]	; (80037e8 <HAL_Init+0x3c>)
 80037ba:	681a      	ldr	r2, [r3, #0]
 80037bc:	4b0a      	ldr	r3, [pc, #40]	; (80037e8 <HAL_Init+0x3c>)
 80037be:	2180      	movs	r1, #128	; 0x80
 80037c0:	0049      	lsls	r1, r1, #1
 80037c2:	430a      	orrs	r2, r1
 80037c4:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80037c6:	2000      	movs	r0, #0
 80037c8:	f000 f810 	bl	80037ec <HAL_InitTick>
 80037cc:	1e03      	subs	r3, r0, #0
 80037ce:	d003      	beq.n	80037d8 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80037d0:	1dfb      	adds	r3, r7, #7
 80037d2:	2201      	movs	r2, #1
 80037d4:	701a      	strb	r2, [r3, #0]
 80037d6:	e001      	b.n	80037dc <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80037d8:	f7ff fc30 	bl	800303c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80037dc:	1dfb      	adds	r3, r7, #7
 80037de:	781b      	ldrb	r3, [r3, #0]
}
 80037e0:	0018      	movs	r0, r3
 80037e2:	46bd      	mov	sp, r7
 80037e4:	b002      	add	sp, #8
 80037e6:	bd80      	pop	{r7, pc}
 80037e8:	40022000 	.word	0x40022000

080037ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80037ec:	b590      	push	{r4, r7, lr}
 80037ee:	b085      	sub	sp, #20
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80037f4:	230f      	movs	r3, #15
 80037f6:	18fb      	adds	r3, r7, r3
 80037f8:	2200      	movs	r2, #0
 80037fa:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80037fc:	4b1d      	ldr	r3, [pc, #116]	; (8003874 <HAL_InitTick+0x88>)
 80037fe:	781b      	ldrb	r3, [r3, #0]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d02b      	beq.n	800385c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8003804:	4b1c      	ldr	r3, [pc, #112]	; (8003878 <HAL_InitTick+0x8c>)
 8003806:	681c      	ldr	r4, [r3, #0]
 8003808:	4b1a      	ldr	r3, [pc, #104]	; (8003874 <HAL_InitTick+0x88>)
 800380a:	781b      	ldrb	r3, [r3, #0]
 800380c:	0019      	movs	r1, r3
 800380e:	23fa      	movs	r3, #250	; 0xfa
 8003810:	0098      	lsls	r0, r3, #2
 8003812:	f7fc fc93 	bl	800013c <__udivsi3>
 8003816:	0003      	movs	r3, r0
 8003818:	0019      	movs	r1, r3
 800381a:	0020      	movs	r0, r4
 800381c:	f7fc fc8e 	bl	800013c <__udivsi3>
 8003820:	0003      	movs	r3, r0
 8003822:	0018      	movs	r0, r3
 8003824:	f000 f8ef 	bl	8003a06 <HAL_SYSTICK_Config>
 8003828:	1e03      	subs	r3, r0, #0
 800382a:	d112      	bne.n	8003852 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2b03      	cmp	r3, #3
 8003830:	d80a      	bhi.n	8003848 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003832:	6879      	ldr	r1, [r7, #4]
 8003834:	2301      	movs	r3, #1
 8003836:	425b      	negs	r3, r3
 8003838:	2200      	movs	r2, #0
 800383a:	0018      	movs	r0, r3
 800383c:	f000 f8ce 	bl	80039dc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003840:	4b0e      	ldr	r3, [pc, #56]	; (800387c <HAL_InitTick+0x90>)
 8003842:	687a      	ldr	r2, [r7, #4]
 8003844:	601a      	str	r2, [r3, #0]
 8003846:	e00d      	b.n	8003864 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8003848:	230f      	movs	r3, #15
 800384a:	18fb      	adds	r3, r7, r3
 800384c:	2201      	movs	r2, #1
 800384e:	701a      	strb	r2, [r3, #0]
 8003850:	e008      	b.n	8003864 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003852:	230f      	movs	r3, #15
 8003854:	18fb      	adds	r3, r7, r3
 8003856:	2201      	movs	r2, #1
 8003858:	701a      	strb	r2, [r3, #0]
 800385a:	e003      	b.n	8003864 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 800385c:	230f      	movs	r3, #15
 800385e:	18fb      	adds	r3, r7, r3
 8003860:	2201      	movs	r2, #1
 8003862:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8003864:	230f      	movs	r3, #15
 8003866:	18fb      	adds	r3, r7, r3
 8003868:	781b      	ldrb	r3, [r3, #0]
}
 800386a:	0018      	movs	r0, r3
 800386c:	46bd      	mov	sp, r7
 800386e:	b005      	add	sp, #20
 8003870:	bd90      	pop	{r4, r7, pc}
 8003872:	46c0      	nop			; (mov r8, r8)
 8003874:	20000008 	.word	0x20000008
 8003878:	20000000 	.word	0x20000000
 800387c:	20000004 	.word	0x20000004

08003880 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003884:	4b05      	ldr	r3, [pc, #20]	; (800389c <HAL_IncTick+0x1c>)
 8003886:	781b      	ldrb	r3, [r3, #0]
 8003888:	001a      	movs	r2, r3
 800388a:	4b05      	ldr	r3, [pc, #20]	; (80038a0 <HAL_IncTick+0x20>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	18d2      	adds	r2, r2, r3
 8003890:	4b03      	ldr	r3, [pc, #12]	; (80038a0 <HAL_IncTick+0x20>)
 8003892:	601a      	str	r2, [r3, #0]
}
 8003894:	46c0      	nop			; (mov r8, r8)
 8003896:	46bd      	mov	sp, r7
 8003898:	bd80      	pop	{r7, pc}
 800389a:	46c0      	nop			; (mov r8, r8)
 800389c:	20000008 	.word	0x20000008
 80038a0:	20000344 	.word	0x20000344

080038a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	af00      	add	r7, sp, #0
  return uwTick;
 80038a8:	4b02      	ldr	r3, [pc, #8]	; (80038b4 <HAL_GetTick+0x10>)
 80038aa:	681b      	ldr	r3, [r3, #0]
}
 80038ac:	0018      	movs	r0, r3
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bd80      	pop	{r7, pc}
 80038b2:	46c0      	nop			; (mov r8, r8)
 80038b4:	20000344 	.word	0x20000344

080038b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80038b8:	b590      	push	{r4, r7, lr}
 80038ba:	b083      	sub	sp, #12
 80038bc:	af00      	add	r7, sp, #0
 80038be:	0002      	movs	r2, r0
 80038c0:	6039      	str	r1, [r7, #0]
 80038c2:	1dfb      	adds	r3, r7, #7
 80038c4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80038c6:	1dfb      	adds	r3, r7, #7
 80038c8:	781b      	ldrb	r3, [r3, #0]
 80038ca:	2b7f      	cmp	r3, #127	; 0x7f
 80038cc:	d828      	bhi.n	8003920 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80038ce:	4a2f      	ldr	r2, [pc, #188]	; (800398c <__NVIC_SetPriority+0xd4>)
 80038d0:	1dfb      	adds	r3, r7, #7
 80038d2:	781b      	ldrb	r3, [r3, #0]
 80038d4:	b25b      	sxtb	r3, r3
 80038d6:	089b      	lsrs	r3, r3, #2
 80038d8:	33c0      	adds	r3, #192	; 0xc0
 80038da:	009b      	lsls	r3, r3, #2
 80038dc:	589b      	ldr	r3, [r3, r2]
 80038de:	1dfa      	adds	r2, r7, #7
 80038e0:	7812      	ldrb	r2, [r2, #0]
 80038e2:	0011      	movs	r1, r2
 80038e4:	2203      	movs	r2, #3
 80038e6:	400a      	ands	r2, r1
 80038e8:	00d2      	lsls	r2, r2, #3
 80038ea:	21ff      	movs	r1, #255	; 0xff
 80038ec:	4091      	lsls	r1, r2
 80038ee:	000a      	movs	r2, r1
 80038f0:	43d2      	mvns	r2, r2
 80038f2:	401a      	ands	r2, r3
 80038f4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	019b      	lsls	r3, r3, #6
 80038fa:	22ff      	movs	r2, #255	; 0xff
 80038fc:	401a      	ands	r2, r3
 80038fe:	1dfb      	adds	r3, r7, #7
 8003900:	781b      	ldrb	r3, [r3, #0]
 8003902:	0018      	movs	r0, r3
 8003904:	2303      	movs	r3, #3
 8003906:	4003      	ands	r3, r0
 8003908:	00db      	lsls	r3, r3, #3
 800390a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800390c:	481f      	ldr	r0, [pc, #124]	; (800398c <__NVIC_SetPriority+0xd4>)
 800390e:	1dfb      	adds	r3, r7, #7
 8003910:	781b      	ldrb	r3, [r3, #0]
 8003912:	b25b      	sxtb	r3, r3
 8003914:	089b      	lsrs	r3, r3, #2
 8003916:	430a      	orrs	r2, r1
 8003918:	33c0      	adds	r3, #192	; 0xc0
 800391a:	009b      	lsls	r3, r3, #2
 800391c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800391e:	e031      	b.n	8003984 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003920:	4a1b      	ldr	r2, [pc, #108]	; (8003990 <__NVIC_SetPriority+0xd8>)
 8003922:	1dfb      	adds	r3, r7, #7
 8003924:	781b      	ldrb	r3, [r3, #0]
 8003926:	0019      	movs	r1, r3
 8003928:	230f      	movs	r3, #15
 800392a:	400b      	ands	r3, r1
 800392c:	3b08      	subs	r3, #8
 800392e:	089b      	lsrs	r3, r3, #2
 8003930:	3306      	adds	r3, #6
 8003932:	009b      	lsls	r3, r3, #2
 8003934:	18d3      	adds	r3, r2, r3
 8003936:	3304      	adds	r3, #4
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	1dfa      	adds	r2, r7, #7
 800393c:	7812      	ldrb	r2, [r2, #0]
 800393e:	0011      	movs	r1, r2
 8003940:	2203      	movs	r2, #3
 8003942:	400a      	ands	r2, r1
 8003944:	00d2      	lsls	r2, r2, #3
 8003946:	21ff      	movs	r1, #255	; 0xff
 8003948:	4091      	lsls	r1, r2
 800394a:	000a      	movs	r2, r1
 800394c:	43d2      	mvns	r2, r2
 800394e:	401a      	ands	r2, r3
 8003950:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	019b      	lsls	r3, r3, #6
 8003956:	22ff      	movs	r2, #255	; 0xff
 8003958:	401a      	ands	r2, r3
 800395a:	1dfb      	adds	r3, r7, #7
 800395c:	781b      	ldrb	r3, [r3, #0]
 800395e:	0018      	movs	r0, r3
 8003960:	2303      	movs	r3, #3
 8003962:	4003      	ands	r3, r0
 8003964:	00db      	lsls	r3, r3, #3
 8003966:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003968:	4809      	ldr	r0, [pc, #36]	; (8003990 <__NVIC_SetPriority+0xd8>)
 800396a:	1dfb      	adds	r3, r7, #7
 800396c:	781b      	ldrb	r3, [r3, #0]
 800396e:	001c      	movs	r4, r3
 8003970:	230f      	movs	r3, #15
 8003972:	4023      	ands	r3, r4
 8003974:	3b08      	subs	r3, #8
 8003976:	089b      	lsrs	r3, r3, #2
 8003978:	430a      	orrs	r2, r1
 800397a:	3306      	adds	r3, #6
 800397c:	009b      	lsls	r3, r3, #2
 800397e:	18c3      	adds	r3, r0, r3
 8003980:	3304      	adds	r3, #4
 8003982:	601a      	str	r2, [r3, #0]
}
 8003984:	46c0      	nop			; (mov r8, r8)
 8003986:	46bd      	mov	sp, r7
 8003988:	b003      	add	sp, #12
 800398a:	bd90      	pop	{r4, r7, pc}
 800398c:	e000e100 	.word	0xe000e100
 8003990:	e000ed00 	.word	0xe000ed00

08003994 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b082      	sub	sp, #8
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	1e5a      	subs	r2, r3, #1
 80039a0:	2380      	movs	r3, #128	; 0x80
 80039a2:	045b      	lsls	r3, r3, #17
 80039a4:	429a      	cmp	r2, r3
 80039a6:	d301      	bcc.n	80039ac <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80039a8:	2301      	movs	r3, #1
 80039aa:	e010      	b.n	80039ce <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80039ac:	4b0a      	ldr	r3, [pc, #40]	; (80039d8 <SysTick_Config+0x44>)
 80039ae:	687a      	ldr	r2, [r7, #4]
 80039b0:	3a01      	subs	r2, #1
 80039b2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80039b4:	2301      	movs	r3, #1
 80039b6:	425b      	negs	r3, r3
 80039b8:	2103      	movs	r1, #3
 80039ba:	0018      	movs	r0, r3
 80039bc:	f7ff ff7c 	bl	80038b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80039c0:	4b05      	ldr	r3, [pc, #20]	; (80039d8 <SysTick_Config+0x44>)
 80039c2:	2200      	movs	r2, #0
 80039c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80039c6:	4b04      	ldr	r3, [pc, #16]	; (80039d8 <SysTick_Config+0x44>)
 80039c8:	2207      	movs	r2, #7
 80039ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80039cc:	2300      	movs	r3, #0
}
 80039ce:	0018      	movs	r0, r3
 80039d0:	46bd      	mov	sp, r7
 80039d2:	b002      	add	sp, #8
 80039d4:	bd80      	pop	{r7, pc}
 80039d6:	46c0      	nop			; (mov r8, r8)
 80039d8:	e000e010 	.word	0xe000e010

080039dc <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b084      	sub	sp, #16
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	60b9      	str	r1, [r7, #8]
 80039e4:	607a      	str	r2, [r7, #4]
 80039e6:	210f      	movs	r1, #15
 80039e8:	187b      	adds	r3, r7, r1
 80039ea:	1c02      	adds	r2, r0, #0
 80039ec:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80039ee:	68ba      	ldr	r2, [r7, #8]
 80039f0:	187b      	adds	r3, r7, r1
 80039f2:	781b      	ldrb	r3, [r3, #0]
 80039f4:	b25b      	sxtb	r3, r3
 80039f6:	0011      	movs	r1, r2
 80039f8:	0018      	movs	r0, r3
 80039fa:	f7ff ff5d 	bl	80038b8 <__NVIC_SetPriority>
}
 80039fe:	46c0      	nop			; (mov r8, r8)
 8003a00:	46bd      	mov	sp, r7
 8003a02:	b004      	add	sp, #16
 8003a04:	bd80      	pop	{r7, pc}

08003a06 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003a06:	b580      	push	{r7, lr}
 8003a08:	b082      	sub	sp, #8
 8003a0a:	af00      	add	r7, sp, #0
 8003a0c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	0018      	movs	r0, r3
 8003a12:	f7ff ffbf 	bl	8003994 <SysTick_Config>
 8003a16:	0003      	movs	r3, r0
}
 8003a18:	0018      	movs	r0, r3
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	b002      	add	sp, #8
 8003a1e:	bd80      	pop	{r7, pc}

08003a20 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b086      	sub	sp, #24
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
 8003a28:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003a2e:	e147      	b.n	8003cc0 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	2101      	movs	r1, #1
 8003a36:	697a      	ldr	r2, [r7, #20]
 8003a38:	4091      	lsls	r1, r2
 8003a3a:	000a      	movs	r2, r1
 8003a3c:	4013      	ands	r3, r2
 8003a3e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d100      	bne.n	8003a48 <HAL_GPIO_Init+0x28>
 8003a46:	e138      	b.n	8003cba <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	2203      	movs	r2, #3
 8003a4e:	4013      	ands	r3, r2
 8003a50:	2b01      	cmp	r3, #1
 8003a52:	d005      	beq.n	8003a60 <HAL_GPIO_Init+0x40>
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	685b      	ldr	r3, [r3, #4]
 8003a58:	2203      	movs	r2, #3
 8003a5a:	4013      	ands	r3, r2
 8003a5c:	2b02      	cmp	r3, #2
 8003a5e:	d130      	bne.n	8003ac2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	689b      	ldr	r3, [r3, #8]
 8003a64:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003a66:	697b      	ldr	r3, [r7, #20]
 8003a68:	005b      	lsls	r3, r3, #1
 8003a6a:	2203      	movs	r2, #3
 8003a6c:	409a      	lsls	r2, r3
 8003a6e:	0013      	movs	r3, r2
 8003a70:	43da      	mvns	r2, r3
 8003a72:	693b      	ldr	r3, [r7, #16]
 8003a74:	4013      	ands	r3, r2
 8003a76:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	68da      	ldr	r2, [r3, #12]
 8003a7c:	697b      	ldr	r3, [r7, #20]
 8003a7e:	005b      	lsls	r3, r3, #1
 8003a80:	409a      	lsls	r2, r3
 8003a82:	0013      	movs	r3, r2
 8003a84:	693a      	ldr	r2, [r7, #16]
 8003a86:	4313      	orrs	r3, r2
 8003a88:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	693a      	ldr	r2, [r7, #16]
 8003a8e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	685b      	ldr	r3, [r3, #4]
 8003a94:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003a96:	2201      	movs	r2, #1
 8003a98:	697b      	ldr	r3, [r7, #20]
 8003a9a:	409a      	lsls	r2, r3
 8003a9c:	0013      	movs	r3, r2
 8003a9e:	43da      	mvns	r2, r3
 8003aa0:	693b      	ldr	r3, [r7, #16]
 8003aa2:	4013      	ands	r3, r2
 8003aa4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	685b      	ldr	r3, [r3, #4]
 8003aaa:	091b      	lsrs	r3, r3, #4
 8003aac:	2201      	movs	r2, #1
 8003aae:	401a      	ands	r2, r3
 8003ab0:	697b      	ldr	r3, [r7, #20]
 8003ab2:	409a      	lsls	r2, r3
 8003ab4:	0013      	movs	r3, r2
 8003ab6:	693a      	ldr	r2, [r7, #16]
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	693a      	ldr	r2, [r7, #16]
 8003ac0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	685b      	ldr	r3, [r3, #4]
 8003ac6:	2203      	movs	r2, #3
 8003ac8:	4013      	ands	r3, r2
 8003aca:	2b03      	cmp	r3, #3
 8003acc:	d017      	beq.n	8003afe <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	68db      	ldr	r3, [r3, #12]
 8003ad2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003ad4:	697b      	ldr	r3, [r7, #20]
 8003ad6:	005b      	lsls	r3, r3, #1
 8003ad8:	2203      	movs	r2, #3
 8003ada:	409a      	lsls	r2, r3
 8003adc:	0013      	movs	r3, r2
 8003ade:	43da      	mvns	r2, r3
 8003ae0:	693b      	ldr	r3, [r7, #16]
 8003ae2:	4013      	ands	r3, r2
 8003ae4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	689a      	ldr	r2, [r3, #8]
 8003aea:	697b      	ldr	r3, [r7, #20]
 8003aec:	005b      	lsls	r3, r3, #1
 8003aee:	409a      	lsls	r2, r3
 8003af0:	0013      	movs	r3, r2
 8003af2:	693a      	ldr	r2, [r7, #16]
 8003af4:	4313      	orrs	r3, r2
 8003af6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	693a      	ldr	r2, [r7, #16]
 8003afc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	685b      	ldr	r3, [r3, #4]
 8003b02:	2203      	movs	r2, #3
 8003b04:	4013      	ands	r3, r2
 8003b06:	2b02      	cmp	r3, #2
 8003b08:	d123      	bne.n	8003b52 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003b0a:	697b      	ldr	r3, [r7, #20]
 8003b0c:	08da      	lsrs	r2, r3, #3
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	3208      	adds	r2, #8
 8003b12:	0092      	lsls	r2, r2, #2
 8003b14:	58d3      	ldr	r3, [r2, r3]
 8003b16:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003b18:	697b      	ldr	r3, [r7, #20]
 8003b1a:	2207      	movs	r2, #7
 8003b1c:	4013      	ands	r3, r2
 8003b1e:	009b      	lsls	r3, r3, #2
 8003b20:	220f      	movs	r2, #15
 8003b22:	409a      	lsls	r2, r3
 8003b24:	0013      	movs	r3, r2
 8003b26:	43da      	mvns	r2, r3
 8003b28:	693b      	ldr	r3, [r7, #16]
 8003b2a:	4013      	ands	r3, r2
 8003b2c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	691a      	ldr	r2, [r3, #16]
 8003b32:	697b      	ldr	r3, [r7, #20]
 8003b34:	2107      	movs	r1, #7
 8003b36:	400b      	ands	r3, r1
 8003b38:	009b      	lsls	r3, r3, #2
 8003b3a:	409a      	lsls	r2, r3
 8003b3c:	0013      	movs	r3, r2
 8003b3e:	693a      	ldr	r2, [r7, #16]
 8003b40:	4313      	orrs	r3, r2
 8003b42:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003b44:	697b      	ldr	r3, [r7, #20]
 8003b46:	08da      	lsrs	r2, r3, #3
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	3208      	adds	r2, #8
 8003b4c:	0092      	lsls	r2, r2, #2
 8003b4e:	6939      	ldr	r1, [r7, #16]
 8003b50:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003b58:	697b      	ldr	r3, [r7, #20]
 8003b5a:	005b      	lsls	r3, r3, #1
 8003b5c:	2203      	movs	r2, #3
 8003b5e:	409a      	lsls	r2, r3
 8003b60:	0013      	movs	r3, r2
 8003b62:	43da      	mvns	r2, r3
 8003b64:	693b      	ldr	r3, [r7, #16]
 8003b66:	4013      	ands	r3, r2
 8003b68:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	2203      	movs	r2, #3
 8003b70:	401a      	ands	r2, r3
 8003b72:	697b      	ldr	r3, [r7, #20]
 8003b74:	005b      	lsls	r3, r3, #1
 8003b76:	409a      	lsls	r2, r3
 8003b78:	0013      	movs	r3, r2
 8003b7a:	693a      	ldr	r2, [r7, #16]
 8003b7c:	4313      	orrs	r3, r2
 8003b7e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	693a      	ldr	r2, [r7, #16]
 8003b84:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	685a      	ldr	r2, [r3, #4]
 8003b8a:	23c0      	movs	r3, #192	; 0xc0
 8003b8c:	029b      	lsls	r3, r3, #10
 8003b8e:	4013      	ands	r3, r2
 8003b90:	d100      	bne.n	8003b94 <HAL_GPIO_Init+0x174>
 8003b92:	e092      	b.n	8003cba <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8003b94:	4a50      	ldr	r2, [pc, #320]	; (8003cd8 <HAL_GPIO_Init+0x2b8>)
 8003b96:	697b      	ldr	r3, [r7, #20]
 8003b98:	089b      	lsrs	r3, r3, #2
 8003b9a:	3318      	adds	r3, #24
 8003b9c:	009b      	lsls	r3, r3, #2
 8003b9e:	589b      	ldr	r3, [r3, r2]
 8003ba0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8003ba2:	697b      	ldr	r3, [r7, #20]
 8003ba4:	2203      	movs	r2, #3
 8003ba6:	4013      	ands	r3, r2
 8003ba8:	00db      	lsls	r3, r3, #3
 8003baa:	220f      	movs	r2, #15
 8003bac:	409a      	lsls	r2, r3
 8003bae:	0013      	movs	r3, r2
 8003bb0:	43da      	mvns	r2, r3
 8003bb2:	693b      	ldr	r3, [r7, #16]
 8003bb4:	4013      	ands	r3, r2
 8003bb6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8003bb8:	687a      	ldr	r2, [r7, #4]
 8003bba:	23a0      	movs	r3, #160	; 0xa0
 8003bbc:	05db      	lsls	r3, r3, #23
 8003bbe:	429a      	cmp	r2, r3
 8003bc0:	d013      	beq.n	8003bea <HAL_GPIO_Init+0x1ca>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	4a45      	ldr	r2, [pc, #276]	; (8003cdc <HAL_GPIO_Init+0x2bc>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d00d      	beq.n	8003be6 <HAL_GPIO_Init+0x1c6>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	4a44      	ldr	r2, [pc, #272]	; (8003ce0 <HAL_GPIO_Init+0x2c0>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d007      	beq.n	8003be2 <HAL_GPIO_Init+0x1c2>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	4a43      	ldr	r2, [pc, #268]	; (8003ce4 <HAL_GPIO_Init+0x2c4>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d101      	bne.n	8003bde <HAL_GPIO_Init+0x1be>
 8003bda:	2303      	movs	r3, #3
 8003bdc:	e006      	b.n	8003bec <HAL_GPIO_Init+0x1cc>
 8003bde:	2305      	movs	r3, #5
 8003be0:	e004      	b.n	8003bec <HAL_GPIO_Init+0x1cc>
 8003be2:	2302      	movs	r3, #2
 8003be4:	e002      	b.n	8003bec <HAL_GPIO_Init+0x1cc>
 8003be6:	2301      	movs	r3, #1
 8003be8:	e000      	b.n	8003bec <HAL_GPIO_Init+0x1cc>
 8003bea:	2300      	movs	r3, #0
 8003bec:	697a      	ldr	r2, [r7, #20]
 8003bee:	2103      	movs	r1, #3
 8003bf0:	400a      	ands	r2, r1
 8003bf2:	00d2      	lsls	r2, r2, #3
 8003bf4:	4093      	lsls	r3, r2
 8003bf6:	693a      	ldr	r2, [r7, #16]
 8003bf8:	4313      	orrs	r3, r2
 8003bfa:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8003bfc:	4936      	ldr	r1, [pc, #216]	; (8003cd8 <HAL_GPIO_Init+0x2b8>)
 8003bfe:	697b      	ldr	r3, [r7, #20]
 8003c00:	089b      	lsrs	r3, r3, #2
 8003c02:	3318      	adds	r3, #24
 8003c04:	009b      	lsls	r3, r3, #2
 8003c06:	693a      	ldr	r2, [r7, #16]
 8003c08:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003c0a:	4b33      	ldr	r3, [pc, #204]	; (8003cd8 <HAL_GPIO_Init+0x2b8>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	43da      	mvns	r2, r3
 8003c14:	693b      	ldr	r3, [r7, #16]
 8003c16:	4013      	ands	r3, r2
 8003c18:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	685a      	ldr	r2, [r3, #4]
 8003c1e:	2380      	movs	r3, #128	; 0x80
 8003c20:	035b      	lsls	r3, r3, #13
 8003c22:	4013      	ands	r3, r2
 8003c24:	d003      	beq.n	8003c2e <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8003c26:	693a      	ldr	r2, [r7, #16]
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	4313      	orrs	r3, r2
 8003c2c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003c2e:	4b2a      	ldr	r3, [pc, #168]	; (8003cd8 <HAL_GPIO_Init+0x2b8>)
 8003c30:	693a      	ldr	r2, [r7, #16]
 8003c32:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8003c34:	4b28      	ldr	r3, [pc, #160]	; (8003cd8 <HAL_GPIO_Init+0x2b8>)
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	43da      	mvns	r2, r3
 8003c3e:	693b      	ldr	r3, [r7, #16]
 8003c40:	4013      	ands	r3, r2
 8003c42:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	685a      	ldr	r2, [r3, #4]
 8003c48:	2380      	movs	r3, #128	; 0x80
 8003c4a:	039b      	lsls	r3, r3, #14
 8003c4c:	4013      	ands	r3, r2
 8003c4e:	d003      	beq.n	8003c58 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8003c50:	693a      	ldr	r2, [r7, #16]
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	4313      	orrs	r3, r2
 8003c56:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003c58:	4b1f      	ldr	r3, [pc, #124]	; (8003cd8 <HAL_GPIO_Init+0x2b8>)
 8003c5a:	693a      	ldr	r2, [r7, #16]
 8003c5c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003c5e:	4a1e      	ldr	r2, [pc, #120]	; (8003cd8 <HAL_GPIO_Init+0x2b8>)
 8003c60:	2384      	movs	r3, #132	; 0x84
 8003c62:	58d3      	ldr	r3, [r2, r3]
 8003c64:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	43da      	mvns	r2, r3
 8003c6a:	693b      	ldr	r3, [r7, #16]
 8003c6c:	4013      	ands	r3, r2
 8003c6e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	685a      	ldr	r2, [r3, #4]
 8003c74:	2380      	movs	r3, #128	; 0x80
 8003c76:	029b      	lsls	r3, r3, #10
 8003c78:	4013      	ands	r3, r2
 8003c7a:	d003      	beq.n	8003c84 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8003c7c:	693a      	ldr	r2, [r7, #16]
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	4313      	orrs	r3, r2
 8003c82:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003c84:	4914      	ldr	r1, [pc, #80]	; (8003cd8 <HAL_GPIO_Init+0x2b8>)
 8003c86:	2284      	movs	r2, #132	; 0x84
 8003c88:	693b      	ldr	r3, [r7, #16]
 8003c8a:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8003c8c:	4a12      	ldr	r2, [pc, #72]	; (8003cd8 <HAL_GPIO_Init+0x2b8>)
 8003c8e:	2380      	movs	r3, #128	; 0x80
 8003c90:	58d3      	ldr	r3, [r2, r3]
 8003c92:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	43da      	mvns	r2, r3
 8003c98:	693b      	ldr	r3, [r7, #16]
 8003c9a:	4013      	ands	r3, r2
 8003c9c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	685a      	ldr	r2, [r3, #4]
 8003ca2:	2380      	movs	r3, #128	; 0x80
 8003ca4:	025b      	lsls	r3, r3, #9
 8003ca6:	4013      	ands	r3, r2
 8003ca8:	d003      	beq.n	8003cb2 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8003caa:	693a      	ldr	r2, [r7, #16]
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003cb2:	4909      	ldr	r1, [pc, #36]	; (8003cd8 <HAL_GPIO_Init+0x2b8>)
 8003cb4:	2280      	movs	r2, #128	; 0x80
 8003cb6:	693b      	ldr	r3, [r7, #16]
 8003cb8:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8003cba:	697b      	ldr	r3, [r7, #20]
 8003cbc:	3301      	adds	r3, #1
 8003cbe:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	681a      	ldr	r2, [r3, #0]
 8003cc4:	697b      	ldr	r3, [r7, #20]
 8003cc6:	40da      	lsrs	r2, r3
 8003cc8:	1e13      	subs	r3, r2, #0
 8003cca:	d000      	beq.n	8003cce <HAL_GPIO_Init+0x2ae>
 8003ccc:	e6b0      	b.n	8003a30 <HAL_GPIO_Init+0x10>
  }
}
 8003cce:	46c0      	nop			; (mov r8, r8)
 8003cd0:	46c0      	nop			; (mov r8, r8)
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	b006      	add	sp, #24
 8003cd6:	bd80      	pop	{r7, pc}
 8003cd8:	40021800 	.word	0x40021800
 8003cdc:	50000400 	.word	0x50000400
 8003ce0:	50000800 	.word	0x50000800
 8003ce4:	50000c00 	.word	0x50000c00

08003ce8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b082      	sub	sp, #8
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
 8003cf0:	0008      	movs	r0, r1
 8003cf2:	0011      	movs	r1, r2
 8003cf4:	1cbb      	adds	r3, r7, #2
 8003cf6:	1c02      	adds	r2, r0, #0
 8003cf8:	801a      	strh	r2, [r3, #0]
 8003cfa:	1c7b      	adds	r3, r7, #1
 8003cfc:	1c0a      	adds	r2, r1, #0
 8003cfe:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003d00:	1c7b      	adds	r3, r7, #1
 8003d02:	781b      	ldrb	r3, [r3, #0]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d004      	beq.n	8003d12 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003d08:	1cbb      	adds	r3, r7, #2
 8003d0a:	881a      	ldrh	r2, [r3, #0]
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003d10:	e003      	b.n	8003d1a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003d12:	1cbb      	adds	r3, r7, #2
 8003d14:	881a      	ldrh	r2, [r3, #0]
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003d1a:	46c0      	nop			; (mov r8, r8)
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	b002      	add	sp, #8
 8003d20:	bd80      	pop	{r7, pc}
	...

08003d24 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b082      	sub	sp, #8
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d101      	bne.n	8003d36 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003d32:	2301      	movs	r3, #1
 8003d34:	e082      	b.n	8003e3c <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2241      	movs	r2, #65	; 0x41
 8003d3a:	5c9b      	ldrb	r3, [r3, r2]
 8003d3c:	b2db      	uxtb	r3, r3
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d107      	bne.n	8003d52 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2240      	movs	r2, #64	; 0x40
 8003d46:	2100      	movs	r1, #0
 8003d48:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	0018      	movs	r0, r3
 8003d4e:	f7ff f8b5 	bl	8002ebc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2241      	movs	r2, #65	; 0x41
 8003d56:	2124      	movs	r1, #36	; 0x24
 8003d58:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	681a      	ldr	r2, [r3, #0]
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	2101      	movs	r1, #1
 8003d66:	438a      	bics	r2, r1
 8003d68:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	685a      	ldr	r2, [r3, #4]
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4934      	ldr	r1, [pc, #208]	; (8003e44 <HAL_I2C_Init+0x120>)
 8003d74:	400a      	ands	r2, r1
 8003d76:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	689a      	ldr	r2, [r3, #8]
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4931      	ldr	r1, [pc, #196]	; (8003e48 <HAL_I2C_Init+0x124>)
 8003d84:	400a      	ands	r2, r1
 8003d86:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	68db      	ldr	r3, [r3, #12]
 8003d8c:	2b01      	cmp	r3, #1
 8003d8e:	d108      	bne.n	8003da2 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	689a      	ldr	r2, [r3, #8]
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	2180      	movs	r1, #128	; 0x80
 8003d9a:	0209      	lsls	r1, r1, #8
 8003d9c:	430a      	orrs	r2, r1
 8003d9e:	609a      	str	r2, [r3, #8]
 8003da0:	e007      	b.n	8003db2 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	689a      	ldr	r2, [r3, #8]
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	2184      	movs	r1, #132	; 0x84
 8003dac:	0209      	lsls	r1, r1, #8
 8003dae:	430a      	orrs	r2, r1
 8003db0:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	68db      	ldr	r3, [r3, #12]
 8003db6:	2b02      	cmp	r3, #2
 8003db8:	d104      	bne.n	8003dc4 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	2280      	movs	r2, #128	; 0x80
 8003dc0:	0112      	lsls	r2, r2, #4
 8003dc2:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	685a      	ldr	r2, [r3, #4]
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	491f      	ldr	r1, [pc, #124]	; (8003e4c <HAL_I2C_Init+0x128>)
 8003dd0:	430a      	orrs	r2, r1
 8003dd2:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	68da      	ldr	r2, [r3, #12]
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	491a      	ldr	r1, [pc, #104]	; (8003e48 <HAL_I2C_Init+0x124>)
 8003de0:	400a      	ands	r2, r1
 8003de2:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	691a      	ldr	r2, [r3, #16]
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	695b      	ldr	r3, [r3, #20]
 8003dec:	431a      	orrs	r2, r3
 8003dee:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	699b      	ldr	r3, [r3, #24]
 8003df4:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	430a      	orrs	r2, r1
 8003dfc:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	69d9      	ldr	r1, [r3, #28]
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6a1a      	ldr	r2, [r3, #32]
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	430a      	orrs	r2, r1
 8003e0c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	681a      	ldr	r2, [r3, #0]
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	2101      	movs	r1, #1
 8003e1a:	430a      	orrs	r2, r1
 8003e1c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2200      	movs	r2, #0
 8003e22:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2241      	movs	r2, #65	; 0x41
 8003e28:	2120      	movs	r1, #32
 8003e2a:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2200      	movs	r2, #0
 8003e30:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2242      	movs	r2, #66	; 0x42
 8003e36:	2100      	movs	r1, #0
 8003e38:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003e3a:	2300      	movs	r3, #0
}
 8003e3c:	0018      	movs	r0, r3
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	b002      	add	sp, #8
 8003e42:	bd80      	pop	{r7, pc}
 8003e44:	f0ffffff 	.word	0xf0ffffff
 8003e48:	ffff7fff 	.word	0xffff7fff
 8003e4c:	02008000 	.word	0x02008000

08003e50 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003e50:	b590      	push	{r4, r7, lr}
 8003e52:	b089      	sub	sp, #36	; 0x24
 8003e54:	af02      	add	r7, sp, #8
 8003e56:	60f8      	str	r0, [r7, #12]
 8003e58:	0008      	movs	r0, r1
 8003e5a:	607a      	str	r2, [r7, #4]
 8003e5c:	0019      	movs	r1, r3
 8003e5e:	230a      	movs	r3, #10
 8003e60:	18fb      	adds	r3, r7, r3
 8003e62:	1c02      	adds	r2, r0, #0
 8003e64:	801a      	strh	r2, [r3, #0]
 8003e66:	2308      	movs	r3, #8
 8003e68:	18fb      	adds	r3, r7, r3
 8003e6a:	1c0a      	adds	r2, r1, #0
 8003e6c:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	2241      	movs	r2, #65	; 0x41
 8003e72:	5c9b      	ldrb	r3, [r3, r2]
 8003e74:	b2db      	uxtb	r3, r3
 8003e76:	2b20      	cmp	r3, #32
 8003e78:	d000      	beq.n	8003e7c <HAL_I2C_Master_Transmit+0x2c>
 8003e7a:	e0e7      	b.n	800404c <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	2240      	movs	r2, #64	; 0x40
 8003e80:	5c9b      	ldrb	r3, [r3, r2]
 8003e82:	2b01      	cmp	r3, #1
 8003e84:	d101      	bne.n	8003e8a <HAL_I2C_Master_Transmit+0x3a>
 8003e86:	2302      	movs	r3, #2
 8003e88:	e0e1      	b.n	800404e <HAL_I2C_Master_Transmit+0x1fe>
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	2240      	movs	r2, #64	; 0x40
 8003e8e:	2101      	movs	r1, #1
 8003e90:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003e92:	f7ff fd07 	bl	80038a4 <HAL_GetTick>
 8003e96:	0003      	movs	r3, r0
 8003e98:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003e9a:	2380      	movs	r3, #128	; 0x80
 8003e9c:	0219      	lsls	r1, r3, #8
 8003e9e:	68f8      	ldr	r0, [r7, #12]
 8003ea0:	697b      	ldr	r3, [r7, #20]
 8003ea2:	9300      	str	r3, [sp, #0]
 8003ea4:	2319      	movs	r3, #25
 8003ea6:	2201      	movs	r2, #1
 8003ea8:	f000 fa04 	bl	80042b4 <I2C_WaitOnFlagUntilTimeout>
 8003eac:	1e03      	subs	r3, r0, #0
 8003eae:	d001      	beq.n	8003eb4 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	e0cc      	b.n	800404e <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	2241      	movs	r2, #65	; 0x41
 8003eb8:	2121      	movs	r1, #33	; 0x21
 8003eba:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	2242      	movs	r2, #66	; 0x42
 8003ec0:	2110      	movs	r1, #16
 8003ec2:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	687a      	ldr	r2, [r7, #4]
 8003ece:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	2208      	movs	r2, #8
 8003ed4:	18ba      	adds	r2, r7, r2
 8003ed6:	8812      	ldrh	r2, [r2, #0]
 8003ed8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	2200      	movs	r2, #0
 8003ede:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ee4:	b29b      	uxth	r3, r3
 8003ee6:	2bff      	cmp	r3, #255	; 0xff
 8003ee8:	d911      	bls.n	8003f0e <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	22ff      	movs	r2, #255	; 0xff
 8003eee:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ef4:	b2da      	uxtb	r2, r3
 8003ef6:	2380      	movs	r3, #128	; 0x80
 8003ef8:	045c      	lsls	r4, r3, #17
 8003efa:	230a      	movs	r3, #10
 8003efc:	18fb      	adds	r3, r7, r3
 8003efe:	8819      	ldrh	r1, [r3, #0]
 8003f00:	68f8      	ldr	r0, [r7, #12]
 8003f02:	4b55      	ldr	r3, [pc, #340]	; (8004058 <HAL_I2C_Master_Transmit+0x208>)
 8003f04:	9300      	str	r3, [sp, #0]
 8003f06:	0023      	movs	r3, r4
 8003f08:	f000 fc08 	bl	800471c <I2C_TransferConfig>
 8003f0c:	e075      	b.n	8003ffa <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f12:	b29a      	uxth	r2, r3
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f1c:	b2da      	uxtb	r2, r3
 8003f1e:	2380      	movs	r3, #128	; 0x80
 8003f20:	049c      	lsls	r4, r3, #18
 8003f22:	230a      	movs	r3, #10
 8003f24:	18fb      	adds	r3, r7, r3
 8003f26:	8819      	ldrh	r1, [r3, #0]
 8003f28:	68f8      	ldr	r0, [r7, #12]
 8003f2a:	4b4b      	ldr	r3, [pc, #300]	; (8004058 <HAL_I2C_Master_Transmit+0x208>)
 8003f2c:	9300      	str	r3, [sp, #0]
 8003f2e:	0023      	movs	r3, r4
 8003f30:	f000 fbf4 	bl	800471c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8003f34:	e061      	b.n	8003ffa <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f36:	697a      	ldr	r2, [r7, #20]
 8003f38:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	0018      	movs	r0, r3
 8003f3e:	f000 f9f8 	bl	8004332 <I2C_WaitOnTXISFlagUntilTimeout>
 8003f42:	1e03      	subs	r3, r0, #0
 8003f44:	d001      	beq.n	8003f4a <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 8003f46:	2301      	movs	r3, #1
 8003f48:	e081      	b.n	800404e <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f4e:	781a      	ldrb	r2, [r3, #0]
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f5a:	1c5a      	adds	r2, r3, #1
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f64:	b29b      	uxth	r3, r3
 8003f66:	3b01      	subs	r3, #1
 8003f68:	b29a      	uxth	r2, r3
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f72:	3b01      	subs	r3, #1
 8003f74:	b29a      	uxth	r2, r3
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f7e:	b29b      	uxth	r3, r3
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d03a      	beq.n	8003ffa <HAL_I2C_Master_Transmit+0x1aa>
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d136      	bne.n	8003ffa <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003f8c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003f8e:	68f8      	ldr	r0, [r7, #12]
 8003f90:	697b      	ldr	r3, [r7, #20]
 8003f92:	9300      	str	r3, [sp, #0]
 8003f94:	0013      	movs	r3, r2
 8003f96:	2200      	movs	r2, #0
 8003f98:	2180      	movs	r1, #128	; 0x80
 8003f9a:	f000 f98b 	bl	80042b4 <I2C_WaitOnFlagUntilTimeout>
 8003f9e:	1e03      	subs	r3, r0, #0
 8003fa0:	d001      	beq.n	8003fa6 <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	e053      	b.n	800404e <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003faa:	b29b      	uxth	r3, r3
 8003fac:	2bff      	cmp	r3, #255	; 0xff
 8003fae:	d911      	bls.n	8003fd4 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	22ff      	movs	r2, #255	; 0xff
 8003fb4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fba:	b2da      	uxtb	r2, r3
 8003fbc:	2380      	movs	r3, #128	; 0x80
 8003fbe:	045c      	lsls	r4, r3, #17
 8003fc0:	230a      	movs	r3, #10
 8003fc2:	18fb      	adds	r3, r7, r3
 8003fc4:	8819      	ldrh	r1, [r3, #0]
 8003fc6:	68f8      	ldr	r0, [r7, #12]
 8003fc8:	2300      	movs	r3, #0
 8003fca:	9300      	str	r3, [sp, #0]
 8003fcc:	0023      	movs	r3, r4
 8003fce:	f000 fba5 	bl	800471c <I2C_TransferConfig>
 8003fd2:	e012      	b.n	8003ffa <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fd8:	b29a      	uxth	r2, r3
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fe2:	b2da      	uxtb	r2, r3
 8003fe4:	2380      	movs	r3, #128	; 0x80
 8003fe6:	049c      	lsls	r4, r3, #18
 8003fe8:	230a      	movs	r3, #10
 8003fea:	18fb      	adds	r3, r7, r3
 8003fec:	8819      	ldrh	r1, [r3, #0]
 8003fee:	68f8      	ldr	r0, [r7, #12]
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	9300      	str	r3, [sp, #0]
 8003ff4:	0023      	movs	r3, r4
 8003ff6:	f000 fb91 	bl	800471c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ffe:	b29b      	uxth	r3, r3
 8004000:	2b00      	cmp	r3, #0
 8004002:	d198      	bne.n	8003f36 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004004:	697a      	ldr	r2, [r7, #20]
 8004006:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	0018      	movs	r0, r3
 800400c:	f000 f9d0 	bl	80043b0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004010:	1e03      	subs	r3, r0, #0
 8004012:	d001      	beq.n	8004018 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8004014:	2301      	movs	r3, #1
 8004016:	e01a      	b.n	800404e <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	2220      	movs	r2, #32
 800401e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	685a      	ldr	r2, [r3, #4]
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	490c      	ldr	r1, [pc, #48]	; (800405c <HAL_I2C_Master_Transmit+0x20c>)
 800402c:	400a      	ands	r2, r1
 800402e:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	2241      	movs	r2, #65	; 0x41
 8004034:	2120      	movs	r1, #32
 8004036:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	2242      	movs	r2, #66	; 0x42
 800403c:	2100      	movs	r1, #0
 800403e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	2240      	movs	r2, #64	; 0x40
 8004044:	2100      	movs	r1, #0
 8004046:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004048:	2300      	movs	r3, #0
 800404a:	e000      	b.n	800404e <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 800404c:	2302      	movs	r3, #2
  }
}
 800404e:	0018      	movs	r0, r3
 8004050:	46bd      	mov	sp, r7
 8004052:	b007      	add	sp, #28
 8004054:	bd90      	pop	{r4, r7, pc}
 8004056:	46c0      	nop			; (mov r8, r8)
 8004058:	80002000 	.word	0x80002000
 800405c:	fe00e800 	.word	0xfe00e800

08004060 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8004060:	b590      	push	{r4, r7, lr}
 8004062:	b089      	sub	sp, #36	; 0x24
 8004064:	af02      	add	r7, sp, #8
 8004066:	60f8      	str	r0, [r7, #12]
 8004068:	0008      	movs	r0, r1
 800406a:	607a      	str	r2, [r7, #4]
 800406c:	0019      	movs	r1, r3
 800406e:	230a      	movs	r3, #10
 8004070:	18fb      	adds	r3, r7, r3
 8004072:	1c02      	adds	r2, r0, #0
 8004074:	801a      	strh	r2, [r3, #0]
 8004076:	2308      	movs	r3, #8
 8004078:	18fb      	adds	r3, r7, r3
 800407a:	1c0a      	adds	r2, r1, #0
 800407c:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	2241      	movs	r2, #65	; 0x41
 8004082:	5c9b      	ldrb	r3, [r3, r2]
 8004084:	b2db      	uxtb	r3, r3
 8004086:	2b20      	cmp	r3, #32
 8004088:	d000      	beq.n	800408c <HAL_I2C_Master_Receive+0x2c>
 800408a:	e0e8      	b.n	800425e <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	2240      	movs	r2, #64	; 0x40
 8004090:	5c9b      	ldrb	r3, [r3, r2]
 8004092:	2b01      	cmp	r3, #1
 8004094:	d101      	bne.n	800409a <HAL_I2C_Master_Receive+0x3a>
 8004096:	2302      	movs	r3, #2
 8004098:	e0e2      	b.n	8004260 <HAL_I2C_Master_Receive+0x200>
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	2240      	movs	r2, #64	; 0x40
 800409e:	2101      	movs	r1, #1
 80040a0:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80040a2:	f7ff fbff 	bl	80038a4 <HAL_GetTick>
 80040a6:	0003      	movs	r3, r0
 80040a8:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80040aa:	2380      	movs	r3, #128	; 0x80
 80040ac:	0219      	lsls	r1, r3, #8
 80040ae:	68f8      	ldr	r0, [r7, #12]
 80040b0:	697b      	ldr	r3, [r7, #20]
 80040b2:	9300      	str	r3, [sp, #0]
 80040b4:	2319      	movs	r3, #25
 80040b6:	2201      	movs	r2, #1
 80040b8:	f000 f8fc 	bl	80042b4 <I2C_WaitOnFlagUntilTimeout>
 80040bc:	1e03      	subs	r3, r0, #0
 80040be:	d001      	beq.n	80040c4 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 80040c0:	2301      	movs	r3, #1
 80040c2:	e0cd      	b.n	8004260 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	2241      	movs	r2, #65	; 0x41
 80040c8:	2122      	movs	r1, #34	; 0x22
 80040ca:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	2242      	movs	r2, #66	; 0x42
 80040d0:	2110      	movs	r1, #16
 80040d2:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	2200      	movs	r2, #0
 80040d8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	687a      	ldr	r2, [r7, #4]
 80040de:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	2208      	movs	r2, #8
 80040e4:	18ba      	adds	r2, r7, r2
 80040e6:	8812      	ldrh	r2, [r2, #0]
 80040e8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	2200      	movs	r2, #0
 80040ee:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040f4:	b29b      	uxth	r3, r3
 80040f6:	2bff      	cmp	r3, #255	; 0xff
 80040f8:	d911      	bls.n	800411e <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	22ff      	movs	r2, #255	; 0xff
 80040fe:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004104:	b2da      	uxtb	r2, r3
 8004106:	2380      	movs	r3, #128	; 0x80
 8004108:	045c      	lsls	r4, r3, #17
 800410a:	230a      	movs	r3, #10
 800410c:	18fb      	adds	r3, r7, r3
 800410e:	8819      	ldrh	r1, [r3, #0]
 8004110:	68f8      	ldr	r0, [r7, #12]
 8004112:	4b55      	ldr	r3, [pc, #340]	; (8004268 <HAL_I2C_Master_Receive+0x208>)
 8004114:	9300      	str	r3, [sp, #0]
 8004116:	0023      	movs	r3, r4
 8004118:	f000 fb00 	bl	800471c <I2C_TransferConfig>
 800411c:	e076      	b.n	800420c <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004122:	b29a      	uxth	r2, r3
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800412c:	b2da      	uxtb	r2, r3
 800412e:	2380      	movs	r3, #128	; 0x80
 8004130:	049c      	lsls	r4, r3, #18
 8004132:	230a      	movs	r3, #10
 8004134:	18fb      	adds	r3, r7, r3
 8004136:	8819      	ldrh	r1, [r3, #0]
 8004138:	68f8      	ldr	r0, [r7, #12]
 800413a:	4b4b      	ldr	r3, [pc, #300]	; (8004268 <HAL_I2C_Master_Receive+0x208>)
 800413c:	9300      	str	r3, [sp, #0]
 800413e:	0023      	movs	r3, r4
 8004140:	f000 faec 	bl	800471c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8004144:	e062      	b.n	800420c <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004146:	697a      	ldr	r2, [r7, #20]
 8004148:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	0018      	movs	r0, r3
 800414e:	f000 f96b 	bl	8004428 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004152:	1e03      	subs	r3, r0, #0
 8004154:	d001      	beq.n	800415a <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 8004156:	2301      	movs	r3, #1
 8004158:	e082      	b.n	8004260 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004164:	b2d2      	uxtb	r2, r2
 8004166:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800416c:	1c5a      	adds	r2, r3, #1
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004176:	3b01      	subs	r3, #1
 8004178:	b29a      	uxth	r2, r3
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004182:	b29b      	uxth	r3, r3
 8004184:	3b01      	subs	r3, #1
 8004186:	b29a      	uxth	r2, r3
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004190:	b29b      	uxth	r3, r3
 8004192:	2b00      	cmp	r3, #0
 8004194:	d03a      	beq.n	800420c <HAL_I2C_Master_Receive+0x1ac>
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800419a:	2b00      	cmp	r3, #0
 800419c:	d136      	bne.n	800420c <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800419e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80041a0:	68f8      	ldr	r0, [r7, #12]
 80041a2:	697b      	ldr	r3, [r7, #20]
 80041a4:	9300      	str	r3, [sp, #0]
 80041a6:	0013      	movs	r3, r2
 80041a8:	2200      	movs	r2, #0
 80041aa:	2180      	movs	r1, #128	; 0x80
 80041ac:	f000 f882 	bl	80042b4 <I2C_WaitOnFlagUntilTimeout>
 80041b0:	1e03      	subs	r3, r0, #0
 80041b2:	d001      	beq.n	80041b8 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 80041b4:	2301      	movs	r3, #1
 80041b6:	e053      	b.n	8004260 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041bc:	b29b      	uxth	r3, r3
 80041be:	2bff      	cmp	r3, #255	; 0xff
 80041c0:	d911      	bls.n	80041e6 <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	22ff      	movs	r2, #255	; 0xff
 80041c6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041cc:	b2da      	uxtb	r2, r3
 80041ce:	2380      	movs	r3, #128	; 0x80
 80041d0:	045c      	lsls	r4, r3, #17
 80041d2:	230a      	movs	r3, #10
 80041d4:	18fb      	adds	r3, r7, r3
 80041d6:	8819      	ldrh	r1, [r3, #0]
 80041d8:	68f8      	ldr	r0, [r7, #12]
 80041da:	2300      	movs	r3, #0
 80041dc:	9300      	str	r3, [sp, #0]
 80041de:	0023      	movs	r3, r4
 80041e0:	f000 fa9c 	bl	800471c <I2C_TransferConfig>
 80041e4:	e012      	b.n	800420c <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041ea:	b29a      	uxth	r2, r3
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041f4:	b2da      	uxtb	r2, r3
 80041f6:	2380      	movs	r3, #128	; 0x80
 80041f8:	049c      	lsls	r4, r3, #18
 80041fa:	230a      	movs	r3, #10
 80041fc:	18fb      	adds	r3, r7, r3
 80041fe:	8819      	ldrh	r1, [r3, #0]
 8004200:	68f8      	ldr	r0, [r7, #12]
 8004202:	2300      	movs	r3, #0
 8004204:	9300      	str	r3, [sp, #0]
 8004206:	0023      	movs	r3, r4
 8004208:	f000 fa88 	bl	800471c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004210:	b29b      	uxth	r3, r3
 8004212:	2b00      	cmp	r3, #0
 8004214:	d197      	bne.n	8004146 <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004216:	697a      	ldr	r2, [r7, #20]
 8004218:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	0018      	movs	r0, r3
 800421e:	f000 f8c7 	bl	80043b0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004222:	1e03      	subs	r3, r0, #0
 8004224:	d001      	beq.n	800422a <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 8004226:	2301      	movs	r3, #1
 8004228:	e01a      	b.n	8004260 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	2220      	movs	r2, #32
 8004230:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	685a      	ldr	r2, [r3, #4]
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	490b      	ldr	r1, [pc, #44]	; (800426c <HAL_I2C_Master_Receive+0x20c>)
 800423e:	400a      	ands	r2, r1
 8004240:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	2241      	movs	r2, #65	; 0x41
 8004246:	2120      	movs	r1, #32
 8004248:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	2242      	movs	r2, #66	; 0x42
 800424e:	2100      	movs	r1, #0
 8004250:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	2240      	movs	r2, #64	; 0x40
 8004256:	2100      	movs	r1, #0
 8004258:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800425a:	2300      	movs	r3, #0
 800425c:	e000      	b.n	8004260 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 800425e:	2302      	movs	r3, #2
  }
}
 8004260:	0018      	movs	r0, r3
 8004262:	46bd      	mov	sp, r7
 8004264:	b007      	add	sp, #28
 8004266:	bd90      	pop	{r4, r7, pc}
 8004268:	80002400 	.word	0x80002400
 800426c:	fe00e800 	.word	0xfe00e800

08004270 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b082      	sub	sp, #8
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	699b      	ldr	r3, [r3, #24]
 800427e:	2202      	movs	r2, #2
 8004280:	4013      	ands	r3, r2
 8004282:	2b02      	cmp	r3, #2
 8004284:	d103      	bne.n	800428e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	2200      	movs	r2, #0
 800428c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	699b      	ldr	r3, [r3, #24]
 8004294:	2201      	movs	r2, #1
 8004296:	4013      	ands	r3, r2
 8004298:	2b01      	cmp	r3, #1
 800429a:	d007      	beq.n	80042ac <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	699a      	ldr	r2, [r3, #24]
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	2101      	movs	r1, #1
 80042a8:	430a      	orrs	r2, r1
 80042aa:	619a      	str	r2, [r3, #24]
  }
}
 80042ac:	46c0      	nop			; (mov r8, r8)
 80042ae:	46bd      	mov	sp, r7
 80042b0:	b002      	add	sp, #8
 80042b2:	bd80      	pop	{r7, pc}

080042b4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b084      	sub	sp, #16
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	60f8      	str	r0, [r7, #12]
 80042bc:	60b9      	str	r1, [r7, #8]
 80042be:	603b      	str	r3, [r7, #0]
 80042c0:	1dfb      	adds	r3, r7, #7
 80042c2:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80042c4:	e021      	b.n	800430a <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	3301      	adds	r3, #1
 80042ca:	d01e      	beq.n	800430a <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042cc:	f7ff faea 	bl	80038a4 <HAL_GetTick>
 80042d0:	0002      	movs	r2, r0
 80042d2:	69bb      	ldr	r3, [r7, #24]
 80042d4:	1ad3      	subs	r3, r2, r3
 80042d6:	683a      	ldr	r2, [r7, #0]
 80042d8:	429a      	cmp	r2, r3
 80042da:	d302      	bcc.n	80042e2 <I2C_WaitOnFlagUntilTimeout+0x2e>
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d113      	bne.n	800430a <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042e6:	2220      	movs	r2, #32
 80042e8:	431a      	orrs	r2, r3
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	2241      	movs	r2, #65	; 0x41
 80042f2:	2120      	movs	r1, #32
 80042f4:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	2242      	movs	r2, #66	; 0x42
 80042fa:	2100      	movs	r1, #0
 80042fc:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	2240      	movs	r2, #64	; 0x40
 8004302:	2100      	movs	r1, #0
 8004304:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8004306:	2301      	movs	r3, #1
 8004308:	e00f      	b.n	800432a <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	699b      	ldr	r3, [r3, #24]
 8004310:	68ba      	ldr	r2, [r7, #8]
 8004312:	4013      	ands	r3, r2
 8004314:	68ba      	ldr	r2, [r7, #8]
 8004316:	1ad3      	subs	r3, r2, r3
 8004318:	425a      	negs	r2, r3
 800431a:	4153      	adcs	r3, r2
 800431c:	b2db      	uxtb	r3, r3
 800431e:	001a      	movs	r2, r3
 8004320:	1dfb      	adds	r3, r7, #7
 8004322:	781b      	ldrb	r3, [r3, #0]
 8004324:	429a      	cmp	r2, r3
 8004326:	d0ce      	beq.n	80042c6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004328:	2300      	movs	r3, #0
}
 800432a:	0018      	movs	r0, r3
 800432c:	46bd      	mov	sp, r7
 800432e:	b004      	add	sp, #16
 8004330:	bd80      	pop	{r7, pc}

08004332 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004332:	b580      	push	{r7, lr}
 8004334:	b084      	sub	sp, #16
 8004336:	af00      	add	r7, sp, #0
 8004338:	60f8      	str	r0, [r7, #12]
 800433a:	60b9      	str	r1, [r7, #8]
 800433c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800433e:	e02b      	b.n	8004398 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004340:	687a      	ldr	r2, [r7, #4]
 8004342:	68b9      	ldr	r1, [r7, #8]
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	0018      	movs	r0, r3
 8004348:	f000 f8e8 	bl	800451c <I2C_IsErrorOccurred>
 800434c:	1e03      	subs	r3, r0, #0
 800434e:	d001      	beq.n	8004354 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004350:	2301      	movs	r3, #1
 8004352:	e029      	b.n	80043a8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004354:	68bb      	ldr	r3, [r7, #8]
 8004356:	3301      	adds	r3, #1
 8004358:	d01e      	beq.n	8004398 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800435a:	f7ff faa3 	bl	80038a4 <HAL_GetTick>
 800435e:	0002      	movs	r2, r0
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	1ad3      	subs	r3, r2, r3
 8004364:	68ba      	ldr	r2, [r7, #8]
 8004366:	429a      	cmp	r2, r3
 8004368:	d302      	bcc.n	8004370 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 800436a:	68bb      	ldr	r3, [r7, #8]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d113      	bne.n	8004398 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004374:	2220      	movs	r2, #32
 8004376:	431a      	orrs	r2, r3
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	2241      	movs	r2, #65	; 0x41
 8004380:	2120      	movs	r1, #32
 8004382:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	2242      	movs	r2, #66	; 0x42
 8004388:	2100      	movs	r1, #0
 800438a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	2240      	movs	r2, #64	; 0x40
 8004390:	2100      	movs	r1, #0
 8004392:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8004394:	2301      	movs	r3, #1
 8004396:	e007      	b.n	80043a8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	699b      	ldr	r3, [r3, #24]
 800439e:	2202      	movs	r2, #2
 80043a0:	4013      	ands	r3, r2
 80043a2:	2b02      	cmp	r3, #2
 80043a4:	d1cc      	bne.n	8004340 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80043a6:	2300      	movs	r3, #0
}
 80043a8:	0018      	movs	r0, r3
 80043aa:	46bd      	mov	sp, r7
 80043ac:	b004      	add	sp, #16
 80043ae:	bd80      	pop	{r7, pc}

080043b0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b084      	sub	sp, #16
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	60f8      	str	r0, [r7, #12]
 80043b8:	60b9      	str	r1, [r7, #8]
 80043ba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80043bc:	e028      	b.n	8004410 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80043be:	687a      	ldr	r2, [r7, #4]
 80043c0:	68b9      	ldr	r1, [r7, #8]
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	0018      	movs	r0, r3
 80043c6:	f000 f8a9 	bl	800451c <I2C_IsErrorOccurred>
 80043ca:	1e03      	subs	r3, r0, #0
 80043cc:	d001      	beq.n	80043d2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80043ce:	2301      	movs	r3, #1
 80043d0:	e026      	b.n	8004420 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043d2:	f7ff fa67 	bl	80038a4 <HAL_GetTick>
 80043d6:	0002      	movs	r2, r0
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	1ad3      	subs	r3, r2, r3
 80043dc:	68ba      	ldr	r2, [r7, #8]
 80043de:	429a      	cmp	r2, r3
 80043e0:	d302      	bcc.n	80043e8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80043e2:	68bb      	ldr	r3, [r7, #8]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d113      	bne.n	8004410 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043ec:	2220      	movs	r2, #32
 80043ee:	431a      	orrs	r2, r3
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	2241      	movs	r2, #65	; 0x41
 80043f8:	2120      	movs	r1, #32
 80043fa:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	2242      	movs	r2, #66	; 0x42
 8004400:	2100      	movs	r1, #0
 8004402:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	2240      	movs	r2, #64	; 0x40
 8004408:	2100      	movs	r1, #0
 800440a:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 800440c:	2301      	movs	r3, #1
 800440e:	e007      	b.n	8004420 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	699b      	ldr	r3, [r3, #24]
 8004416:	2220      	movs	r2, #32
 8004418:	4013      	ands	r3, r2
 800441a:	2b20      	cmp	r3, #32
 800441c:	d1cf      	bne.n	80043be <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800441e:	2300      	movs	r3, #0
}
 8004420:	0018      	movs	r0, r3
 8004422:	46bd      	mov	sp, r7
 8004424:	b004      	add	sp, #16
 8004426:	bd80      	pop	{r7, pc}

08004428 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b084      	sub	sp, #16
 800442c:	af00      	add	r7, sp, #0
 800442e:	60f8      	str	r0, [r7, #12]
 8004430:	60b9      	str	r1, [r7, #8]
 8004432:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004434:	e064      	b.n	8004500 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004436:	687a      	ldr	r2, [r7, #4]
 8004438:	68b9      	ldr	r1, [r7, #8]
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	0018      	movs	r0, r3
 800443e:	f000 f86d 	bl	800451c <I2C_IsErrorOccurred>
 8004442:	1e03      	subs	r3, r0, #0
 8004444:	d001      	beq.n	800444a <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004446:	2301      	movs	r3, #1
 8004448:	e062      	b.n	8004510 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	699b      	ldr	r3, [r3, #24]
 8004450:	2220      	movs	r2, #32
 8004452:	4013      	ands	r3, r2
 8004454:	2b20      	cmp	r3, #32
 8004456:	d138      	bne.n	80044ca <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	699b      	ldr	r3, [r3, #24]
 800445e:	2204      	movs	r2, #4
 8004460:	4013      	ands	r3, r2
 8004462:	2b04      	cmp	r3, #4
 8004464:	d105      	bne.n	8004472 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800446a:	2b00      	cmp	r3, #0
 800446c:	d001      	beq.n	8004472 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800446e:	2300      	movs	r3, #0
 8004470:	e04e      	b.n	8004510 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	699b      	ldr	r3, [r3, #24]
 8004478:	2210      	movs	r2, #16
 800447a:	4013      	ands	r3, r2
 800447c:	2b10      	cmp	r3, #16
 800447e:	d107      	bne.n	8004490 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	2210      	movs	r2, #16
 8004486:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	2204      	movs	r2, #4
 800448c:	645a      	str	r2, [r3, #68]	; 0x44
 800448e:	e002      	b.n	8004496 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	2200      	movs	r2, #0
 8004494:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	2220      	movs	r2, #32
 800449c:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	685a      	ldr	r2, [r3, #4]
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	491b      	ldr	r1, [pc, #108]	; (8004518 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 80044aa:	400a      	ands	r2, r1
 80044ac:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	2241      	movs	r2, #65	; 0x41
 80044b2:	2120      	movs	r1, #32
 80044b4:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	2242      	movs	r2, #66	; 0x42
 80044ba:	2100      	movs	r1, #0
 80044bc:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	2240      	movs	r2, #64	; 0x40
 80044c2:	2100      	movs	r1, #0
 80044c4:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80044c6:	2301      	movs	r3, #1
 80044c8:	e022      	b.n	8004510 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044ca:	f7ff f9eb 	bl	80038a4 <HAL_GetTick>
 80044ce:	0002      	movs	r2, r0
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	1ad3      	subs	r3, r2, r3
 80044d4:	68ba      	ldr	r2, [r7, #8]
 80044d6:	429a      	cmp	r2, r3
 80044d8:	d302      	bcc.n	80044e0 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 80044da:	68bb      	ldr	r3, [r7, #8]
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d10f      	bne.n	8004500 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044e4:	2220      	movs	r2, #32
 80044e6:	431a      	orrs	r2, r3
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	2241      	movs	r2, #65	; 0x41
 80044f0:	2120      	movs	r1, #32
 80044f2:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	2240      	movs	r2, #64	; 0x40
 80044f8:	2100      	movs	r1, #0
 80044fa:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 80044fc:	2301      	movs	r3, #1
 80044fe:	e007      	b.n	8004510 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	699b      	ldr	r3, [r3, #24]
 8004506:	2204      	movs	r2, #4
 8004508:	4013      	ands	r3, r2
 800450a:	2b04      	cmp	r3, #4
 800450c:	d193      	bne.n	8004436 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800450e:	2300      	movs	r3, #0
}
 8004510:	0018      	movs	r0, r3
 8004512:	46bd      	mov	sp, r7
 8004514:	b004      	add	sp, #16
 8004516:	bd80      	pop	{r7, pc}
 8004518:	fe00e800 	.word	0xfe00e800

0800451c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800451c:	b590      	push	{r4, r7, lr}
 800451e:	b08b      	sub	sp, #44	; 0x2c
 8004520:	af00      	add	r7, sp, #0
 8004522:	60f8      	str	r0, [r7, #12]
 8004524:	60b9      	str	r1, [r7, #8]
 8004526:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004528:	2327      	movs	r3, #39	; 0x27
 800452a:	18fb      	adds	r3, r7, r3
 800452c:	2200      	movs	r2, #0
 800452e:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	699b      	ldr	r3, [r3, #24]
 8004536:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004538:	2300      	movs	r3, #0
 800453a:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004540:	69bb      	ldr	r3, [r7, #24]
 8004542:	2210      	movs	r2, #16
 8004544:	4013      	ands	r3, r2
 8004546:	d100      	bne.n	800454a <I2C_IsErrorOccurred+0x2e>
 8004548:	e082      	b.n	8004650 <I2C_IsErrorOccurred+0x134>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	2210      	movs	r2, #16
 8004550:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004552:	e060      	b.n	8004616 <I2C_IsErrorOccurred+0xfa>
 8004554:	2427      	movs	r4, #39	; 0x27
 8004556:	193b      	adds	r3, r7, r4
 8004558:	193a      	adds	r2, r7, r4
 800455a:	7812      	ldrb	r2, [r2, #0]
 800455c:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800455e:	68bb      	ldr	r3, [r7, #8]
 8004560:	3301      	adds	r3, #1
 8004562:	d058      	beq.n	8004616 <I2C_IsErrorOccurred+0xfa>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004564:	f7ff f99e 	bl	80038a4 <HAL_GetTick>
 8004568:	0002      	movs	r2, r0
 800456a:	69fb      	ldr	r3, [r7, #28]
 800456c:	1ad3      	subs	r3, r2, r3
 800456e:	68ba      	ldr	r2, [r7, #8]
 8004570:	429a      	cmp	r2, r3
 8004572:	d306      	bcc.n	8004582 <I2C_IsErrorOccurred+0x66>
 8004574:	193b      	adds	r3, r7, r4
 8004576:	193a      	adds	r2, r7, r4
 8004578:	7812      	ldrb	r2, [r2, #0]
 800457a:	701a      	strb	r2, [r3, #0]
 800457c:	68bb      	ldr	r3, [r7, #8]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d149      	bne.n	8004616 <I2C_IsErrorOccurred+0xfa>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	685a      	ldr	r2, [r3, #4]
 8004588:	2380      	movs	r3, #128	; 0x80
 800458a:	01db      	lsls	r3, r3, #7
 800458c:	4013      	ands	r3, r2
 800458e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004590:	2013      	movs	r0, #19
 8004592:	183b      	adds	r3, r7, r0
 8004594:	68fa      	ldr	r2, [r7, #12]
 8004596:	2142      	movs	r1, #66	; 0x42
 8004598:	5c52      	ldrb	r2, [r2, r1]
 800459a:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	699a      	ldr	r2, [r3, #24]
 80045a2:	2380      	movs	r3, #128	; 0x80
 80045a4:	021b      	lsls	r3, r3, #8
 80045a6:	401a      	ands	r2, r3
 80045a8:	2380      	movs	r3, #128	; 0x80
 80045aa:	021b      	lsls	r3, r3, #8
 80045ac:	429a      	cmp	r2, r3
 80045ae:	d126      	bne.n	80045fe <I2C_IsErrorOccurred+0xe2>
 80045b0:	697a      	ldr	r2, [r7, #20]
 80045b2:	2380      	movs	r3, #128	; 0x80
 80045b4:	01db      	lsls	r3, r3, #7
 80045b6:	429a      	cmp	r2, r3
 80045b8:	d021      	beq.n	80045fe <I2C_IsErrorOccurred+0xe2>
              (tmp1 != I2C_CR2_STOP) && \
 80045ba:	183b      	adds	r3, r7, r0
 80045bc:	781b      	ldrb	r3, [r3, #0]
 80045be:	2b20      	cmp	r3, #32
 80045c0:	d01d      	beq.n	80045fe <I2C_IsErrorOccurred+0xe2>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	685a      	ldr	r2, [r3, #4]
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	2180      	movs	r1, #128	; 0x80
 80045ce:	01c9      	lsls	r1, r1, #7
 80045d0:	430a      	orrs	r2, r1
 80045d2:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80045d4:	f7ff f966 	bl	80038a4 <HAL_GetTick>
 80045d8:	0003      	movs	r3, r0
 80045da:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80045dc:	e00f      	b.n	80045fe <I2C_IsErrorOccurred+0xe2>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80045de:	f7ff f961 	bl	80038a4 <HAL_GetTick>
 80045e2:	0002      	movs	r2, r0
 80045e4:	69fb      	ldr	r3, [r7, #28]
 80045e6:	1ad3      	subs	r3, r2, r3
 80045e8:	2b19      	cmp	r3, #25
 80045ea:	d908      	bls.n	80045fe <I2C_IsErrorOccurred+0xe2>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 80045ec:	6a3b      	ldr	r3, [r7, #32]
 80045ee:	2220      	movs	r2, #32
 80045f0:	4313      	orrs	r3, r2
 80045f2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80045f4:	2327      	movs	r3, #39	; 0x27
 80045f6:	18fb      	adds	r3, r7, r3
 80045f8:	2201      	movs	r2, #1
 80045fa:	701a      	strb	r2, [r3, #0]

              break;
 80045fc:	e00b      	b.n	8004616 <I2C_IsErrorOccurred+0xfa>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	699b      	ldr	r3, [r3, #24]
 8004604:	2220      	movs	r2, #32
 8004606:	4013      	ands	r3, r2
 8004608:	2127      	movs	r1, #39	; 0x27
 800460a:	187a      	adds	r2, r7, r1
 800460c:	1879      	adds	r1, r7, r1
 800460e:	7809      	ldrb	r1, [r1, #0]
 8004610:	7011      	strb	r1, [r2, #0]
 8004612:	2b20      	cmp	r3, #32
 8004614:	d1e3      	bne.n	80045de <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	699b      	ldr	r3, [r3, #24]
 800461c:	2220      	movs	r2, #32
 800461e:	4013      	ands	r3, r2
 8004620:	2b20      	cmp	r3, #32
 8004622:	d004      	beq.n	800462e <I2C_IsErrorOccurred+0x112>
 8004624:	2327      	movs	r3, #39	; 0x27
 8004626:	18fb      	adds	r3, r7, r3
 8004628:	781b      	ldrb	r3, [r3, #0]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d092      	beq.n	8004554 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800462e:	2327      	movs	r3, #39	; 0x27
 8004630:	18fb      	adds	r3, r7, r3
 8004632:	781b      	ldrb	r3, [r3, #0]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d103      	bne.n	8004640 <I2C_IsErrorOccurred+0x124>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	2220      	movs	r2, #32
 800463e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004640:	6a3b      	ldr	r3, [r7, #32]
 8004642:	2204      	movs	r2, #4
 8004644:	4313      	orrs	r3, r2
 8004646:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004648:	2327      	movs	r3, #39	; 0x27
 800464a:	18fb      	adds	r3, r7, r3
 800464c:	2201      	movs	r2, #1
 800464e:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	699b      	ldr	r3, [r3, #24]
 8004656:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004658:	69ba      	ldr	r2, [r7, #24]
 800465a:	2380      	movs	r3, #128	; 0x80
 800465c:	005b      	lsls	r3, r3, #1
 800465e:	4013      	ands	r3, r2
 8004660:	d00c      	beq.n	800467c <I2C_IsErrorOccurred+0x160>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004662:	6a3b      	ldr	r3, [r7, #32]
 8004664:	2201      	movs	r2, #1
 8004666:	4313      	orrs	r3, r2
 8004668:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	2280      	movs	r2, #128	; 0x80
 8004670:	0052      	lsls	r2, r2, #1
 8004672:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004674:	2327      	movs	r3, #39	; 0x27
 8004676:	18fb      	adds	r3, r7, r3
 8004678:	2201      	movs	r2, #1
 800467a:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800467c:	69ba      	ldr	r2, [r7, #24]
 800467e:	2380      	movs	r3, #128	; 0x80
 8004680:	00db      	lsls	r3, r3, #3
 8004682:	4013      	ands	r3, r2
 8004684:	d00c      	beq.n	80046a0 <I2C_IsErrorOccurred+0x184>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004686:	6a3b      	ldr	r3, [r7, #32]
 8004688:	2208      	movs	r2, #8
 800468a:	4313      	orrs	r3, r2
 800468c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	2280      	movs	r2, #128	; 0x80
 8004694:	00d2      	lsls	r2, r2, #3
 8004696:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004698:	2327      	movs	r3, #39	; 0x27
 800469a:	18fb      	adds	r3, r7, r3
 800469c:	2201      	movs	r2, #1
 800469e:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80046a0:	69ba      	ldr	r2, [r7, #24]
 80046a2:	2380      	movs	r3, #128	; 0x80
 80046a4:	009b      	lsls	r3, r3, #2
 80046a6:	4013      	ands	r3, r2
 80046a8:	d00c      	beq.n	80046c4 <I2C_IsErrorOccurred+0x1a8>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80046aa:	6a3b      	ldr	r3, [r7, #32]
 80046ac:	2202      	movs	r2, #2
 80046ae:	4313      	orrs	r3, r2
 80046b0:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	2280      	movs	r2, #128	; 0x80
 80046b8:	0092      	lsls	r2, r2, #2
 80046ba:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80046bc:	2327      	movs	r3, #39	; 0x27
 80046be:	18fb      	adds	r3, r7, r3
 80046c0:	2201      	movs	r2, #1
 80046c2:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 80046c4:	2327      	movs	r3, #39	; 0x27
 80046c6:	18fb      	adds	r3, r7, r3
 80046c8:	781b      	ldrb	r3, [r3, #0]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d01d      	beq.n	800470a <I2C_IsErrorOccurred+0x1ee>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	0018      	movs	r0, r3
 80046d2:	f7ff fdcd 	bl	8004270 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	685a      	ldr	r2, [r3, #4]
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	490d      	ldr	r1, [pc, #52]	; (8004718 <I2C_IsErrorOccurred+0x1fc>)
 80046e2:	400a      	ands	r2, r1
 80046e4:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80046ea:	6a3b      	ldr	r3, [r7, #32]
 80046ec:	431a      	orrs	r2, r3
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	2241      	movs	r2, #65	; 0x41
 80046f6:	2120      	movs	r1, #32
 80046f8:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	2242      	movs	r2, #66	; 0x42
 80046fe:	2100      	movs	r1, #0
 8004700:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	2240      	movs	r2, #64	; 0x40
 8004706:	2100      	movs	r1, #0
 8004708:	5499      	strb	r1, [r3, r2]
  }

  return status;
 800470a:	2327      	movs	r3, #39	; 0x27
 800470c:	18fb      	adds	r3, r7, r3
 800470e:	781b      	ldrb	r3, [r3, #0]
}
 8004710:	0018      	movs	r0, r3
 8004712:	46bd      	mov	sp, r7
 8004714:	b00b      	add	sp, #44	; 0x2c
 8004716:	bd90      	pop	{r4, r7, pc}
 8004718:	fe00e800 	.word	0xfe00e800

0800471c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800471c:	b590      	push	{r4, r7, lr}
 800471e:	b087      	sub	sp, #28
 8004720:	af00      	add	r7, sp, #0
 8004722:	60f8      	str	r0, [r7, #12]
 8004724:	0008      	movs	r0, r1
 8004726:	0011      	movs	r1, r2
 8004728:	607b      	str	r3, [r7, #4]
 800472a:	240a      	movs	r4, #10
 800472c:	193b      	adds	r3, r7, r4
 800472e:	1c02      	adds	r2, r0, #0
 8004730:	801a      	strh	r2, [r3, #0]
 8004732:	2009      	movs	r0, #9
 8004734:	183b      	adds	r3, r7, r0
 8004736:	1c0a      	adds	r2, r1, #0
 8004738:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800473a:	193b      	adds	r3, r7, r4
 800473c:	881b      	ldrh	r3, [r3, #0]
 800473e:	059b      	lsls	r3, r3, #22
 8004740:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004742:	183b      	adds	r3, r7, r0
 8004744:	781b      	ldrb	r3, [r3, #0]
 8004746:	0419      	lsls	r1, r3, #16
 8004748:	23ff      	movs	r3, #255	; 0xff
 800474a:	041b      	lsls	r3, r3, #16
 800474c:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800474e:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004756:	4313      	orrs	r3, r2
 8004758:	005b      	lsls	r3, r3, #1
 800475a:	085b      	lsrs	r3, r3, #1
 800475c:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	685b      	ldr	r3, [r3, #4]
 8004764:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004766:	0d51      	lsrs	r1, r2, #21
 8004768:	2280      	movs	r2, #128	; 0x80
 800476a:	00d2      	lsls	r2, r2, #3
 800476c:	400a      	ands	r2, r1
 800476e:	4907      	ldr	r1, [pc, #28]	; (800478c <I2C_TransferConfig+0x70>)
 8004770:	430a      	orrs	r2, r1
 8004772:	43d2      	mvns	r2, r2
 8004774:	401a      	ands	r2, r3
 8004776:	0011      	movs	r1, r2
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	697a      	ldr	r2, [r7, #20]
 800477e:	430a      	orrs	r2, r1
 8004780:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004782:	46c0      	nop			; (mov r8, r8)
 8004784:	46bd      	mov	sp, r7
 8004786:	b007      	add	sp, #28
 8004788:	bd90      	pop	{r4, r7, pc}
 800478a:	46c0      	nop			; (mov r8, r8)
 800478c:	03ff63ff 	.word	0x03ff63ff

08004790 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004790:	b580      	push	{r7, lr}
 8004792:	b082      	sub	sp, #8
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
 8004798:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2241      	movs	r2, #65	; 0x41
 800479e:	5c9b      	ldrb	r3, [r3, r2]
 80047a0:	b2db      	uxtb	r3, r3
 80047a2:	2b20      	cmp	r3, #32
 80047a4:	d138      	bne.n	8004818 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	2240      	movs	r2, #64	; 0x40
 80047aa:	5c9b      	ldrb	r3, [r3, r2]
 80047ac:	2b01      	cmp	r3, #1
 80047ae:	d101      	bne.n	80047b4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80047b0:	2302      	movs	r3, #2
 80047b2:	e032      	b.n	800481a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2240      	movs	r2, #64	; 0x40
 80047b8:	2101      	movs	r1, #1
 80047ba:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2241      	movs	r2, #65	; 0x41
 80047c0:	2124      	movs	r1, #36	; 0x24
 80047c2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	681a      	ldr	r2, [r3, #0]
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	2101      	movs	r1, #1
 80047d0:	438a      	bics	r2, r1
 80047d2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	681a      	ldr	r2, [r3, #0]
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	4911      	ldr	r1, [pc, #68]	; (8004824 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80047e0:	400a      	ands	r2, r1
 80047e2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	6819      	ldr	r1, [r3, #0]
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	683a      	ldr	r2, [r7, #0]
 80047f0:	430a      	orrs	r2, r1
 80047f2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	681a      	ldr	r2, [r3, #0]
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	2101      	movs	r1, #1
 8004800:	430a      	orrs	r2, r1
 8004802:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2241      	movs	r2, #65	; 0x41
 8004808:	2120      	movs	r1, #32
 800480a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2240      	movs	r2, #64	; 0x40
 8004810:	2100      	movs	r1, #0
 8004812:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004814:	2300      	movs	r3, #0
 8004816:	e000      	b.n	800481a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004818:	2302      	movs	r3, #2
  }
}
 800481a:	0018      	movs	r0, r3
 800481c:	46bd      	mov	sp, r7
 800481e:	b002      	add	sp, #8
 8004820:	bd80      	pop	{r7, pc}
 8004822:	46c0      	nop			; (mov r8, r8)
 8004824:	ffffefff 	.word	0xffffefff

08004828 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004828:	b580      	push	{r7, lr}
 800482a:	b084      	sub	sp, #16
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
 8004830:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2241      	movs	r2, #65	; 0x41
 8004836:	5c9b      	ldrb	r3, [r3, r2]
 8004838:	b2db      	uxtb	r3, r3
 800483a:	2b20      	cmp	r3, #32
 800483c:	d139      	bne.n	80048b2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	2240      	movs	r2, #64	; 0x40
 8004842:	5c9b      	ldrb	r3, [r3, r2]
 8004844:	2b01      	cmp	r3, #1
 8004846:	d101      	bne.n	800484c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004848:	2302      	movs	r3, #2
 800484a:	e033      	b.n	80048b4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2240      	movs	r2, #64	; 0x40
 8004850:	2101      	movs	r1, #1
 8004852:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2241      	movs	r2, #65	; 0x41
 8004858:	2124      	movs	r1, #36	; 0x24
 800485a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	681a      	ldr	r2, [r3, #0]
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	2101      	movs	r1, #1
 8004868:	438a      	bics	r2, r1
 800486a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	4a11      	ldr	r2, [pc, #68]	; (80048bc <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8004878:	4013      	ands	r3, r2
 800487a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	021b      	lsls	r3, r3, #8
 8004880:	68fa      	ldr	r2, [r7, #12]
 8004882:	4313      	orrs	r3, r2
 8004884:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	68fa      	ldr	r2, [r7, #12]
 800488c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	681a      	ldr	r2, [r3, #0]
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	2101      	movs	r1, #1
 800489a:	430a      	orrs	r2, r1
 800489c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2241      	movs	r2, #65	; 0x41
 80048a2:	2120      	movs	r1, #32
 80048a4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2240      	movs	r2, #64	; 0x40
 80048aa:	2100      	movs	r1, #0
 80048ac:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80048ae:	2300      	movs	r3, #0
 80048b0:	e000      	b.n	80048b4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80048b2:	2302      	movs	r3, #2
  }
}
 80048b4:	0018      	movs	r0, r3
 80048b6:	46bd      	mov	sp, r7
 80048b8:	b004      	add	sp, #16
 80048ba:	bd80      	pop	{r7, pc}
 80048bc:	fffff0ff 	.word	0xfffff0ff

080048c0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b084      	sub	sp, #16
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80048c8:	4b19      	ldr	r3, [pc, #100]	; (8004930 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	4a19      	ldr	r2, [pc, #100]	; (8004934 <HAL_PWREx_ControlVoltageScaling+0x74>)
 80048ce:	4013      	ands	r3, r2
 80048d0:	0019      	movs	r1, r3
 80048d2:	4b17      	ldr	r3, [pc, #92]	; (8004930 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80048d4:	687a      	ldr	r2, [r7, #4]
 80048d6:	430a      	orrs	r2, r1
 80048d8:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80048da:	687a      	ldr	r2, [r7, #4]
 80048dc:	2380      	movs	r3, #128	; 0x80
 80048de:	009b      	lsls	r3, r3, #2
 80048e0:	429a      	cmp	r2, r3
 80048e2:	d11f      	bne.n	8004924 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80048e4:	4b14      	ldr	r3, [pc, #80]	; (8004938 <HAL_PWREx_ControlVoltageScaling+0x78>)
 80048e6:	681a      	ldr	r2, [r3, #0]
 80048e8:	0013      	movs	r3, r2
 80048ea:	005b      	lsls	r3, r3, #1
 80048ec:	189b      	adds	r3, r3, r2
 80048ee:	005b      	lsls	r3, r3, #1
 80048f0:	4912      	ldr	r1, [pc, #72]	; (800493c <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80048f2:	0018      	movs	r0, r3
 80048f4:	f7fb fc22 	bl	800013c <__udivsi3>
 80048f8:	0003      	movs	r3, r0
 80048fa:	3301      	adds	r3, #1
 80048fc:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80048fe:	e008      	b.n	8004912 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d003      	beq.n	800490e <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	3b01      	subs	r3, #1
 800490a:	60fb      	str	r3, [r7, #12]
 800490c:	e001      	b.n	8004912 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800490e:	2303      	movs	r3, #3
 8004910:	e009      	b.n	8004926 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004912:	4b07      	ldr	r3, [pc, #28]	; (8004930 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004914:	695a      	ldr	r2, [r3, #20]
 8004916:	2380      	movs	r3, #128	; 0x80
 8004918:	00db      	lsls	r3, r3, #3
 800491a:	401a      	ands	r2, r3
 800491c:	2380      	movs	r3, #128	; 0x80
 800491e:	00db      	lsls	r3, r3, #3
 8004920:	429a      	cmp	r2, r3
 8004922:	d0ed      	beq.n	8004900 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8004924:	2300      	movs	r3, #0
}
 8004926:	0018      	movs	r0, r3
 8004928:	46bd      	mov	sp, r7
 800492a:	b004      	add	sp, #16
 800492c:	bd80      	pop	{r7, pc}
 800492e:	46c0      	nop			; (mov r8, r8)
 8004930:	40007000 	.word	0x40007000
 8004934:	fffff9ff 	.word	0xfffff9ff
 8004938:	20000000 	.word	0x20000000
 800493c:	000f4240 	.word	0x000f4240

08004940 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8004940:	b580      	push	{r7, lr}
 8004942:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8004944:	4b03      	ldr	r3, [pc, #12]	; (8004954 <LL_RCC_GetAPB1Prescaler+0x14>)
 8004946:	689a      	ldr	r2, [r3, #8]
 8004948:	23e0      	movs	r3, #224	; 0xe0
 800494a:	01db      	lsls	r3, r3, #7
 800494c:	4013      	ands	r3, r2
}
 800494e:	0018      	movs	r0, r3
 8004950:	46bd      	mov	sp, r7
 8004952:	bd80      	pop	{r7, pc}
 8004954:	40021000 	.word	0x40021000

08004958 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004958:	b580      	push	{r7, lr}
 800495a:	b088      	sub	sp, #32
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d101      	bne.n	800496a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004966:	2301      	movs	r3, #1
 8004968:	e2fe      	b.n	8004f68 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	2201      	movs	r2, #1
 8004970:	4013      	ands	r3, r2
 8004972:	d100      	bne.n	8004976 <HAL_RCC_OscConfig+0x1e>
 8004974:	e07c      	b.n	8004a70 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004976:	4bc3      	ldr	r3, [pc, #780]	; (8004c84 <HAL_RCC_OscConfig+0x32c>)
 8004978:	689b      	ldr	r3, [r3, #8]
 800497a:	2238      	movs	r2, #56	; 0x38
 800497c:	4013      	ands	r3, r2
 800497e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004980:	4bc0      	ldr	r3, [pc, #768]	; (8004c84 <HAL_RCC_OscConfig+0x32c>)
 8004982:	68db      	ldr	r3, [r3, #12]
 8004984:	2203      	movs	r2, #3
 8004986:	4013      	ands	r3, r2
 8004988:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 800498a:	69bb      	ldr	r3, [r7, #24]
 800498c:	2b10      	cmp	r3, #16
 800498e:	d102      	bne.n	8004996 <HAL_RCC_OscConfig+0x3e>
 8004990:	697b      	ldr	r3, [r7, #20]
 8004992:	2b03      	cmp	r3, #3
 8004994:	d002      	beq.n	800499c <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8004996:	69bb      	ldr	r3, [r7, #24]
 8004998:	2b08      	cmp	r3, #8
 800499a:	d10b      	bne.n	80049b4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800499c:	4bb9      	ldr	r3, [pc, #740]	; (8004c84 <HAL_RCC_OscConfig+0x32c>)
 800499e:	681a      	ldr	r2, [r3, #0]
 80049a0:	2380      	movs	r3, #128	; 0x80
 80049a2:	029b      	lsls	r3, r3, #10
 80049a4:	4013      	ands	r3, r2
 80049a6:	d062      	beq.n	8004a6e <HAL_RCC_OscConfig+0x116>
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	685b      	ldr	r3, [r3, #4]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d15e      	bne.n	8004a6e <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 80049b0:	2301      	movs	r3, #1
 80049b2:	e2d9      	b.n	8004f68 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	685a      	ldr	r2, [r3, #4]
 80049b8:	2380      	movs	r3, #128	; 0x80
 80049ba:	025b      	lsls	r3, r3, #9
 80049bc:	429a      	cmp	r2, r3
 80049be:	d107      	bne.n	80049d0 <HAL_RCC_OscConfig+0x78>
 80049c0:	4bb0      	ldr	r3, [pc, #704]	; (8004c84 <HAL_RCC_OscConfig+0x32c>)
 80049c2:	681a      	ldr	r2, [r3, #0]
 80049c4:	4baf      	ldr	r3, [pc, #700]	; (8004c84 <HAL_RCC_OscConfig+0x32c>)
 80049c6:	2180      	movs	r1, #128	; 0x80
 80049c8:	0249      	lsls	r1, r1, #9
 80049ca:	430a      	orrs	r2, r1
 80049cc:	601a      	str	r2, [r3, #0]
 80049ce:	e020      	b.n	8004a12 <HAL_RCC_OscConfig+0xba>
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	685a      	ldr	r2, [r3, #4]
 80049d4:	23a0      	movs	r3, #160	; 0xa0
 80049d6:	02db      	lsls	r3, r3, #11
 80049d8:	429a      	cmp	r2, r3
 80049da:	d10e      	bne.n	80049fa <HAL_RCC_OscConfig+0xa2>
 80049dc:	4ba9      	ldr	r3, [pc, #676]	; (8004c84 <HAL_RCC_OscConfig+0x32c>)
 80049de:	681a      	ldr	r2, [r3, #0]
 80049e0:	4ba8      	ldr	r3, [pc, #672]	; (8004c84 <HAL_RCC_OscConfig+0x32c>)
 80049e2:	2180      	movs	r1, #128	; 0x80
 80049e4:	02c9      	lsls	r1, r1, #11
 80049e6:	430a      	orrs	r2, r1
 80049e8:	601a      	str	r2, [r3, #0]
 80049ea:	4ba6      	ldr	r3, [pc, #664]	; (8004c84 <HAL_RCC_OscConfig+0x32c>)
 80049ec:	681a      	ldr	r2, [r3, #0]
 80049ee:	4ba5      	ldr	r3, [pc, #660]	; (8004c84 <HAL_RCC_OscConfig+0x32c>)
 80049f0:	2180      	movs	r1, #128	; 0x80
 80049f2:	0249      	lsls	r1, r1, #9
 80049f4:	430a      	orrs	r2, r1
 80049f6:	601a      	str	r2, [r3, #0]
 80049f8:	e00b      	b.n	8004a12 <HAL_RCC_OscConfig+0xba>
 80049fa:	4ba2      	ldr	r3, [pc, #648]	; (8004c84 <HAL_RCC_OscConfig+0x32c>)
 80049fc:	681a      	ldr	r2, [r3, #0]
 80049fe:	4ba1      	ldr	r3, [pc, #644]	; (8004c84 <HAL_RCC_OscConfig+0x32c>)
 8004a00:	49a1      	ldr	r1, [pc, #644]	; (8004c88 <HAL_RCC_OscConfig+0x330>)
 8004a02:	400a      	ands	r2, r1
 8004a04:	601a      	str	r2, [r3, #0]
 8004a06:	4b9f      	ldr	r3, [pc, #636]	; (8004c84 <HAL_RCC_OscConfig+0x32c>)
 8004a08:	681a      	ldr	r2, [r3, #0]
 8004a0a:	4b9e      	ldr	r3, [pc, #632]	; (8004c84 <HAL_RCC_OscConfig+0x32c>)
 8004a0c:	499f      	ldr	r1, [pc, #636]	; (8004c8c <HAL_RCC_OscConfig+0x334>)
 8004a0e:	400a      	ands	r2, r1
 8004a10:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	685b      	ldr	r3, [r3, #4]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d014      	beq.n	8004a44 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a1a:	f7fe ff43 	bl	80038a4 <HAL_GetTick>
 8004a1e:	0003      	movs	r3, r0
 8004a20:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004a22:	e008      	b.n	8004a36 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a24:	f7fe ff3e 	bl	80038a4 <HAL_GetTick>
 8004a28:	0002      	movs	r2, r0
 8004a2a:	693b      	ldr	r3, [r7, #16]
 8004a2c:	1ad3      	subs	r3, r2, r3
 8004a2e:	2b64      	cmp	r3, #100	; 0x64
 8004a30:	d901      	bls.n	8004a36 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8004a32:	2303      	movs	r3, #3
 8004a34:	e298      	b.n	8004f68 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004a36:	4b93      	ldr	r3, [pc, #588]	; (8004c84 <HAL_RCC_OscConfig+0x32c>)
 8004a38:	681a      	ldr	r2, [r3, #0]
 8004a3a:	2380      	movs	r3, #128	; 0x80
 8004a3c:	029b      	lsls	r3, r3, #10
 8004a3e:	4013      	ands	r3, r2
 8004a40:	d0f0      	beq.n	8004a24 <HAL_RCC_OscConfig+0xcc>
 8004a42:	e015      	b.n	8004a70 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a44:	f7fe ff2e 	bl	80038a4 <HAL_GetTick>
 8004a48:	0003      	movs	r3, r0
 8004a4a:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004a4c:	e008      	b.n	8004a60 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a4e:	f7fe ff29 	bl	80038a4 <HAL_GetTick>
 8004a52:	0002      	movs	r2, r0
 8004a54:	693b      	ldr	r3, [r7, #16]
 8004a56:	1ad3      	subs	r3, r2, r3
 8004a58:	2b64      	cmp	r3, #100	; 0x64
 8004a5a:	d901      	bls.n	8004a60 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8004a5c:	2303      	movs	r3, #3
 8004a5e:	e283      	b.n	8004f68 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004a60:	4b88      	ldr	r3, [pc, #544]	; (8004c84 <HAL_RCC_OscConfig+0x32c>)
 8004a62:	681a      	ldr	r2, [r3, #0]
 8004a64:	2380      	movs	r3, #128	; 0x80
 8004a66:	029b      	lsls	r3, r3, #10
 8004a68:	4013      	ands	r3, r2
 8004a6a:	d1f0      	bne.n	8004a4e <HAL_RCC_OscConfig+0xf6>
 8004a6c:	e000      	b.n	8004a70 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a6e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	2202      	movs	r2, #2
 8004a76:	4013      	ands	r3, r2
 8004a78:	d100      	bne.n	8004a7c <HAL_RCC_OscConfig+0x124>
 8004a7a:	e099      	b.n	8004bb0 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004a7c:	4b81      	ldr	r3, [pc, #516]	; (8004c84 <HAL_RCC_OscConfig+0x32c>)
 8004a7e:	689b      	ldr	r3, [r3, #8]
 8004a80:	2238      	movs	r2, #56	; 0x38
 8004a82:	4013      	ands	r3, r2
 8004a84:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004a86:	4b7f      	ldr	r3, [pc, #508]	; (8004c84 <HAL_RCC_OscConfig+0x32c>)
 8004a88:	68db      	ldr	r3, [r3, #12]
 8004a8a:	2203      	movs	r2, #3
 8004a8c:	4013      	ands	r3, r2
 8004a8e:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8004a90:	69bb      	ldr	r3, [r7, #24]
 8004a92:	2b10      	cmp	r3, #16
 8004a94:	d102      	bne.n	8004a9c <HAL_RCC_OscConfig+0x144>
 8004a96:	697b      	ldr	r3, [r7, #20]
 8004a98:	2b02      	cmp	r3, #2
 8004a9a:	d002      	beq.n	8004aa2 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8004a9c:	69bb      	ldr	r3, [r7, #24]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d135      	bne.n	8004b0e <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004aa2:	4b78      	ldr	r3, [pc, #480]	; (8004c84 <HAL_RCC_OscConfig+0x32c>)
 8004aa4:	681a      	ldr	r2, [r3, #0]
 8004aa6:	2380      	movs	r3, #128	; 0x80
 8004aa8:	00db      	lsls	r3, r3, #3
 8004aaa:	4013      	ands	r3, r2
 8004aac:	d005      	beq.n	8004aba <HAL_RCC_OscConfig+0x162>
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	68db      	ldr	r3, [r3, #12]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d101      	bne.n	8004aba <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8004ab6:	2301      	movs	r3, #1
 8004ab8:	e256      	b.n	8004f68 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004aba:	4b72      	ldr	r3, [pc, #456]	; (8004c84 <HAL_RCC_OscConfig+0x32c>)
 8004abc:	685b      	ldr	r3, [r3, #4]
 8004abe:	4a74      	ldr	r2, [pc, #464]	; (8004c90 <HAL_RCC_OscConfig+0x338>)
 8004ac0:	4013      	ands	r3, r2
 8004ac2:	0019      	movs	r1, r3
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	695b      	ldr	r3, [r3, #20]
 8004ac8:	021a      	lsls	r2, r3, #8
 8004aca:	4b6e      	ldr	r3, [pc, #440]	; (8004c84 <HAL_RCC_OscConfig+0x32c>)
 8004acc:	430a      	orrs	r2, r1
 8004ace:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004ad0:	69bb      	ldr	r3, [r7, #24]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d112      	bne.n	8004afc <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8004ad6:	4b6b      	ldr	r3, [pc, #428]	; (8004c84 <HAL_RCC_OscConfig+0x32c>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	4a6e      	ldr	r2, [pc, #440]	; (8004c94 <HAL_RCC_OscConfig+0x33c>)
 8004adc:	4013      	ands	r3, r2
 8004ade:	0019      	movs	r1, r3
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	691a      	ldr	r2, [r3, #16]
 8004ae4:	4b67      	ldr	r3, [pc, #412]	; (8004c84 <HAL_RCC_OscConfig+0x32c>)
 8004ae6:	430a      	orrs	r2, r1
 8004ae8:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8004aea:	4b66      	ldr	r3, [pc, #408]	; (8004c84 <HAL_RCC_OscConfig+0x32c>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	0adb      	lsrs	r3, r3, #11
 8004af0:	2207      	movs	r2, #7
 8004af2:	4013      	ands	r3, r2
 8004af4:	4a68      	ldr	r2, [pc, #416]	; (8004c98 <HAL_RCC_OscConfig+0x340>)
 8004af6:	40da      	lsrs	r2, r3
 8004af8:	4b68      	ldr	r3, [pc, #416]	; (8004c9c <HAL_RCC_OscConfig+0x344>)
 8004afa:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004afc:	4b68      	ldr	r3, [pc, #416]	; (8004ca0 <HAL_RCC_OscConfig+0x348>)
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	0018      	movs	r0, r3
 8004b02:	f7fe fe73 	bl	80037ec <HAL_InitTick>
 8004b06:	1e03      	subs	r3, r0, #0
 8004b08:	d051      	beq.n	8004bae <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8004b0a:	2301      	movs	r3, #1
 8004b0c:	e22c      	b.n	8004f68 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	68db      	ldr	r3, [r3, #12]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d030      	beq.n	8004b78 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8004b16:	4b5b      	ldr	r3, [pc, #364]	; (8004c84 <HAL_RCC_OscConfig+0x32c>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	4a5e      	ldr	r2, [pc, #376]	; (8004c94 <HAL_RCC_OscConfig+0x33c>)
 8004b1c:	4013      	ands	r3, r2
 8004b1e:	0019      	movs	r1, r3
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	691a      	ldr	r2, [r3, #16]
 8004b24:	4b57      	ldr	r3, [pc, #348]	; (8004c84 <HAL_RCC_OscConfig+0x32c>)
 8004b26:	430a      	orrs	r2, r1
 8004b28:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8004b2a:	4b56      	ldr	r3, [pc, #344]	; (8004c84 <HAL_RCC_OscConfig+0x32c>)
 8004b2c:	681a      	ldr	r2, [r3, #0]
 8004b2e:	4b55      	ldr	r3, [pc, #340]	; (8004c84 <HAL_RCC_OscConfig+0x32c>)
 8004b30:	2180      	movs	r1, #128	; 0x80
 8004b32:	0049      	lsls	r1, r1, #1
 8004b34:	430a      	orrs	r2, r1
 8004b36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b38:	f7fe feb4 	bl	80038a4 <HAL_GetTick>
 8004b3c:	0003      	movs	r3, r0
 8004b3e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004b40:	e008      	b.n	8004b54 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b42:	f7fe feaf 	bl	80038a4 <HAL_GetTick>
 8004b46:	0002      	movs	r2, r0
 8004b48:	693b      	ldr	r3, [r7, #16]
 8004b4a:	1ad3      	subs	r3, r2, r3
 8004b4c:	2b02      	cmp	r3, #2
 8004b4e:	d901      	bls.n	8004b54 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8004b50:	2303      	movs	r3, #3
 8004b52:	e209      	b.n	8004f68 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004b54:	4b4b      	ldr	r3, [pc, #300]	; (8004c84 <HAL_RCC_OscConfig+0x32c>)
 8004b56:	681a      	ldr	r2, [r3, #0]
 8004b58:	2380      	movs	r3, #128	; 0x80
 8004b5a:	00db      	lsls	r3, r3, #3
 8004b5c:	4013      	ands	r3, r2
 8004b5e:	d0f0      	beq.n	8004b42 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b60:	4b48      	ldr	r3, [pc, #288]	; (8004c84 <HAL_RCC_OscConfig+0x32c>)
 8004b62:	685b      	ldr	r3, [r3, #4]
 8004b64:	4a4a      	ldr	r2, [pc, #296]	; (8004c90 <HAL_RCC_OscConfig+0x338>)
 8004b66:	4013      	ands	r3, r2
 8004b68:	0019      	movs	r1, r3
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	695b      	ldr	r3, [r3, #20]
 8004b6e:	021a      	lsls	r2, r3, #8
 8004b70:	4b44      	ldr	r3, [pc, #272]	; (8004c84 <HAL_RCC_OscConfig+0x32c>)
 8004b72:	430a      	orrs	r2, r1
 8004b74:	605a      	str	r2, [r3, #4]
 8004b76:	e01b      	b.n	8004bb0 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8004b78:	4b42      	ldr	r3, [pc, #264]	; (8004c84 <HAL_RCC_OscConfig+0x32c>)
 8004b7a:	681a      	ldr	r2, [r3, #0]
 8004b7c:	4b41      	ldr	r3, [pc, #260]	; (8004c84 <HAL_RCC_OscConfig+0x32c>)
 8004b7e:	4949      	ldr	r1, [pc, #292]	; (8004ca4 <HAL_RCC_OscConfig+0x34c>)
 8004b80:	400a      	ands	r2, r1
 8004b82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b84:	f7fe fe8e 	bl	80038a4 <HAL_GetTick>
 8004b88:	0003      	movs	r3, r0
 8004b8a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004b8c:	e008      	b.n	8004ba0 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b8e:	f7fe fe89 	bl	80038a4 <HAL_GetTick>
 8004b92:	0002      	movs	r2, r0
 8004b94:	693b      	ldr	r3, [r7, #16]
 8004b96:	1ad3      	subs	r3, r2, r3
 8004b98:	2b02      	cmp	r3, #2
 8004b9a:	d901      	bls.n	8004ba0 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8004b9c:	2303      	movs	r3, #3
 8004b9e:	e1e3      	b.n	8004f68 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004ba0:	4b38      	ldr	r3, [pc, #224]	; (8004c84 <HAL_RCC_OscConfig+0x32c>)
 8004ba2:	681a      	ldr	r2, [r3, #0]
 8004ba4:	2380      	movs	r3, #128	; 0x80
 8004ba6:	00db      	lsls	r3, r3, #3
 8004ba8:	4013      	ands	r3, r2
 8004baa:	d1f0      	bne.n	8004b8e <HAL_RCC_OscConfig+0x236>
 8004bac:	e000      	b.n	8004bb0 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004bae:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	2208      	movs	r2, #8
 8004bb6:	4013      	ands	r3, r2
 8004bb8:	d047      	beq.n	8004c4a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8004bba:	4b32      	ldr	r3, [pc, #200]	; (8004c84 <HAL_RCC_OscConfig+0x32c>)
 8004bbc:	689b      	ldr	r3, [r3, #8]
 8004bbe:	2238      	movs	r2, #56	; 0x38
 8004bc0:	4013      	ands	r3, r2
 8004bc2:	2b18      	cmp	r3, #24
 8004bc4:	d10a      	bne.n	8004bdc <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8004bc6:	4b2f      	ldr	r3, [pc, #188]	; (8004c84 <HAL_RCC_OscConfig+0x32c>)
 8004bc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004bca:	2202      	movs	r2, #2
 8004bcc:	4013      	ands	r3, r2
 8004bce:	d03c      	beq.n	8004c4a <HAL_RCC_OscConfig+0x2f2>
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	699b      	ldr	r3, [r3, #24]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d138      	bne.n	8004c4a <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8004bd8:	2301      	movs	r3, #1
 8004bda:	e1c5      	b.n	8004f68 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	699b      	ldr	r3, [r3, #24]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d019      	beq.n	8004c18 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8004be4:	4b27      	ldr	r3, [pc, #156]	; (8004c84 <HAL_RCC_OscConfig+0x32c>)
 8004be6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004be8:	4b26      	ldr	r3, [pc, #152]	; (8004c84 <HAL_RCC_OscConfig+0x32c>)
 8004bea:	2101      	movs	r1, #1
 8004bec:	430a      	orrs	r2, r1
 8004bee:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bf0:	f7fe fe58 	bl	80038a4 <HAL_GetTick>
 8004bf4:	0003      	movs	r3, r0
 8004bf6:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004bf8:	e008      	b.n	8004c0c <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004bfa:	f7fe fe53 	bl	80038a4 <HAL_GetTick>
 8004bfe:	0002      	movs	r2, r0
 8004c00:	693b      	ldr	r3, [r7, #16]
 8004c02:	1ad3      	subs	r3, r2, r3
 8004c04:	2b02      	cmp	r3, #2
 8004c06:	d901      	bls.n	8004c0c <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8004c08:	2303      	movs	r3, #3
 8004c0a:	e1ad      	b.n	8004f68 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004c0c:	4b1d      	ldr	r3, [pc, #116]	; (8004c84 <HAL_RCC_OscConfig+0x32c>)
 8004c0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c10:	2202      	movs	r2, #2
 8004c12:	4013      	ands	r3, r2
 8004c14:	d0f1      	beq.n	8004bfa <HAL_RCC_OscConfig+0x2a2>
 8004c16:	e018      	b.n	8004c4a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8004c18:	4b1a      	ldr	r3, [pc, #104]	; (8004c84 <HAL_RCC_OscConfig+0x32c>)
 8004c1a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004c1c:	4b19      	ldr	r3, [pc, #100]	; (8004c84 <HAL_RCC_OscConfig+0x32c>)
 8004c1e:	2101      	movs	r1, #1
 8004c20:	438a      	bics	r2, r1
 8004c22:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c24:	f7fe fe3e 	bl	80038a4 <HAL_GetTick>
 8004c28:	0003      	movs	r3, r0
 8004c2a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004c2c:	e008      	b.n	8004c40 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c2e:	f7fe fe39 	bl	80038a4 <HAL_GetTick>
 8004c32:	0002      	movs	r2, r0
 8004c34:	693b      	ldr	r3, [r7, #16]
 8004c36:	1ad3      	subs	r3, r2, r3
 8004c38:	2b02      	cmp	r3, #2
 8004c3a:	d901      	bls.n	8004c40 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8004c3c:	2303      	movs	r3, #3
 8004c3e:	e193      	b.n	8004f68 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004c40:	4b10      	ldr	r3, [pc, #64]	; (8004c84 <HAL_RCC_OscConfig+0x32c>)
 8004c42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c44:	2202      	movs	r2, #2
 8004c46:	4013      	ands	r3, r2
 8004c48:	d1f1      	bne.n	8004c2e <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	2204      	movs	r2, #4
 8004c50:	4013      	ands	r3, r2
 8004c52:	d100      	bne.n	8004c56 <HAL_RCC_OscConfig+0x2fe>
 8004c54:	e0c6      	b.n	8004de4 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c56:	231f      	movs	r3, #31
 8004c58:	18fb      	adds	r3, r7, r3
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8004c5e:	4b09      	ldr	r3, [pc, #36]	; (8004c84 <HAL_RCC_OscConfig+0x32c>)
 8004c60:	689b      	ldr	r3, [r3, #8]
 8004c62:	2238      	movs	r2, #56	; 0x38
 8004c64:	4013      	ands	r3, r2
 8004c66:	2b20      	cmp	r3, #32
 8004c68:	d11e      	bne.n	8004ca8 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8004c6a:	4b06      	ldr	r3, [pc, #24]	; (8004c84 <HAL_RCC_OscConfig+0x32c>)
 8004c6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c6e:	2202      	movs	r2, #2
 8004c70:	4013      	ands	r3, r2
 8004c72:	d100      	bne.n	8004c76 <HAL_RCC_OscConfig+0x31e>
 8004c74:	e0b6      	b.n	8004de4 <HAL_RCC_OscConfig+0x48c>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	689b      	ldr	r3, [r3, #8]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d000      	beq.n	8004c80 <HAL_RCC_OscConfig+0x328>
 8004c7e:	e0b1      	b.n	8004de4 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8004c80:	2301      	movs	r3, #1
 8004c82:	e171      	b.n	8004f68 <HAL_RCC_OscConfig+0x610>
 8004c84:	40021000 	.word	0x40021000
 8004c88:	fffeffff 	.word	0xfffeffff
 8004c8c:	fffbffff 	.word	0xfffbffff
 8004c90:	ffff80ff 	.word	0xffff80ff
 8004c94:	ffffc7ff 	.word	0xffffc7ff
 8004c98:	00f42400 	.word	0x00f42400
 8004c9c:	20000000 	.word	0x20000000
 8004ca0:	20000004 	.word	0x20000004
 8004ca4:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004ca8:	4bb1      	ldr	r3, [pc, #708]	; (8004f70 <HAL_RCC_OscConfig+0x618>)
 8004caa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004cac:	2380      	movs	r3, #128	; 0x80
 8004cae:	055b      	lsls	r3, r3, #21
 8004cb0:	4013      	ands	r3, r2
 8004cb2:	d101      	bne.n	8004cb8 <HAL_RCC_OscConfig+0x360>
 8004cb4:	2301      	movs	r3, #1
 8004cb6:	e000      	b.n	8004cba <HAL_RCC_OscConfig+0x362>
 8004cb8:	2300      	movs	r3, #0
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d011      	beq.n	8004ce2 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8004cbe:	4bac      	ldr	r3, [pc, #688]	; (8004f70 <HAL_RCC_OscConfig+0x618>)
 8004cc0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004cc2:	4bab      	ldr	r3, [pc, #684]	; (8004f70 <HAL_RCC_OscConfig+0x618>)
 8004cc4:	2180      	movs	r1, #128	; 0x80
 8004cc6:	0549      	lsls	r1, r1, #21
 8004cc8:	430a      	orrs	r2, r1
 8004cca:	63da      	str	r2, [r3, #60]	; 0x3c
 8004ccc:	4ba8      	ldr	r3, [pc, #672]	; (8004f70 <HAL_RCC_OscConfig+0x618>)
 8004cce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004cd0:	2380      	movs	r3, #128	; 0x80
 8004cd2:	055b      	lsls	r3, r3, #21
 8004cd4:	4013      	ands	r3, r2
 8004cd6:	60fb      	str	r3, [r7, #12]
 8004cd8:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8004cda:	231f      	movs	r3, #31
 8004cdc:	18fb      	adds	r3, r7, r3
 8004cde:	2201      	movs	r2, #1
 8004ce0:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004ce2:	4ba4      	ldr	r3, [pc, #656]	; (8004f74 <HAL_RCC_OscConfig+0x61c>)
 8004ce4:	681a      	ldr	r2, [r3, #0]
 8004ce6:	2380      	movs	r3, #128	; 0x80
 8004ce8:	005b      	lsls	r3, r3, #1
 8004cea:	4013      	ands	r3, r2
 8004cec:	d11a      	bne.n	8004d24 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004cee:	4ba1      	ldr	r3, [pc, #644]	; (8004f74 <HAL_RCC_OscConfig+0x61c>)
 8004cf0:	681a      	ldr	r2, [r3, #0]
 8004cf2:	4ba0      	ldr	r3, [pc, #640]	; (8004f74 <HAL_RCC_OscConfig+0x61c>)
 8004cf4:	2180      	movs	r1, #128	; 0x80
 8004cf6:	0049      	lsls	r1, r1, #1
 8004cf8:	430a      	orrs	r2, r1
 8004cfa:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8004cfc:	f7fe fdd2 	bl	80038a4 <HAL_GetTick>
 8004d00:	0003      	movs	r3, r0
 8004d02:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d04:	e008      	b.n	8004d18 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d06:	f7fe fdcd 	bl	80038a4 <HAL_GetTick>
 8004d0a:	0002      	movs	r2, r0
 8004d0c:	693b      	ldr	r3, [r7, #16]
 8004d0e:	1ad3      	subs	r3, r2, r3
 8004d10:	2b02      	cmp	r3, #2
 8004d12:	d901      	bls.n	8004d18 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8004d14:	2303      	movs	r3, #3
 8004d16:	e127      	b.n	8004f68 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d18:	4b96      	ldr	r3, [pc, #600]	; (8004f74 <HAL_RCC_OscConfig+0x61c>)
 8004d1a:	681a      	ldr	r2, [r3, #0]
 8004d1c:	2380      	movs	r3, #128	; 0x80
 8004d1e:	005b      	lsls	r3, r3, #1
 8004d20:	4013      	ands	r3, r2
 8004d22:	d0f0      	beq.n	8004d06 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	689b      	ldr	r3, [r3, #8]
 8004d28:	2b01      	cmp	r3, #1
 8004d2a:	d106      	bne.n	8004d3a <HAL_RCC_OscConfig+0x3e2>
 8004d2c:	4b90      	ldr	r3, [pc, #576]	; (8004f70 <HAL_RCC_OscConfig+0x618>)
 8004d2e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004d30:	4b8f      	ldr	r3, [pc, #572]	; (8004f70 <HAL_RCC_OscConfig+0x618>)
 8004d32:	2101      	movs	r1, #1
 8004d34:	430a      	orrs	r2, r1
 8004d36:	65da      	str	r2, [r3, #92]	; 0x5c
 8004d38:	e01c      	b.n	8004d74 <HAL_RCC_OscConfig+0x41c>
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	689b      	ldr	r3, [r3, #8]
 8004d3e:	2b05      	cmp	r3, #5
 8004d40:	d10c      	bne.n	8004d5c <HAL_RCC_OscConfig+0x404>
 8004d42:	4b8b      	ldr	r3, [pc, #556]	; (8004f70 <HAL_RCC_OscConfig+0x618>)
 8004d44:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004d46:	4b8a      	ldr	r3, [pc, #552]	; (8004f70 <HAL_RCC_OscConfig+0x618>)
 8004d48:	2104      	movs	r1, #4
 8004d4a:	430a      	orrs	r2, r1
 8004d4c:	65da      	str	r2, [r3, #92]	; 0x5c
 8004d4e:	4b88      	ldr	r3, [pc, #544]	; (8004f70 <HAL_RCC_OscConfig+0x618>)
 8004d50:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004d52:	4b87      	ldr	r3, [pc, #540]	; (8004f70 <HAL_RCC_OscConfig+0x618>)
 8004d54:	2101      	movs	r1, #1
 8004d56:	430a      	orrs	r2, r1
 8004d58:	65da      	str	r2, [r3, #92]	; 0x5c
 8004d5a:	e00b      	b.n	8004d74 <HAL_RCC_OscConfig+0x41c>
 8004d5c:	4b84      	ldr	r3, [pc, #528]	; (8004f70 <HAL_RCC_OscConfig+0x618>)
 8004d5e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004d60:	4b83      	ldr	r3, [pc, #524]	; (8004f70 <HAL_RCC_OscConfig+0x618>)
 8004d62:	2101      	movs	r1, #1
 8004d64:	438a      	bics	r2, r1
 8004d66:	65da      	str	r2, [r3, #92]	; 0x5c
 8004d68:	4b81      	ldr	r3, [pc, #516]	; (8004f70 <HAL_RCC_OscConfig+0x618>)
 8004d6a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004d6c:	4b80      	ldr	r3, [pc, #512]	; (8004f70 <HAL_RCC_OscConfig+0x618>)
 8004d6e:	2104      	movs	r1, #4
 8004d70:	438a      	bics	r2, r1
 8004d72:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	689b      	ldr	r3, [r3, #8]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d014      	beq.n	8004da6 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d7c:	f7fe fd92 	bl	80038a4 <HAL_GetTick>
 8004d80:	0003      	movs	r3, r0
 8004d82:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d84:	e009      	b.n	8004d9a <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d86:	f7fe fd8d 	bl	80038a4 <HAL_GetTick>
 8004d8a:	0002      	movs	r2, r0
 8004d8c:	693b      	ldr	r3, [r7, #16]
 8004d8e:	1ad3      	subs	r3, r2, r3
 8004d90:	4a79      	ldr	r2, [pc, #484]	; (8004f78 <HAL_RCC_OscConfig+0x620>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d901      	bls.n	8004d9a <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8004d96:	2303      	movs	r3, #3
 8004d98:	e0e6      	b.n	8004f68 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d9a:	4b75      	ldr	r3, [pc, #468]	; (8004f70 <HAL_RCC_OscConfig+0x618>)
 8004d9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d9e:	2202      	movs	r2, #2
 8004da0:	4013      	ands	r3, r2
 8004da2:	d0f0      	beq.n	8004d86 <HAL_RCC_OscConfig+0x42e>
 8004da4:	e013      	b.n	8004dce <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004da6:	f7fe fd7d 	bl	80038a4 <HAL_GetTick>
 8004daa:	0003      	movs	r3, r0
 8004dac:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004dae:	e009      	b.n	8004dc4 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004db0:	f7fe fd78 	bl	80038a4 <HAL_GetTick>
 8004db4:	0002      	movs	r2, r0
 8004db6:	693b      	ldr	r3, [r7, #16]
 8004db8:	1ad3      	subs	r3, r2, r3
 8004dba:	4a6f      	ldr	r2, [pc, #444]	; (8004f78 <HAL_RCC_OscConfig+0x620>)
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d901      	bls.n	8004dc4 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8004dc0:	2303      	movs	r3, #3
 8004dc2:	e0d1      	b.n	8004f68 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004dc4:	4b6a      	ldr	r3, [pc, #424]	; (8004f70 <HAL_RCC_OscConfig+0x618>)
 8004dc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004dc8:	2202      	movs	r2, #2
 8004dca:	4013      	ands	r3, r2
 8004dcc:	d1f0      	bne.n	8004db0 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8004dce:	231f      	movs	r3, #31
 8004dd0:	18fb      	adds	r3, r7, r3
 8004dd2:	781b      	ldrb	r3, [r3, #0]
 8004dd4:	2b01      	cmp	r3, #1
 8004dd6:	d105      	bne.n	8004de4 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8004dd8:	4b65      	ldr	r3, [pc, #404]	; (8004f70 <HAL_RCC_OscConfig+0x618>)
 8004dda:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004ddc:	4b64      	ldr	r3, [pc, #400]	; (8004f70 <HAL_RCC_OscConfig+0x618>)
 8004dde:	4967      	ldr	r1, [pc, #412]	; (8004f7c <HAL_RCC_OscConfig+0x624>)
 8004de0:	400a      	ands	r2, r1
 8004de2:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	69db      	ldr	r3, [r3, #28]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d100      	bne.n	8004dee <HAL_RCC_OscConfig+0x496>
 8004dec:	e0bb      	b.n	8004f66 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004dee:	4b60      	ldr	r3, [pc, #384]	; (8004f70 <HAL_RCC_OscConfig+0x618>)
 8004df0:	689b      	ldr	r3, [r3, #8]
 8004df2:	2238      	movs	r2, #56	; 0x38
 8004df4:	4013      	ands	r3, r2
 8004df6:	2b10      	cmp	r3, #16
 8004df8:	d100      	bne.n	8004dfc <HAL_RCC_OscConfig+0x4a4>
 8004dfa:	e07b      	b.n	8004ef4 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	69db      	ldr	r3, [r3, #28]
 8004e00:	2b02      	cmp	r3, #2
 8004e02:	d156      	bne.n	8004eb2 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e04:	4b5a      	ldr	r3, [pc, #360]	; (8004f70 <HAL_RCC_OscConfig+0x618>)
 8004e06:	681a      	ldr	r2, [r3, #0]
 8004e08:	4b59      	ldr	r3, [pc, #356]	; (8004f70 <HAL_RCC_OscConfig+0x618>)
 8004e0a:	495d      	ldr	r1, [pc, #372]	; (8004f80 <HAL_RCC_OscConfig+0x628>)
 8004e0c:	400a      	ands	r2, r1
 8004e0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e10:	f7fe fd48 	bl	80038a4 <HAL_GetTick>
 8004e14:	0003      	movs	r3, r0
 8004e16:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004e18:	e008      	b.n	8004e2c <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e1a:	f7fe fd43 	bl	80038a4 <HAL_GetTick>
 8004e1e:	0002      	movs	r2, r0
 8004e20:	693b      	ldr	r3, [r7, #16]
 8004e22:	1ad3      	subs	r3, r2, r3
 8004e24:	2b02      	cmp	r3, #2
 8004e26:	d901      	bls.n	8004e2c <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8004e28:	2303      	movs	r3, #3
 8004e2a:	e09d      	b.n	8004f68 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004e2c:	4b50      	ldr	r3, [pc, #320]	; (8004f70 <HAL_RCC_OscConfig+0x618>)
 8004e2e:	681a      	ldr	r2, [r3, #0]
 8004e30:	2380      	movs	r3, #128	; 0x80
 8004e32:	049b      	lsls	r3, r3, #18
 8004e34:	4013      	ands	r3, r2
 8004e36:	d1f0      	bne.n	8004e1a <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004e38:	4b4d      	ldr	r3, [pc, #308]	; (8004f70 <HAL_RCC_OscConfig+0x618>)
 8004e3a:	68db      	ldr	r3, [r3, #12]
 8004e3c:	4a51      	ldr	r2, [pc, #324]	; (8004f84 <HAL_RCC_OscConfig+0x62c>)
 8004e3e:	4013      	ands	r3, r2
 8004e40:	0019      	movs	r1, r3
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6a1a      	ldr	r2, [r3, #32]
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e4a:	431a      	orrs	r2, r3
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e50:	021b      	lsls	r3, r3, #8
 8004e52:	431a      	orrs	r2, r3
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e58:	431a      	orrs	r2, r3
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e5e:	431a      	orrs	r2, r3
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e64:	431a      	orrs	r2, r3
 8004e66:	4b42      	ldr	r3, [pc, #264]	; (8004f70 <HAL_RCC_OscConfig+0x618>)
 8004e68:	430a      	orrs	r2, r1
 8004e6a:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004e6c:	4b40      	ldr	r3, [pc, #256]	; (8004f70 <HAL_RCC_OscConfig+0x618>)
 8004e6e:	681a      	ldr	r2, [r3, #0]
 8004e70:	4b3f      	ldr	r3, [pc, #252]	; (8004f70 <HAL_RCC_OscConfig+0x618>)
 8004e72:	2180      	movs	r1, #128	; 0x80
 8004e74:	0449      	lsls	r1, r1, #17
 8004e76:	430a      	orrs	r2, r1
 8004e78:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8004e7a:	4b3d      	ldr	r3, [pc, #244]	; (8004f70 <HAL_RCC_OscConfig+0x618>)
 8004e7c:	68da      	ldr	r2, [r3, #12]
 8004e7e:	4b3c      	ldr	r3, [pc, #240]	; (8004f70 <HAL_RCC_OscConfig+0x618>)
 8004e80:	2180      	movs	r1, #128	; 0x80
 8004e82:	0549      	lsls	r1, r1, #21
 8004e84:	430a      	orrs	r2, r1
 8004e86:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e88:	f7fe fd0c 	bl	80038a4 <HAL_GetTick>
 8004e8c:	0003      	movs	r3, r0
 8004e8e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e90:	e008      	b.n	8004ea4 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e92:	f7fe fd07 	bl	80038a4 <HAL_GetTick>
 8004e96:	0002      	movs	r2, r0
 8004e98:	693b      	ldr	r3, [r7, #16]
 8004e9a:	1ad3      	subs	r3, r2, r3
 8004e9c:	2b02      	cmp	r3, #2
 8004e9e:	d901      	bls.n	8004ea4 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8004ea0:	2303      	movs	r3, #3
 8004ea2:	e061      	b.n	8004f68 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ea4:	4b32      	ldr	r3, [pc, #200]	; (8004f70 <HAL_RCC_OscConfig+0x618>)
 8004ea6:	681a      	ldr	r2, [r3, #0]
 8004ea8:	2380      	movs	r3, #128	; 0x80
 8004eaa:	049b      	lsls	r3, r3, #18
 8004eac:	4013      	ands	r3, r2
 8004eae:	d0f0      	beq.n	8004e92 <HAL_RCC_OscConfig+0x53a>
 8004eb0:	e059      	b.n	8004f66 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004eb2:	4b2f      	ldr	r3, [pc, #188]	; (8004f70 <HAL_RCC_OscConfig+0x618>)
 8004eb4:	681a      	ldr	r2, [r3, #0]
 8004eb6:	4b2e      	ldr	r3, [pc, #184]	; (8004f70 <HAL_RCC_OscConfig+0x618>)
 8004eb8:	4931      	ldr	r1, [pc, #196]	; (8004f80 <HAL_RCC_OscConfig+0x628>)
 8004eba:	400a      	ands	r2, r1
 8004ebc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ebe:	f7fe fcf1 	bl	80038a4 <HAL_GetTick>
 8004ec2:	0003      	movs	r3, r0
 8004ec4:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004ec6:	e008      	b.n	8004eda <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ec8:	f7fe fcec 	bl	80038a4 <HAL_GetTick>
 8004ecc:	0002      	movs	r2, r0
 8004ece:	693b      	ldr	r3, [r7, #16]
 8004ed0:	1ad3      	subs	r3, r2, r3
 8004ed2:	2b02      	cmp	r3, #2
 8004ed4:	d901      	bls.n	8004eda <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8004ed6:	2303      	movs	r3, #3
 8004ed8:	e046      	b.n	8004f68 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004eda:	4b25      	ldr	r3, [pc, #148]	; (8004f70 <HAL_RCC_OscConfig+0x618>)
 8004edc:	681a      	ldr	r2, [r3, #0]
 8004ede:	2380      	movs	r3, #128	; 0x80
 8004ee0:	049b      	lsls	r3, r3, #18
 8004ee2:	4013      	ands	r3, r2
 8004ee4:	d1f0      	bne.n	8004ec8 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8004ee6:	4b22      	ldr	r3, [pc, #136]	; (8004f70 <HAL_RCC_OscConfig+0x618>)
 8004ee8:	68da      	ldr	r2, [r3, #12]
 8004eea:	4b21      	ldr	r3, [pc, #132]	; (8004f70 <HAL_RCC_OscConfig+0x618>)
 8004eec:	4926      	ldr	r1, [pc, #152]	; (8004f88 <HAL_RCC_OscConfig+0x630>)
 8004eee:	400a      	ands	r2, r1
 8004ef0:	60da      	str	r2, [r3, #12]
 8004ef2:	e038      	b.n	8004f66 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	69db      	ldr	r3, [r3, #28]
 8004ef8:	2b01      	cmp	r3, #1
 8004efa:	d101      	bne.n	8004f00 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8004efc:	2301      	movs	r3, #1
 8004efe:	e033      	b.n	8004f68 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8004f00:	4b1b      	ldr	r3, [pc, #108]	; (8004f70 <HAL_RCC_OscConfig+0x618>)
 8004f02:	68db      	ldr	r3, [r3, #12]
 8004f04:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f06:	697b      	ldr	r3, [r7, #20]
 8004f08:	2203      	movs	r2, #3
 8004f0a:	401a      	ands	r2, r3
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6a1b      	ldr	r3, [r3, #32]
 8004f10:	429a      	cmp	r2, r3
 8004f12:	d126      	bne.n	8004f62 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004f14:	697b      	ldr	r3, [r7, #20]
 8004f16:	2270      	movs	r2, #112	; 0x70
 8004f18:	401a      	ands	r2, r3
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f1e:	429a      	cmp	r2, r3
 8004f20:	d11f      	bne.n	8004f62 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004f22:	697a      	ldr	r2, [r7, #20]
 8004f24:	23fe      	movs	r3, #254	; 0xfe
 8004f26:	01db      	lsls	r3, r3, #7
 8004f28:	401a      	ands	r2, r3
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f2e:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004f30:	429a      	cmp	r2, r3
 8004f32:	d116      	bne.n	8004f62 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004f34:	697a      	ldr	r2, [r7, #20]
 8004f36:	23f8      	movs	r3, #248	; 0xf8
 8004f38:	039b      	lsls	r3, r3, #14
 8004f3a:	401a      	ands	r2, r3
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004f40:	429a      	cmp	r2, r3
 8004f42:	d10e      	bne.n	8004f62 <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004f44:	697a      	ldr	r2, [r7, #20]
 8004f46:	23e0      	movs	r3, #224	; 0xe0
 8004f48:	051b      	lsls	r3, r3, #20
 8004f4a:	401a      	ands	r2, r3
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004f50:	429a      	cmp	r2, r3
 8004f52:	d106      	bne.n	8004f62 <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8004f54:	697b      	ldr	r3, [r7, #20]
 8004f56:	0f5b      	lsrs	r3, r3, #29
 8004f58:	075a      	lsls	r2, r3, #29
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004f5e:	429a      	cmp	r2, r3
 8004f60:	d001      	beq.n	8004f66 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8004f62:	2301      	movs	r3, #1
 8004f64:	e000      	b.n	8004f68 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8004f66:	2300      	movs	r3, #0
}
 8004f68:	0018      	movs	r0, r3
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	b008      	add	sp, #32
 8004f6e:	bd80      	pop	{r7, pc}
 8004f70:	40021000 	.word	0x40021000
 8004f74:	40007000 	.word	0x40007000
 8004f78:	00001388 	.word	0x00001388
 8004f7c:	efffffff 	.word	0xefffffff
 8004f80:	feffffff 	.word	0xfeffffff
 8004f84:	11c1808c 	.word	0x11c1808c
 8004f88:	eefefffc 	.word	0xeefefffc

08004f8c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b084      	sub	sp, #16
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
 8004f94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d101      	bne.n	8004fa0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004f9c:	2301      	movs	r3, #1
 8004f9e:	e0e9      	b.n	8005174 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004fa0:	4b76      	ldr	r3, [pc, #472]	; (800517c <HAL_RCC_ClockConfig+0x1f0>)
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	2207      	movs	r2, #7
 8004fa6:	4013      	ands	r3, r2
 8004fa8:	683a      	ldr	r2, [r7, #0]
 8004faa:	429a      	cmp	r2, r3
 8004fac:	d91e      	bls.n	8004fec <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004fae:	4b73      	ldr	r3, [pc, #460]	; (800517c <HAL_RCC_ClockConfig+0x1f0>)
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	2207      	movs	r2, #7
 8004fb4:	4393      	bics	r3, r2
 8004fb6:	0019      	movs	r1, r3
 8004fb8:	4b70      	ldr	r3, [pc, #448]	; (800517c <HAL_RCC_ClockConfig+0x1f0>)
 8004fba:	683a      	ldr	r2, [r7, #0]
 8004fbc:	430a      	orrs	r2, r1
 8004fbe:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004fc0:	f7fe fc70 	bl	80038a4 <HAL_GetTick>
 8004fc4:	0003      	movs	r3, r0
 8004fc6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004fc8:	e009      	b.n	8004fde <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004fca:	f7fe fc6b 	bl	80038a4 <HAL_GetTick>
 8004fce:	0002      	movs	r2, r0
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	1ad3      	subs	r3, r2, r3
 8004fd4:	4a6a      	ldr	r2, [pc, #424]	; (8005180 <HAL_RCC_ClockConfig+0x1f4>)
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d901      	bls.n	8004fde <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8004fda:	2303      	movs	r3, #3
 8004fdc:	e0ca      	b.n	8005174 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004fde:	4b67      	ldr	r3, [pc, #412]	; (800517c <HAL_RCC_ClockConfig+0x1f0>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	2207      	movs	r2, #7
 8004fe4:	4013      	ands	r3, r2
 8004fe6:	683a      	ldr	r2, [r7, #0]
 8004fe8:	429a      	cmp	r2, r3
 8004fea:	d1ee      	bne.n	8004fca <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	2202      	movs	r2, #2
 8004ff2:	4013      	ands	r3, r2
 8004ff4:	d015      	beq.n	8005022 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	2204      	movs	r2, #4
 8004ffc:	4013      	ands	r3, r2
 8004ffe:	d006      	beq.n	800500e <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8005000:	4b60      	ldr	r3, [pc, #384]	; (8005184 <HAL_RCC_ClockConfig+0x1f8>)
 8005002:	689a      	ldr	r2, [r3, #8]
 8005004:	4b5f      	ldr	r3, [pc, #380]	; (8005184 <HAL_RCC_ClockConfig+0x1f8>)
 8005006:	21e0      	movs	r1, #224	; 0xe0
 8005008:	01c9      	lsls	r1, r1, #7
 800500a:	430a      	orrs	r2, r1
 800500c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800500e:	4b5d      	ldr	r3, [pc, #372]	; (8005184 <HAL_RCC_ClockConfig+0x1f8>)
 8005010:	689b      	ldr	r3, [r3, #8]
 8005012:	4a5d      	ldr	r2, [pc, #372]	; (8005188 <HAL_RCC_ClockConfig+0x1fc>)
 8005014:	4013      	ands	r3, r2
 8005016:	0019      	movs	r1, r3
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	689a      	ldr	r2, [r3, #8]
 800501c:	4b59      	ldr	r3, [pc, #356]	; (8005184 <HAL_RCC_ClockConfig+0x1f8>)
 800501e:	430a      	orrs	r2, r1
 8005020:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	2201      	movs	r2, #1
 8005028:	4013      	ands	r3, r2
 800502a:	d057      	beq.n	80050dc <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	685b      	ldr	r3, [r3, #4]
 8005030:	2b01      	cmp	r3, #1
 8005032:	d107      	bne.n	8005044 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005034:	4b53      	ldr	r3, [pc, #332]	; (8005184 <HAL_RCC_ClockConfig+0x1f8>)
 8005036:	681a      	ldr	r2, [r3, #0]
 8005038:	2380      	movs	r3, #128	; 0x80
 800503a:	029b      	lsls	r3, r3, #10
 800503c:	4013      	ands	r3, r2
 800503e:	d12b      	bne.n	8005098 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005040:	2301      	movs	r3, #1
 8005042:	e097      	b.n	8005174 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	685b      	ldr	r3, [r3, #4]
 8005048:	2b02      	cmp	r3, #2
 800504a:	d107      	bne.n	800505c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800504c:	4b4d      	ldr	r3, [pc, #308]	; (8005184 <HAL_RCC_ClockConfig+0x1f8>)
 800504e:	681a      	ldr	r2, [r3, #0]
 8005050:	2380      	movs	r3, #128	; 0x80
 8005052:	049b      	lsls	r3, r3, #18
 8005054:	4013      	ands	r3, r2
 8005056:	d11f      	bne.n	8005098 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005058:	2301      	movs	r3, #1
 800505a:	e08b      	b.n	8005174 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	685b      	ldr	r3, [r3, #4]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d107      	bne.n	8005074 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005064:	4b47      	ldr	r3, [pc, #284]	; (8005184 <HAL_RCC_ClockConfig+0x1f8>)
 8005066:	681a      	ldr	r2, [r3, #0]
 8005068:	2380      	movs	r3, #128	; 0x80
 800506a:	00db      	lsls	r3, r3, #3
 800506c:	4013      	ands	r3, r2
 800506e:	d113      	bne.n	8005098 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005070:	2301      	movs	r3, #1
 8005072:	e07f      	b.n	8005174 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	685b      	ldr	r3, [r3, #4]
 8005078:	2b03      	cmp	r3, #3
 800507a:	d106      	bne.n	800508a <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800507c:	4b41      	ldr	r3, [pc, #260]	; (8005184 <HAL_RCC_ClockConfig+0x1f8>)
 800507e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005080:	2202      	movs	r2, #2
 8005082:	4013      	ands	r3, r2
 8005084:	d108      	bne.n	8005098 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005086:	2301      	movs	r3, #1
 8005088:	e074      	b.n	8005174 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800508a:	4b3e      	ldr	r3, [pc, #248]	; (8005184 <HAL_RCC_ClockConfig+0x1f8>)
 800508c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800508e:	2202      	movs	r2, #2
 8005090:	4013      	ands	r3, r2
 8005092:	d101      	bne.n	8005098 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005094:	2301      	movs	r3, #1
 8005096:	e06d      	b.n	8005174 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005098:	4b3a      	ldr	r3, [pc, #232]	; (8005184 <HAL_RCC_ClockConfig+0x1f8>)
 800509a:	689b      	ldr	r3, [r3, #8]
 800509c:	2207      	movs	r2, #7
 800509e:	4393      	bics	r3, r2
 80050a0:	0019      	movs	r1, r3
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	685a      	ldr	r2, [r3, #4]
 80050a6:	4b37      	ldr	r3, [pc, #220]	; (8005184 <HAL_RCC_ClockConfig+0x1f8>)
 80050a8:	430a      	orrs	r2, r1
 80050aa:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80050ac:	f7fe fbfa 	bl	80038a4 <HAL_GetTick>
 80050b0:	0003      	movs	r3, r0
 80050b2:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050b4:	e009      	b.n	80050ca <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80050b6:	f7fe fbf5 	bl	80038a4 <HAL_GetTick>
 80050ba:	0002      	movs	r2, r0
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	1ad3      	subs	r3, r2, r3
 80050c0:	4a2f      	ldr	r2, [pc, #188]	; (8005180 <HAL_RCC_ClockConfig+0x1f4>)
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d901      	bls.n	80050ca <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80050c6:	2303      	movs	r3, #3
 80050c8:	e054      	b.n	8005174 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050ca:	4b2e      	ldr	r3, [pc, #184]	; (8005184 <HAL_RCC_ClockConfig+0x1f8>)
 80050cc:	689b      	ldr	r3, [r3, #8]
 80050ce:	2238      	movs	r2, #56	; 0x38
 80050d0:	401a      	ands	r2, r3
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	685b      	ldr	r3, [r3, #4]
 80050d6:	00db      	lsls	r3, r3, #3
 80050d8:	429a      	cmp	r2, r3
 80050da:	d1ec      	bne.n	80050b6 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80050dc:	4b27      	ldr	r3, [pc, #156]	; (800517c <HAL_RCC_ClockConfig+0x1f0>)
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	2207      	movs	r2, #7
 80050e2:	4013      	ands	r3, r2
 80050e4:	683a      	ldr	r2, [r7, #0]
 80050e6:	429a      	cmp	r2, r3
 80050e8:	d21e      	bcs.n	8005128 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050ea:	4b24      	ldr	r3, [pc, #144]	; (800517c <HAL_RCC_ClockConfig+0x1f0>)
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	2207      	movs	r2, #7
 80050f0:	4393      	bics	r3, r2
 80050f2:	0019      	movs	r1, r3
 80050f4:	4b21      	ldr	r3, [pc, #132]	; (800517c <HAL_RCC_ClockConfig+0x1f0>)
 80050f6:	683a      	ldr	r2, [r7, #0]
 80050f8:	430a      	orrs	r2, r1
 80050fa:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80050fc:	f7fe fbd2 	bl	80038a4 <HAL_GetTick>
 8005100:	0003      	movs	r3, r0
 8005102:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005104:	e009      	b.n	800511a <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005106:	f7fe fbcd 	bl	80038a4 <HAL_GetTick>
 800510a:	0002      	movs	r2, r0
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	1ad3      	subs	r3, r2, r3
 8005110:	4a1b      	ldr	r2, [pc, #108]	; (8005180 <HAL_RCC_ClockConfig+0x1f4>)
 8005112:	4293      	cmp	r3, r2
 8005114:	d901      	bls.n	800511a <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8005116:	2303      	movs	r3, #3
 8005118:	e02c      	b.n	8005174 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800511a:	4b18      	ldr	r3, [pc, #96]	; (800517c <HAL_RCC_ClockConfig+0x1f0>)
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	2207      	movs	r2, #7
 8005120:	4013      	ands	r3, r2
 8005122:	683a      	ldr	r2, [r7, #0]
 8005124:	429a      	cmp	r2, r3
 8005126:	d1ee      	bne.n	8005106 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	2204      	movs	r2, #4
 800512e:	4013      	ands	r3, r2
 8005130:	d009      	beq.n	8005146 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8005132:	4b14      	ldr	r3, [pc, #80]	; (8005184 <HAL_RCC_ClockConfig+0x1f8>)
 8005134:	689b      	ldr	r3, [r3, #8]
 8005136:	4a15      	ldr	r2, [pc, #84]	; (800518c <HAL_RCC_ClockConfig+0x200>)
 8005138:	4013      	ands	r3, r2
 800513a:	0019      	movs	r1, r3
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	68da      	ldr	r2, [r3, #12]
 8005140:	4b10      	ldr	r3, [pc, #64]	; (8005184 <HAL_RCC_ClockConfig+0x1f8>)
 8005142:	430a      	orrs	r2, r1
 8005144:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8005146:	f000 f829 	bl	800519c <HAL_RCC_GetSysClockFreq>
 800514a:	0001      	movs	r1, r0
 800514c:	4b0d      	ldr	r3, [pc, #52]	; (8005184 <HAL_RCC_ClockConfig+0x1f8>)
 800514e:	689b      	ldr	r3, [r3, #8]
 8005150:	0a1b      	lsrs	r3, r3, #8
 8005152:	220f      	movs	r2, #15
 8005154:	401a      	ands	r2, r3
 8005156:	4b0e      	ldr	r3, [pc, #56]	; (8005190 <HAL_RCC_ClockConfig+0x204>)
 8005158:	0092      	lsls	r2, r2, #2
 800515a:	58d3      	ldr	r3, [r2, r3]
 800515c:	221f      	movs	r2, #31
 800515e:	4013      	ands	r3, r2
 8005160:	000a      	movs	r2, r1
 8005162:	40da      	lsrs	r2, r3
 8005164:	4b0b      	ldr	r3, [pc, #44]	; (8005194 <HAL_RCC_ClockConfig+0x208>)
 8005166:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005168:	4b0b      	ldr	r3, [pc, #44]	; (8005198 <HAL_RCC_ClockConfig+0x20c>)
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	0018      	movs	r0, r3
 800516e:	f7fe fb3d 	bl	80037ec <HAL_InitTick>
 8005172:	0003      	movs	r3, r0
}
 8005174:	0018      	movs	r0, r3
 8005176:	46bd      	mov	sp, r7
 8005178:	b004      	add	sp, #16
 800517a:	bd80      	pop	{r7, pc}
 800517c:	40022000 	.word	0x40022000
 8005180:	00001388 	.word	0x00001388
 8005184:	40021000 	.word	0x40021000
 8005188:	fffff0ff 	.word	0xfffff0ff
 800518c:	ffff8fff 	.word	0xffff8fff
 8005190:	0800ac7c 	.word	0x0800ac7c
 8005194:	20000000 	.word	0x20000000
 8005198:	20000004 	.word	0x20000004

0800519c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800519c:	b580      	push	{r7, lr}
 800519e:	b086      	sub	sp, #24
 80051a0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80051a2:	4b3c      	ldr	r3, [pc, #240]	; (8005294 <HAL_RCC_GetSysClockFreq+0xf8>)
 80051a4:	689b      	ldr	r3, [r3, #8]
 80051a6:	2238      	movs	r2, #56	; 0x38
 80051a8:	4013      	ands	r3, r2
 80051aa:	d10f      	bne.n	80051cc <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80051ac:	4b39      	ldr	r3, [pc, #228]	; (8005294 <HAL_RCC_GetSysClockFreq+0xf8>)
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	0adb      	lsrs	r3, r3, #11
 80051b2:	2207      	movs	r2, #7
 80051b4:	4013      	ands	r3, r2
 80051b6:	2201      	movs	r2, #1
 80051b8:	409a      	lsls	r2, r3
 80051ba:	0013      	movs	r3, r2
 80051bc:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80051be:	6839      	ldr	r1, [r7, #0]
 80051c0:	4835      	ldr	r0, [pc, #212]	; (8005298 <HAL_RCC_GetSysClockFreq+0xfc>)
 80051c2:	f7fa ffbb 	bl	800013c <__udivsi3>
 80051c6:	0003      	movs	r3, r0
 80051c8:	613b      	str	r3, [r7, #16]
 80051ca:	e05d      	b.n	8005288 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80051cc:	4b31      	ldr	r3, [pc, #196]	; (8005294 <HAL_RCC_GetSysClockFreq+0xf8>)
 80051ce:	689b      	ldr	r3, [r3, #8]
 80051d0:	2238      	movs	r2, #56	; 0x38
 80051d2:	4013      	ands	r3, r2
 80051d4:	2b08      	cmp	r3, #8
 80051d6:	d102      	bne.n	80051de <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80051d8:	4b30      	ldr	r3, [pc, #192]	; (800529c <HAL_RCC_GetSysClockFreq+0x100>)
 80051da:	613b      	str	r3, [r7, #16]
 80051dc:	e054      	b.n	8005288 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80051de:	4b2d      	ldr	r3, [pc, #180]	; (8005294 <HAL_RCC_GetSysClockFreq+0xf8>)
 80051e0:	689b      	ldr	r3, [r3, #8]
 80051e2:	2238      	movs	r2, #56	; 0x38
 80051e4:	4013      	ands	r3, r2
 80051e6:	2b10      	cmp	r3, #16
 80051e8:	d138      	bne.n	800525c <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80051ea:	4b2a      	ldr	r3, [pc, #168]	; (8005294 <HAL_RCC_GetSysClockFreq+0xf8>)
 80051ec:	68db      	ldr	r3, [r3, #12]
 80051ee:	2203      	movs	r2, #3
 80051f0:	4013      	ands	r3, r2
 80051f2:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80051f4:	4b27      	ldr	r3, [pc, #156]	; (8005294 <HAL_RCC_GetSysClockFreq+0xf8>)
 80051f6:	68db      	ldr	r3, [r3, #12]
 80051f8:	091b      	lsrs	r3, r3, #4
 80051fa:	2207      	movs	r2, #7
 80051fc:	4013      	ands	r3, r2
 80051fe:	3301      	adds	r3, #1
 8005200:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	2b03      	cmp	r3, #3
 8005206:	d10d      	bne.n	8005224 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005208:	68b9      	ldr	r1, [r7, #8]
 800520a:	4824      	ldr	r0, [pc, #144]	; (800529c <HAL_RCC_GetSysClockFreq+0x100>)
 800520c:	f7fa ff96 	bl	800013c <__udivsi3>
 8005210:	0003      	movs	r3, r0
 8005212:	0019      	movs	r1, r3
 8005214:	4b1f      	ldr	r3, [pc, #124]	; (8005294 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005216:	68db      	ldr	r3, [r3, #12]
 8005218:	0a1b      	lsrs	r3, r3, #8
 800521a:	227f      	movs	r2, #127	; 0x7f
 800521c:	4013      	ands	r3, r2
 800521e:	434b      	muls	r3, r1
 8005220:	617b      	str	r3, [r7, #20]
        break;
 8005222:	e00d      	b.n	8005240 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8005224:	68b9      	ldr	r1, [r7, #8]
 8005226:	481c      	ldr	r0, [pc, #112]	; (8005298 <HAL_RCC_GetSysClockFreq+0xfc>)
 8005228:	f7fa ff88 	bl	800013c <__udivsi3>
 800522c:	0003      	movs	r3, r0
 800522e:	0019      	movs	r1, r3
 8005230:	4b18      	ldr	r3, [pc, #96]	; (8005294 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005232:	68db      	ldr	r3, [r3, #12]
 8005234:	0a1b      	lsrs	r3, r3, #8
 8005236:	227f      	movs	r2, #127	; 0x7f
 8005238:	4013      	ands	r3, r2
 800523a:	434b      	muls	r3, r1
 800523c:	617b      	str	r3, [r7, #20]
        break;
 800523e:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8005240:	4b14      	ldr	r3, [pc, #80]	; (8005294 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005242:	68db      	ldr	r3, [r3, #12]
 8005244:	0f5b      	lsrs	r3, r3, #29
 8005246:	2207      	movs	r2, #7
 8005248:	4013      	ands	r3, r2
 800524a:	3301      	adds	r3, #1
 800524c:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800524e:	6879      	ldr	r1, [r7, #4]
 8005250:	6978      	ldr	r0, [r7, #20]
 8005252:	f7fa ff73 	bl	800013c <__udivsi3>
 8005256:	0003      	movs	r3, r0
 8005258:	613b      	str	r3, [r7, #16]
 800525a:	e015      	b.n	8005288 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800525c:	4b0d      	ldr	r3, [pc, #52]	; (8005294 <HAL_RCC_GetSysClockFreq+0xf8>)
 800525e:	689b      	ldr	r3, [r3, #8]
 8005260:	2238      	movs	r2, #56	; 0x38
 8005262:	4013      	ands	r3, r2
 8005264:	2b20      	cmp	r3, #32
 8005266:	d103      	bne.n	8005270 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8005268:	2380      	movs	r3, #128	; 0x80
 800526a:	021b      	lsls	r3, r3, #8
 800526c:	613b      	str	r3, [r7, #16]
 800526e:	e00b      	b.n	8005288 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8005270:	4b08      	ldr	r3, [pc, #32]	; (8005294 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005272:	689b      	ldr	r3, [r3, #8]
 8005274:	2238      	movs	r2, #56	; 0x38
 8005276:	4013      	ands	r3, r2
 8005278:	2b18      	cmp	r3, #24
 800527a:	d103      	bne.n	8005284 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 800527c:	23fa      	movs	r3, #250	; 0xfa
 800527e:	01db      	lsls	r3, r3, #7
 8005280:	613b      	str	r3, [r7, #16]
 8005282:	e001      	b.n	8005288 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8005284:	2300      	movs	r3, #0
 8005286:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005288:	693b      	ldr	r3, [r7, #16]
}
 800528a:	0018      	movs	r0, r3
 800528c:	46bd      	mov	sp, r7
 800528e:	b006      	add	sp, #24
 8005290:	bd80      	pop	{r7, pc}
 8005292:	46c0      	nop			; (mov r8, r8)
 8005294:	40021000 	.word	0x40021000
 8005298:	00f42400 	.word	0x00f42400
 800529c:	007a1200 	.word	0x007a1200

080052a0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80052a0:	b580      	push	{r7, lr}
 80052a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80052a4:	4b02      	ldr	r3, [pc, #8]	; (80052b0 <HAL_RCC_GetHCLKFreq+0x10>)
 80052a6:	681b      	ldr	r3, [r3, #0]
}
 80052a8:	0018      	movs	r0, r3
 80052aa:	46bd      	mov	sp, r7
 80052ac:	bd80      	pop	{r7, pc}
 80052ae:	46c0      	nop			; (mov r8, r8)
 80052b0:	20000000 	.word	0x20000000

080052b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80052b4:	b5b0      	push	{r4, r5, r7, lr}
 80052b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80052b8:	f7ff fff2 	bl	80052a0 <HAL_RCC_GetHCLKFreq>
 80052bc:	0004      	movs	r4, r0
 80052be:	f7ff fb3f 	bl	8004940 <LL_RCC_GetAPB1Prescaler>
 80052c2:	0003      	movs	r3, r0
 80052c4:	0b1a      	lsrs	r2, r3, #12
 80052c6:	4b05      	ldr	r3, [pc, #20]	; (80052dc <HAL_RCC_GetPCLK1Freq+0x28>)
 80052c8:	0092      	lsls	r2, r2, #2
 80052ca:	58d3      	ldr	r3, [r2, r3]
 80052cc:	221f      	movs	r2, #31
 80052ce:	4013      	ands	r3, r2
 80052d0:	40dc      	lsrs	r4, r3
 80052d2:	0023      	movs	r3, r4
}
 80052d4:	0018      	movs	r0, r3
 80052d6:	46bd      	mov	sp, r7
 80052d8:	bdb0      	pop	{r4, r5, r7, pc}
 80052da:	46c0      	nop			; (mov r8, r8)
 80052dc:	0800acbc 	.word	0x0800acbc

080052e0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b086      	sub	sp, #24
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80052e8:	2313      	movs	r3, #19
 80052ea:	18fb      	adds	r3, r7, r3
 80052ec:	2200      	movs	r2, #0
 80052ee:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80052f0:	2312      	movs	r3, #18
 80052f2:	18fb      	adds	r3, r7, r3
 80052f4:	2200      	movs	r2, #0
 80052f6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681a      	ldr	r2, [r3, #0]
 80052fc:	2380      	movs	r3, #128	; 0x80
 80052fe:	029b      	lsls	r3, r3, #10
 8005300:	4013      	ands	r3, r2
 8005302:	d100      	bne.n	8005306 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8005304:	e0a3      	b.n	800544e <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005306:	2011      	movs	r0, #17
 8005308:	183b      	adds	r3, r7, r0
 800530a:	2200      	movs	r2, #0
 800530c:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800530e:	4ba5      	ldr	r3, [pc, #660]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005310:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005312:	2380      	movs	r3, #128	; 0x80
 8005314:	055b      	lsls	r3, r3, #21
 8005316:	4013      	ands	r3, r2
 8005318:	d110      	bne.n	800533c <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800531a:	4ba2      	ldr	r3, [pc, #648]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800531c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800531e:	4ba1      	ldr	r3, [pc, #644]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005320:	2180      	movs	r1, #128	; 0x80
 8005322:	0549      	lsls	r1, r1, #21
 8005324:	430a      	orrs	r2, r1
 8005326:	63da      	str	r2, [r3, #60]	; 0x3c
 8005328:	4b9e      	ldr	r3, [pc, #632]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800532a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800532c:	2380      	movs	r3, #128	; 0x80
 800532e:	055b      	lsls	r3, r3, #21
 8005330:	4013      	ands	r3, r2
 8005332:	60bb      	str	r3, [r7, #8]
 8005334:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005336:	183b      	adds	r3, r7, r0
 8005338:	2201      	movs	r2, #1
 800533a:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800533c:	4b9a      	ldr	r3, [pc, #616]	; (80055a8 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 800533e:	681a      	ldr	r2, [r3, #0]
 8005340:	4b99      	ldr	r3, [pc, #612]	; (80055a8 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8005342:	2180      	movs	r1, #128	; 0x80
 8005344:	0049      	lsls	r1, r1, #1
 8005346:	430a      	orrs	r2, r1
 8005348:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800534a:	f7fe faab 	bl	80038a4 <HAL_GetTick>
 800534e:	0003      	movs	r3, r0
 8005350:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005352:	e00b      	b.n	800536c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005354:	f7fe faa6 	bl	80038a4 <HAL_GetTick>
 8005358:	0002      	movs	r2, r0
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	1ad3      	subs	r3, r2, r3
 800535e:	2b02      	cmp	r3, #2
 8005360:	d904      	bls.n	800536c <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8005362:	2313      	movs	r3, #19
 8005364:	18fb      	adds	r3, r7, r3
 8005366:	2203      	movs	r2, #3
 8005368:	701a      	strb	r2, [r3, #0]
        break;
 800536a:	e005      	b.n	8005378 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800536c:	4b8e      	ldr	r3, [pc, #568]	; (80055a8 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 800536e:	681a      	ldr	r2, [r3, #0]
 8005370:	2380      	movs	r3, #128	; 0x80
 8005372:	005b      	lsls	r3, r3, #1
 8005374:	4013      	ands	r3, r2
 8005376:	d0ed      	beq.n	8005354 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8005378:	2313      	movs	r3, #19
 800537a:	18fb      	adds	r3, r7, r3
 800537c:	781b      	ldrb	r3, [r3, #0]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d154      	bne.n	800542c <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005382:	4b88      	ldr	r3, [pc, #544]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005384:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005386:	23c0      	movs	r3, #192	; 0xc0
 8005388:	009b      	lsls	r3, r3, #2
 800538a:	4013      	ands	r3, r2
 800538c:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800538e:	697b      	ldr	r3, [r7, #20]
 8005390:	2b00      	cmp	r3, #0
 8005392:	d019      	beq.n	80053c8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005398:	697a      	ldr	r2, [r7, #20]
 800539a:	429a      	cmp	r2, r3
 800539c:	d014      	beq.n	80053c8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800539e:	4b81      	ldr	r3, [pc, #516]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80053a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053a2:	4a82      	ldr	r2, [pc, #520]	; (80055ac <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80053a4:	4013      	ands	r3, r2
 80053a6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80053a8:	4b7e      	ldr	r3, [pc, #504]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80053aa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80053ac:	4b7d      	ldr	r3, [pc, #500]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80053ae:	2180      	movs	r1, #128	; 0x80
 80053b0:	0249      	lsls	r1, r1, #9
 80053b2:	430a      	orrs	r2, r1
 80053b4:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80053b6:	4b7b      	ldr	r3, [pc, #492]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80053b8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80053ba:	4b7a      	ldr	r3, [pc, #488]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80053bc:	497c      	ldr	r1, [pc, #496]	; (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 80053be:	400a      	ands	r2, r1
 80053c0:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80053c2:	4b78      	ldr	r3, [pc, #480]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80053c4:	697a      	ldr	r2, [r7, #20]
 80053c6:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80053c8:	697b      	ldr	r3, [r7, #20]
 80053ca:	2201      	movs	r2, #1
 80053cc:	4013      	ands	r3, r2
 80053ce:	d016      	beq.n	80053fe <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053d0:	f7fe fa68 	bl	80038a4 <HAL_GetTick>
 80053d4:	0003      	movs	r3, r0
 80053d6:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80053d8:	e00c      	b.n	80053f4 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80053da:	f7fe fa63 	bl	80038a4 <HAL_GetTick>
 80053de:	0002      	movs	r2, r0
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	1ad3      	subs	r3, r2, r3
 80053e4:	4a73      	ldr	r2, [pc, #460]	; (80055b4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80053e6:	4293      	cmp	r3, r2
 80053e8:	d904      	bls.n	80053f4 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 80053ea:	2313      	movs	r3, #19
 80053ec:	18fb      	adds	r3, r7, r3
 80053ee:	2203      	movs	r2, #3
 80053f0:	701a      	strb	r2, [r3, #0]
            break;
 80053f2:	e004      	b.n	80053fe <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80053f4:	4b6b      	ldr	r3, [pc, #428]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80053f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053f8:	2202      	movs	r2, #2
 80053fa:	4013      	ands	r3, r2
 80053fc:	d0ed      	beq.n	80053da <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 80053fe:	2313      	movs	r3, #19
 8005400:	18fb      	adds	r3, r7, r3
 8005402:	781b      	ldrb	r3, [r3, #0]
 8005404:	2b00      	cmp	r3, #0
 8005406:	d10a      	bne.n	800541e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005408:	4b66      	ldr	r3, [pc, #408]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800540a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800540c:	4a67      	ldr	r2, [pc, #412]	; (80055ac <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800540e:	4013      	ands	r3, r2
 8005410:	0019      	movs	r1, r3
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005416:	4b63      	ldr	r3, [pc, #396]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005418:	430a      	orrs	r2, r1
 800541a:	65da      	str	r2, [r3, #92]	; 0x5c
 800541c:	e00c      	b.n	8005438 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800541e:	2312      	movs	r3, #18
 8005420:	18fb      	adds	r3, r7, r3
 8005422:	2213      	movs	r2, #19
 8005424:	18ba      	adds	r2, r7, r2
 8005426:	7812      	ldrb	r2, [r2, #0]
 8005428:	701a      	strb	r2, [r3, #0]
 800542a:	e005      	b.n	8005438 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800542c:	2312      	movs	r3, #18
 800542e:	18fb      	adds	r3, r7, r3
 8005430:	2213      	movs	r2, #19
 8005432:	18ba      	adds	r2, r7, r2
 8005434:	7812      	ldrb	r2, [r2, #0]
 8005436:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005438:	2311      	movs	r3, #17
 800543a:	18fb      	adds	r3, r7, r3
 800543c:	781b      	ldrb	r3, [r3, #0]
 800543e:	2b01      	cmp	r3, #1
 8005440:	d105      	bne.n	800544e <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005442:	4b58      	ldr	r3, [pc, #352]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005444:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005446:	4b57      	ldr	r3, [pc, #348]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005448:	495b      	ldr	r1, [pc, #364]	; (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800544a:	400a      	ands	r2, r1
 800544c:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	2201      	movs	r2, #1
 8005454:	4013      	ands	r3, r2
 8005456:	d009      	beq.n	800546c <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005458:	4b52      	ldr	r3, [pc, #328]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800545a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800545c:	2203      	movs	r2, #3
 800545e:	4393      	bics	r3, r2
 8005460:	0019      	movs	r1, r3
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	685a      	ldr	r2, [r3, #4]
 8005466:	4b4f      	ldr	r3, [pc, #316]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005468:	430a      	orrs	r2, r1
 800546a:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	2210      	movs	r2, #16
 8005472:	4013      	ands	r3, r2
 8005474:	d009      	beq.n	800548a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005476:	4b4b      	ldr	r3, [pc, #300]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005478:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800547a:	4a50      	ldr	r2, [pc, #320]	; (80055bc <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 800547c:	4013      	ands	r3, r2
 800547e:	0019      	movs	r1, r3
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	689a      	ldr	r2, [r3, #8]
 8005484:	4b47      	ldr	r3, [pc, #284]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005486:	430a      	orrs	r2, r1
 8005488:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681a      	ldr	r2, [r3, #0]
 800548e:	2380      	movs	r3, #128	; 0x80
 8005490:	009b      	lsls	r3, r3, #2
 8005492:	4013      	ands	r3, r2
 8005494:	d009      	beq.n	80054aa <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005496:	4b43      	ldr	r3, [pc, #268]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005498:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800549a:	4a49      	ldr	r2, [pc, #292]	; (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800549c:	4013      	ands	r3, r2
 800549e:	0019      	movs	r1, r3
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	695a      	ldr	r2, [r3, #20]
 80054a4:	4b3f      	ldr	r3, [pc, #252]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80054a6:	430a      	orrs	r2, r1
 80054a8:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681a      	ldr	r2, [r3, #0]
 80054ae:	2380      	movs	r3, #128	; 0x80
 80054b0:	00db      	lsls	r3, r3, #3
 80054b2:	4013      	ands	r3, r2
 80054b4:	d009      	beq.n	80054ca <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80054b6:	4b3b      	ldr	r3, [pc, #236]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80054b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054ba:	4a42      	ldr	r2, [pc, #264]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80054bc:	4013      	ands	r3, r2
 80054be:	0019      	movs	r1, r3
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	699a      	ldr	r2, [r3, #24]
 80054c4:	4b37      	ldr	r3, [pc, #220]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80054c6:	430a      	orrs	r2, r1
 80054c8:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	2220      	movs	r2, #32
 80054d0:	4013      	ands	r3, r2
 80054d2:	d009      	beq.n	80054e8 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80054d4:	4b33      	ldr	r3, [pc, #204]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80054d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054d8:	4a3b      	ldr	r2, [pc, #236]	; (80055c8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80054da:	4013      	ands	r3, r2
 80054dc:	0019      	movs	r1, r3
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	68da      	ldr	r2, [r3, #12]
 80054e2:	4b30      	ldr	r3, [pc, #192]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80054e4:	430a      	orrs	r2, r1
 80054e6:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681a      	ldr	r2, [r3, #0]
 80054ec:	2380      	movs	r3, #128	; 0x80
 80054ee:	01db      	lsls	r3, r3, #7
 80054f0:	4013      	ands	r3, r2
 80054f2:	d015      	beq.n	8005520 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80054f4:	4b2b      	ldr	r3, [pc, #172]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80054f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054f8:	009b      	lsls	r3, r3, #2
 80054fa:	0899      	lsrs	r1, r3, #2
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	69da      	ldr	r2, [r3, #28]
 8005500:	4b28      	ldr	r3, [pc, #160]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005502:	430a      	orrs	r2, r1
 8005504:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	69da      	ldr	r2, [r3, #28]
 800550a:	2380      	movs	r3, #128	; 0x80
 800550c:	05db      	lsls	r3, r3, #23
 800550e:	429a      	cmp	r2, r3
 8005510:	d106      	bne.n	8005520 <HAL_RCCEx_PeriphCLKConfig+0x240>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8005512:	4b24      	ldr	r3, [pc, #144]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005514:	68da      	ldr	r2, [r3, #12]
 8005516:	4b23      	ldr	r3, [pc, #140]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005518:	2180      	movs	r1, #128	; 0x80
 800551a:	0249      	lsls	r1, r1, #9
 800551c:	430a      	orrs	r2, r1
 800551e:	60da      	str	r2, [r3, #12]
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681a      	ldr	r2, [r3, #0]
 8005524:	2380      	movs	r3, #128	; 0x80
 8005526:	039b      	lsls	r3, r3, #14
 8005528:	4013      	ands	r3, r2
 800552a:	d016      	beq.n	800555a <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800552c:	4b1d      	ldr	r3, [pc, #116]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800552e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005530:	4a26      	ldr	r2, [pc, #152]	; (80055cc <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8005532:	4013      	ands	r3, r2
 8005534:	0019      	movs	r1, r3
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6a1a      	ldr	r2, [r3, #32]
 800553a:	4b1a      	ldr	r3, [pc, #104]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800553c:	430a      	orrs	r2, r1
 800553e:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	6a1a      	ldr	r2, [r3, #32]
 8005544:	2380      	movs	r3, #128	; 0x80
 8005546:	03db      	lsls	r3, r3, #15
 8005548:	429a      	cmp	r2, r3
 800554a:	d106      	bne.n	800555a <HAL_RCCEx_PeriphCLKConfig+0x27a>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800554c:	4b15      	ldr	r3, [pc, #84]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800554e:	68da      	ldr	r2, [r3, #12]
 8005550:	4b14      	ldr	r3, [pc, #80]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005552:	2180      	movs	r1, #128	; 0x80
 8005554:	0449      	lsls	r1, r1, #17
 8005556:	430a      	orrs	r2, r1
 8005558:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681a      	ldr	r2, [r3, #0]
 800555e:	2380      	movs	r3, #128	; 0x80
 8005560:	011b      	lsls	r3, r3, #4
 8005562:	4013      	ands	r3, r2
 8005564:	d016      	beq.n	8005594 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8005566:	4b0f      	ldr	r3, [pc, #60]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005568:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800556a:	4a19      	ldr	r2, [pc, #100]	; (80055d0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800556c:	4013      	ands	r3, r2
 800556e:	0019      	movs	r1, r3
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	691a      	ldr	r2, [r3, #16]
 8005574:	4b0b      	ldr	r3, [pc, #44]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005576:	430a      	orrs	r2, r1
 8005578:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	691a      	ldr	r2, [r3, #16]
 800557e:	2380      	movs	r3, #128	; 0x80
 8005580:	01db      	lsls	r3, r3, #7
 8005582:	429a      	cmp	r2, r3
 8005584:	d106      	bne.n	8005594 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8005586:	4b07      	ldr	r3, [pc, #28]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005588:	68da      	ldr	r2, [r3, #12]
 800558a:	4b06      	ldr	r3, [pc, #24]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800558c:	2180      	movs	r1, #128	; 0x80
 800558e:	0249      	lsls	r1, r1, #9
 8005590:	430a      	orrs	r2, r1
 8005592:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8005594:	2312      	movs	r3, #18
 8005596:	18fb      	adds	r3, r7, r3
 8005598:	781b      	ldrb	r3, [r3, #0]
}
 800559a:	0018      	movs	r0, r3
 800559c:	46bd      	mov	sp, r7
 800559e:	b006      	add	sp, #24
 80055a0:	bd80      	pop	{r7, pc}
 80055a2:	46c0      	nop			; (mov r8, r8)
 80055a4:	40021000 	.word	0x40021000
 80055a8:	40007000 	.word	0x40007000
 80055ac:	fffffcff 	.word	0xfffffcff
 80055b0:	fffeffff 	.word	0xfffeffff
 80055b4:	00001388 	.word	0x00001388
 80055b8:	efffffff 	.word	0xefffffff
 80055bc:	fffff3ff 	.word	0xfffff3ff
 80055c0:	fff3ffff 	.word	0xfff3ffff
 80055c4:	ffcfffff 	.word	0xffcfffff
 80055c8:	ffffcfff 	.word	0xffffcfff
 80055cc:	ffbfffff 	.word	0xffbfffff
 80055d0:	ffff3fff 	.word	0xffff3fff

080055d4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b082      	sub	sp, #8
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d101      	bne.n	80055e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80055e2:	2301      	movs	r3, #1
 80055e4:	e046      	b.n	8005674 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2288      	movs	r2, #136	; 0x88
 80055ea:	589b      	ldr	r3, [r3, r2]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d107      	bne.n	8005600 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2284      	movs	r2, #132	; 0x84
 80055f4:	2100      	movs	r1, #0
 80055f6:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	0018      	movs	r0, r3
 80055fc:	f7fd fe50 	bl	80032a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2288      	movs	r2, #136	; 0x88
 8005604:	2124      	movs	r1, #36	; 0x24
 8005606:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	681a      	ldr	r2, [r3, #0]
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	2101      	movs	r1, #1
 8005614:	438a      	bics	r2, r1
 8005616:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	0018      	movs	r0, r3
 800561c:	f000 f8cc 	bl	80057b8 <UART_SetConfig>
 8005620:	0003      	movs	r3, r0
 8005622:	2b01      	cmp	r3, #1
 8005624:	d101      	bne.n	800562a <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8005626:	2301      	movs	r3, #1
 8005628:	e024      	b.n	8005674 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800562e:	2b00      	cmp	r3, #0
 8005630:	d003      	beq.n	800563a <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	0018      	movs	r0, r3
 8005636:	f000 fb37 	bl	8005ca8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	685a      	ldr	r2, [r3, #4]
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	490d      	ldr	r1, [pc, #52]	; (800567c <HAL_UART_Init+0xa8>)
 8005646:	400a      	ands	r2, r1
 8005648:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	689a      	ldr	r2, [r3, #8]
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	212a      	movs	r1, #42	; 0x2a
 8005656:	438a      	bics	r2, r1
 8005658:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	681a      	ldr	r2, [r3, #0]
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	2101      	movs	r1, #1
 8005666:	430a      	orrs	r2, r1
 8005668:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	0018      	movs	r0, r3
 800566e:	f000 fbcf 	bl	8005e10 <UART_CheckIdleState>
 8005672:	0003      	movs	r3, r0
}
 8005674:	0018      	movs	r0, r3
 8005676:	46bd      	mov	sp, r7
 8005678:	b002      	add	sp, #8
 800567a:	bd80      	pop	{r7, pc}
 800567c:	ffffb7ff 	.word	0xffffb7ff

08005680 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005680:	b580      	push	{r7, lr}
 8005682:	b08a      	sub	sp, #40	; 0x28
 8005684:	af02      	add	r7, sp, #8
 8005686:	60f8      	str	r0, [r7, #12]
 8005688:	60b9      	str	r1, [r7, #8]
 800568a:	603b      	str	r3, [r7, #0]
 800568c:	1dbb      	adds	r3, r7, #6
 800568e:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	2288      	movs	r2, #136	; 0x88
 8005694:	589b      	ldr	r3, [r3, r2]
 8005696:	2b20      	cmp	r3, #32
 8005698:	d000      	beq.n	800569c <HAL_UART_Transmit+0x1c>
 800569a:	e088      	b.n	80057ae <HAL_UART_Transmit+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
 800569c:	68bb      	ldr	r3, [r7, #8]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d003      	beq.n	80056aa <HAL_UART_Transmit+0x2a>
 80056a2:	1dbb      	adds	r3, r7, #6
 80056a4:	881b      	ldrh	r3, [r3, #0]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d101      	bne.n	80056ae <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 80056aa:	2301      	movs	r3, #1
 80056ac:	e080      	b.n	80057b0 <HAL_UART_Transmit+0x130>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	689a      	ldr	r2, [r3, #8]
 80056b2:	2380      	movs	r3, #128	; 0x80
 80056b4:	015b      	lsls	r3, r3, #5
 80056b6:	429a      	cmp	r2, r3
 80056b8:	d109      	bne.n	80056ce <HAL_UART_Transmit+0x4e>
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	691b      	ldr	r3, [r3, #16]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d105      	bne.n	80056ce <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80056c2:	68bb      	ldr	r3, [r7, #8]
 80056c4:	2201      	movs	r2, #1
 80056c6:	4013      	ands	r3, r2
 80056c8:	d001      	beq.n	80056ce <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 80056ca:	2301      	movs	r3, #1
 80056cc:	e070      	b.n	80057b0 <HAL_UART_Transmit+0x130>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	2290      	movs	r2, #144	; 0x90
 80056d2:	2100      	movs	r1, #0
 80056d4:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	2288      	movs	r2, #136	; 0x88
 80056da:	2121      	movs	r1, #33	; 0x21
 80056dc:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80056de:	f7fe f8e1 	bl	80038a4 <HAL_GetTick>
 80056e2:	0003      	movs	r3, r0
 80056e4:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	1dba      	adds	r2, r7, #6
 80056ea:	2154      	movs	r1, #84	; 0x54
 80056ec:	8812      	ldrh	r2, [r2, #0]
 80056ee:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	1dba      	adds	r2, r7, #6
 80056f4:	2156      	movs	r1, #86	; 0x56
 80056f6:	8812      	ldrh	r2, [r2, #0]
 80056f8:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	689a      	ldr	r2, [r3, #8]
 80056fe:	2380      	movs	r3, #128	; 0x80
 8005700:	015b      	lsls	r3, r3, #5
 8005702:	429a      	cmp	r2, r3
 8005704:	d108      	bne.n	8005718 <HAL_UART_Transmit+0x98>
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	691b      	ldr	r3, [r3, #16]
 800570a:	2b00      	cmp	r3, #0
 800570c:	d104      	bne.n	8005718 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 800570e:	2300      	movs	r3, #0
 8005710:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005712:	68bb      	ldr	r3, [r7, #8]
 8005714:	61bb      	str	r3, [r7, #24]
 8005716:	e003      	b.n	8005720 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8005718:	68bb      	ldr	r3, [r7, #8]
 800571a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800571c:	2300      	movs	r3, #0
 800571e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005720:	e02c      	b.n	800577c <HAL_UART_Transmit+0xfc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005722:	697a      	ldr	r2, [r7, #20]
 8005724:	68f8      	ldr	r0, [r7, #12]
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	9300      	str	r3, [sp, #0]
 800572a:	0013      	movs	r3, r2
 800572c:	2200      	movs	r2, #0
 800572e:	2180      	movs	r1, #128	; 0x80
 8005730:	f000 fbbc 	bl	8005eac <UART_WaitOnFlagUntilTimeout>
 8005734:	1e03      	subs	r3, r0, #0
 8005736:	d001      	beq.n	800573c <HAL_UART_Transmit+0xbc>
      {
        return HAL_TIMEOUT;
 8005738:	2303      	movs	r3, #3
 800573a:	e039      	b.n	80057b0 <HAL_UART_Transmit+0x130>
      }
      if (pdata8bits == NULL)
 800573c:	69fb      	ldr	r3, [r7, #28]
 800573e:	2b00      	cmp	r3, #0
 8005740:	d10b      	bne.n	800575a <HAL_UART_Transmit+0xda>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005742:	69bb      	ldr	r3, [r7, #24]
 8005744:	881b      	ldrh	r3, [r3, #0]
 8005746:	001a      	movs	r2, r3
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	05d2      	lsls	r2, r2, #23
 800574e:	0dd2      	lsrs	r2, r2, #23
 8005750:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005752:	69bb      	ldr	r3, [r7, #24]
 8005754:	3302      	adds	r3, #2
 8005756:	61bb      	str	r3, [r7, #24]
 8005758:	e007      	b.n	800576a <HAL_UART_Transmit+0xea>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800575a:	69fb      	ldr	r3, [r7, #28]
 800575c:	781a      	ldrb	r2, [r3, #0]
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005764:	69fb      	ldr	r3, [r7, #28]
 8005766:	3301      	adds	r3, #1
 8005768:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	2256      	movs	r2, #86	; 0x56
 800576e:	5a9b      	ldrh	r3, [r3, r2]
 8005770:	b29b      	uxth	r3, r3
 8005772:	3b01      	subs	r3, #1
 8005774:	b299      	uxth	r1, r3
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	2256      	movs	r2, #86	; 0x56
 800577a:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	2256      	movs	r2, #86	; 0x56
 8005780:	5a9b      	ldrh	r3, [r3, r2]
 8005782:	b29b      	uxth	r3, r3
 8005784:	2b00      	cmp	r3, #0
 8005786:	d1cc      	bne.n	8005722 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005788:	697a      	ldr	r2, [r7, #20]
 800578a:	68f8      	ldr	r0, [r7, #12]
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	9300      	str	r3, [sp, #0]
 8005790:	0013      	movs	r3, r2
 8005792:	2200      	movs	r2, #0
 8005794:	2140      	movs	r1, #64	; 0x40
 8005796:	f000 fb89 	bl	8005eac <UART_WaitOnFlagUntilTimeout>
 800579a:	1e03      	subs	r3, r0, #0
 800579c:	d001      	beq.n	80057a2 <HAL_UART_Transmit+0x122>
    {
      return HAL_TIMEOUT;
 800579e:	2303      	movs	r3, #3
 80057a0:	e006      	b.n	80057b0 <HAL_UART_Transmit+0x130>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	2288      	movs	r2, #136	; 0x88
 80057a6:	2120      	movs	r1, #32
 80057a8:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 80057aa:	2300      	movs	r3, #0
 80057ac:	e000      	b.n	80057b0 <HAL_UART_Transmit+0x130>
  }
  else
  {
    return HAL_BUSY;
 80057ae:	2302      	movs	r3, #2
  }
}
 80057b0:	0018      	movs	r0, r3
 80057b2:	46bd      	mov	sp, r7
 80057b4:	b008      	add	sp, #32
 80057b6:	bd80      	pop	{r7, pc}

080057b8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80057b8:	b5b0      	push	{r4, r5, r7, lr}
 80057ba:	b090      	sub	sp, #64	; 0x40
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80057c0:	231a      	movs	r3, #26
 80057c2:	2220      	movs	r2, #32
 80057c4:	189b      	adds	r3, r3, r2
 80057c6:	19db      	adds	r3, r3, r7
 80057c8:	2200      	movs	r2, #0
 80057ca:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80057cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ce:	689a      	ldr	r2, [r3, #8]
 80057d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057d2:	691b      	ldr	r3, [r3, #16]
 80057d4:	431a      	orrs	r2, r3
 80057d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057d8:	695b      	ldr	r3, [r3, #20]
 80057da:	431a      	orrs	r2, r3
 80057dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057de:	69db      	ldr	r3, [r3, #28]
 80057e0:	4313      	orrs	r3, r2
 80057e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80057e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	4ac4      	ldr	r2, [pc, #784]	; (8005afc <UART_SetConfig+0x344>)
 80057ec:	4013      	ands	r3, r2
 80057ee:	0019      	movs	r1, r3
 80057f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057f2:	681a      	ldr	r2, [r3, #0]
 80057f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057f6:	430b      	orrs	r3, r1
 80057f8:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80057fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	685b      	ldr	r3, [r3, #4]
 8005800:	4abf      	ldr	r2, [pc, #764]	; (8005b00 <UART_SetConfig+0x348>)
 8005802:	4013      	ands	r3, r2
 8005804:	0018      	movs	r0, r3
 8005806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005808:	68d9      	ldr	r1, [r3, #12]
 800580a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800580c:	681a      	ldr	r2, [r3, #0]
 800580e:	0003      	movs	r3, r0
 8005810:	430b      	orrs	r3, r1
 8005812:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005816:	699b      	ldr	r3, [r3, #24]
 8005818:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800581a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	4ab9      	ldr	r2, [pc, #740]	; (8005b04 <UART_SetConfig+0x34c>)
 8005820:	4293      	cmp	r3, r2
 8005822:	d004      	beq.n	800582e <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005826:	6a1b      	ldr	r3, [r3, #32]
 8005828:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800582a:	4313      	orrs	r3, r2
 800582c:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800582e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	689b      	ldr	r3, [r3, #8]
 8005834:	4ab4      	ldr	r2, [pc, #720]	; (8005b08 <UART_SetConfig+0x350>)
 8005836:	4013      	ands	r3, r2
 8005838:	0019      	movs	r1, r3
 800583a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800583c:	681a      	ldr	r2, [r3, #0]
 800583e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005840:	430b      	orrs	r3, r1
 8005842:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800584a:	220f      	movs	r2, #15
 800584c:	4393      	bics	r3, r2
 800584e:	0018      	movs	r0, r3
 8005850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005852:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005856:	681a      	ldr	r2, [r3, #0]
 8005858:	0003      	movs	r3, r0
 800585a:	430b      	orrs	r3, r1
 800585c:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800585e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	4aaa      	ldr	r2, [pc, #680]	; (8005b0c <UART_SetConfig+0x354>)
 8005864:	4293      	cmp	r3, r2
 8005866:	d131      	bne.n	80058cc <UART_SetConfig+0x114>
 8005868:	4ba9      	ldr	r3, [pc, #676]	; (8005b10 <UART_SetConfig+0x358>)
 800586a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800586c:	2203      	movs	r2, #3
 800586e:	4013      	ands	r3, r2
 8005870:	2b03      	cmp	r3, #3
 8005872:	d01d      	beq.n	80058b0 <UART_SetConfig+0xf8>
 8005874:	d823      	bhi.n	80058be <UART_SetConfig+0x106>
 8005876:	2b02      	cmp	r3, #2
 8005878:	d00c      	beq.n	8005894 <UART_SetConfig+0xdc>
 800587a:	d820      	bhi.n	80058be <UART_SetConfig+0x106>
 800587c:	2b00      	cmp	r3, #0
 800587e:	d002      	beq.n	8005886 <UART_SetConfig+0xce>
 8005880:	2b01      	cmp	r3, #1
 8005882:	d00e      	beq.n	80058a2 <UART_SetConfig+0xea>
 8005884:	e01b      	b.n	80058be <UART_SetConfig+0x106>
 8005886:	231b      	movs	r3, #27
 8005888:	2220      	movs	r2, #32
 800588a:	189b      	adds	r3, r3, r2
 800588c:	19db      	adds	r3, r3, r7
 800588e:	2200      	movs	r2, #0
 8005890:	701a      	strb	r2, [r3, #0]
 8005892:	e071      	b.n	8005978 <UART_SetConfig+0x1c0>
 8005894:	231b      	movs	r3, #27
 8005896:	2220      	movs	r2, #32
 8005898:	189b      	adds	r3, r3, r2
 800589a:	19db      	adds	r3, r3, r7
 800589c:	2202      	movs	r2, #2
 800589e:	701a      	strb	r2, [r3, #0]
 80058a0:	e06a      	b.n	8005978 <UART_SetConfig+0x1c0>
 80058a2:	231b      	movs	r3, #27
 80058a4:	2220      	movs	r2, #32
 80058a6:	189b      	adds	r3, r3, r2
 80058a8:	19db      	adds	r3, r3, r7
 80058aa:	2204      	movs	r2, #4
 80058ac:	701a      	strb	r2, [r3, #0]
 80058ae:	e063      	b.n	8005978 <UART_SetConfig+0x1c0>
 80058b0:	231b      	movs	r3, #27
 80058b2:	2220      	movs	r2, #32
 80058b4:	189b      	adds	r3, r3, r2
 80058b6:	19db      	adds	r3, r3, r7
 80058b8:	2208      	movs	r2, #8
 80058ba:	701a      	strb	r2, [r3, #0]
 80058bc:	e05c      	b.n	8005978 <UART_SetConfig+0x1c0>
 80058be:	231b      	movs	r3, #27
 80058c0:	2220      	movs	r2, #32
 80058c2:	189b      	adds	r3, r3, r2
 80058c4:	19db      	adds	r3, r3, r7
 80058c6:	2210      	movs	r2, #16
 80058c8:	701a      	strb	r2, [r3, #0]
 80058ca:	e055      	b.n	8005978 <UART_SetConfig+0x1c0>
 80058cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	4a90      	ldr	r2, [pc, #576]	; (8005b14 <UART_SetConfig+0x35c>)
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d106      	bne.n	80058e4 <UART_SetConfig+0x12c>
 80058d6:	231b      	movs	r3, #27
 80058d8:	2220      	movs	r2, #32
 80058da:	189b      	adds	r3, r3, r2
 80058dc:	19db      	adds	r3, r3, r7
 80058de:	2200      	movs	r2, #0
 80058e0:	701a      	strb	r2, [r3, #0]
 80058e2:	e049      	b.n	8005978 <UART_SetConfig+0x1c0>
 80058e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	4a86      	ldr	r2, [pc, #536]	; (8005b04 <UART_SetConfig+0x34c>)
 80058ea:	4293      	cmp	r3, r2
 80058ec:	d13e      	bne.n	800596c <UART_SetConfig+0x1b4>
 80058ee:	4b88      	ldr	r3, [pc, #544]	; (8005b10 <UART_SetConfig+0x358>)
 80058f0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80058f2:	23c0      	movs	r3, #192	; 0xc0
 80058f4:	011b      	lsls	r3, r3, #4
 80058f6:	4013      	ands	r3, r2
 80058f8:	22c0      	movs	r2, #192	; 0xc0
 80058fa:	0112      	lsls	r2, r2, #4
 80058fc:	4293      	cmp	r3, r2
 80058fe:	d027      	beq.n	8005950 <UART_SetConfig+0x198>
 8005900:	22c0      	movs	r2, #192	; 0xc0
 8005902:	0112      	lsls	r2, r2, #4
 8005904:	4293      	cmp	r3, r2
 8005906:	d82a      	bhi.n	800595e <UART_SetConfig+0x1a6>
 8005908:	2280      	movs	r2, #128	; 0x80
 800590a:	0112      	lsls	r2, r2, #4
 800590c:	4293      	cmp	r3, r2
 800590e:	d011      	beq.n	8005934 <UART_SetConfig+0x17c>
 8005910:	2280      	movs	r2, #128	; 0x80
 8005912:	0112      	lsls	r2, r2, #4
 8005914:	4293      	cmp	r3, r2
 8005916:	d822      	bhi.n	800595e <UART_SetConfig+0x1a6>
 8005918:	2b00      	cmp	r3, #0
 800591a:	d004      	beq.n	8005926 <UART_SetConfig+0x16e>
 800591c:	2280      	movs	r2, #128	; 0x80
 800591e:	00d2      	lsls	r2, r2, #3
 8005920:	4293      	cmp	r3, r2
 8005922:	d00e      	beq.n	8005942 <UART_SetConfig+0x18a>
 8005924:	e01b      	b.n	800595e <UART_SetConfig+0x1a6>
 8005926:	231b      	movs	r3, #27
 8005928:	2220      	movs	r2, #32
 800592a:	189b      	adds	r3, r3, r2
 800592c:	19db      	adds	r3, r3, r7
 800592e:	2200      	movs	r2, #0
 8005930:	701a      	strb	r2, [r3, #0]
 8005932:	e021      	b.n	8005978 <UART_SetConfig+0x1c0>
 8005934:	231b      	movs	r3, #27
 8005936:	2220      	movs	r2, #32
 8005938:	189b      	adds	r3, r3, r2
 800593a:	19db      	adds	r3, r3, r7
 800593c:	2202      	movs	r2, #2
 800593e:	701a      	strb	r2, [r3, #0]
 8005940:	e01a      	b.n	8005978 <UART_SetConfig+0x1c0>
 8005942:	231b      	movs	r3, #27
 8005944:	2220      	movs	r2, #32
 8005946:	189b      	adds	r3, r3, r2
 8005948:	19db      	adds	r3, r3, r7
 800594a:	2204      	movs	r2, #4
 800594c:	701a      	strb	r2, [r3, #0]
 800594e:	e013      	b.n	8005978 <UART_SetConfig+0x1c0>
 8005950:	231b      	movs	r3, #27
 8005952:	2220      	movs	r2, #32
 8005954:	189b      	adds	r3, r3, r2
 8005956:	19db      	adds	r3, r3, r7
 8005958:	2208      	movs	r2, #8
 800595a:	701a      	strb	r2, [r3, #0]
 800595c:	e00c      	b.n	8005978 <UART_SetConfig+0x1c0>
 800595e:	231b      	movs	r3, #27
 8005960:	2220      	movs	r2, #32
 8005962:	189b      	adds	r3, r3, r2
 8005964:	19db      	adds	r3, r3, r7
 8005966:	2210      	movs	r2, #16
 8005968:	701a      	strb	r2, [r3, #0]
 800596a:	e005      	b.n	8005978 <UART_SetConfig+0x1c0>
 800596c:	231b      	movs	r3, #27
 800596e:	2220      	movs	r2, #32
 8005970:	189b      	adds	r3, r3, r2
 8005972:	19db      	adds	r3, r3, r7
 8005974:	2210      	movs	r2, #16
 8005976:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	4a61      	ldr	r2, [pc, #388]	; (8005b04 <UART_SetConfig+0x34c>)
 800597e:	4293      	cmp	r3, r2
 8005980:	d000      	beq.n	8005984 <UART_SetConfig+0x1cc>
 8005982:	e092      	b.n	8005aaa <UART_SetConfig+0x2f2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005984:	231b      	movs	r3, #27
 8005986:	2220      	movs	r2, #32
 8005988:	189b      	adds	r3, r3, r2
 800598a:	19db      	adds	r3, r3, r7
 800598c:	781b      	ldrb	r3, [r3, #0]
 800598e:	2b08      	cmp	r3, #8
 8005990:	d015      	beq.n	80059be <UART_SetConfig+0x206>
 8005992:	dc18      	bgt.n	80059c6 <UART_SetConfig+0x20e>
 8005994:	2b04      	cmp	r3, #4
 8005996:	d00d      	beq.n	80059b4 <UART_SetConfig+0x1fc>
 8005998:	dc15      	bgt.n	80059c6 <UART_SetConfig+0x20e>
 800599a:	2b00      	cmp	r3, #0
 800599c:	d002      	beq.n	80059a4 <UART_SetConfig+0x1ec>
 800599e:	2b02      	cmp	r3, #2
 80059a0:	d005      	beq.n	80059ae <UART_SetConfig+0x1f6>
 80059a2:	e010      	b.n	80059c6 <UART_SetConfig+0x20e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80059a4:	f7ff fc86 	bl	80052b4 <HAL_RCC_GetPCLK1Freq>
 80059a8:	0003      	movs	r3, r0
 80059aa:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80059ac:	e014      	b.n	80059d8 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80059ae:	4b5a      	ldr	r3, [pc, #360]	; (8005b18 <UART_SetConfig+0x360>)
 80059b0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80059b2:	e011      	b.n	80059d8 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80059b4:	f7ff fbf2 	bl	800519c <HAL_RCC_GetSysClockFreq>
 80059b8:	0003      	movs	r3, r0
 80059ba:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80059bc:	e00c      	b.n	80059d8 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80059be:	2380      	movs	r3, #128	; 0x80
 80059c0:	021b      	lsls	r3, r3, #8
 80059c2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80059c4:	e008      	b.n	80059d8 <UART_SetConfig+0x220>
      default:
        pclk = 0U;
 80059c6:	2300      	movs	r3, #0
 80059c8:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80059ca:	231a      	movs	r3, #26
 80059cc:	2220      	movs	r2, #32
 80059ce:	189b      	adds	r3, r3, r2
 80059d0:	19db      	adds	r3, r3, r7
 80059d2:	2201      	movs	r2, #1
 80059d4:	701a      	strb	r2, [r3, #0]
        break;
 80059d6:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80059d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d100      	bne.n	80059e0 <UART_SetConfig+0x228>
 80059de:	e147      	b.n	8005c70 <UART_SetConfig+0x4b8>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80059e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80059e4:	4b4d      	ldr	r3, [pc, #308]	; (8005b1c <UART_SetConfig+0x364>)
 80059e6:	0052      	lsls	r2, r2, #1
 80059e8:	5ad3      	ldrh	r3, [r2, r3]
 80059ea:	0019      	movs	r1, r3
 80059ec:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80059ee:	f7fa fba5 	bl	800013c <__udivsi3>
 80059f2:	0003      	movs	r3, r0
 80059f4:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80059f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059f8:	685a      	ldr	r2, [r3, #4]
 80059fa:	0013      	movs	r3, r2
 80059fc:	005b      	lsls	r3, r3, #1
 80059fe:	189b      	adds	r3, r3, r2
 8005a00:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005a02:	429a      	cmp	r2, r3
 8005a04:	d305      	bcc.n	8005a12 <UART_SetConfig+0x25a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a08:	685b      	ldr	r3, [r3, #4]
 8005a0a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005a0c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005a0e:	429a      	cmp	r2, r3
 8005a10:	d906      	bls.n	8005a20 <UART_SetConfig+0x268>
      {
        ret = HAL_ERROR;
 8005a12:	231a      	movs	r3, #26
 8005a14:	2220      	movs	r2, #32
 8005a16:	189b      	adds	r3, r3, r2
 8005a18:	19db      	adds	r3, r3, r7
 8005a1a:	2201      	movs	r2, #1
 8005a1c:	701a      	strb	r2, [r3, #0]
 8005a1e:	e127      	b.n	8005c70 <UART_SetConfig+0x4b8>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005a20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a22:	61bb      	str	r3, [r7, #24]
 8005a24:	2300      	movs	r3, #0
 8005a26:	61fb      	str	r3, [r7, #28]
 8005a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a2a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005a2c:	4b3b      	ldr	r3, [pc, #236]	; (8005b1c <UART_SetConfig+0x364>)
 8005a2e:	0052      	lsls	r2, r2, #1
 8005a30:	5ad3      	ldrh	r3, [r2, r3]
 8005a32:	613b      	str	r3, [r7, #16]
 8005a34:	2300      	movs	r3, #0
 8005a36:	617b      	str	r3, [r7, #20]
 8005a38:	693a      	ldr	r2, [r7, #16]
 8005a3a:	697b      	ldr	r3, [r7, #20]
 8005a3c:	69b8      	ldr	r0, [r7, #24]
 8005a3e:	69f9      	ldr	r1, [r7, #28]
 8005a40:	f7fa fd30 	bl	80004a4 <__aeabi_uldivmod>
 8005a44:	0002      	movs	r2, r0
 8005a46:	000b      	movs	r3, r1
 8005a48:	0e11      	lsrs	r1, r2, #24
 8005a4a:	021d      	lsls	r5, r3, #8
 8005a4c:	430d      	orrs	r5, r1
 8005a4e:	0214      	lsls	r4, r2, #8
 8005a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a52:	685b      	ldr	r3, [r3, #4]
 8005a54:	085b      	lsrs	r3, r3, #1
 8005a56:	60bb      	str	r3, [r7, #8]
 8005a58:	2300      	movs	r3, #0
 8005a5a:	60fb      	str	r3, [r7, #12]
 8005a5c:	68b8      	ldr	r0, [r7, #8]
 8005a5e:	68f9      	ldr	r1, [r7, #12]
 8005a60:	1900      	adds	r0, r0, r4
 8005a62:	4169      	adcs	r1, r5
 8005a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a66:	685b      	ldr	r3, [r3, #4]
 8005a68:	603b      	str	r3, [r7, #0]
 8005a6a:	2300      	movs	r3, #0
 8005a6c:	607b      	str	r3, [r7, #4]
 8005a6e:	683a      	ldr	r2, [r7, #0]
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	f7fa fd17 	bl	80004a4 <__aeabi_uldivmod>
 8005a76:	0002      	movs	r2, r0
 8005a78:	000b      	movs	r3, r1
 8005a7a:	0013      	movs	r3, r2
 8005a7c:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005a7e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a80:	23c0      	movs	r3, #192	; 0xc0
 8005a82:	009b      	lsls	r3, r3, #2
 8005a84:	429a      	cmp	r2, r3
 8005a86:	d309      	bcc.n	8005a9c <UART_SetConfig+0x2e4>
 8005a88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a8a:	2380      	movs	r3, #128	; 0x80
 8005a8c:	035b      	lsls	r3, r3, #13
 8005a8e:	429a      	cmp	r2, r3
 8005a90:	d204      	bcs.n	8005a9c <UART_SetConfig+0x2e4>
        {
          huart->Instance->BRR = usartdiv;
 8005a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a98:	60da      	str	r2, [r3, #12]
 8005a9a:	e0e9      	b.n	8005c70 <UART_SetConfig+0x4b8>
        }
        else
        {
          ret = HAL_ERROR;
 8005a9c:	231a      	movs	r3, #26
 8005a9e:	2220      	movs	r2, #32
 8005aa0:	189b      	adds	r3, r3, r2
 8005aa2:	19db      	adds	r3, r3, r7
 8005aa4:	2201      	movs	r2, #1
 8005aa6:	701a      	strb	r2, [r3, #0]
 8005aa8:	e0e2      	b.n	8005c70 <UART_SetConfig+0x4b8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aac:	69da      	ldr	r2, [r3, #28]
 8005aae:	2380      	movs	r3, #128	; 0x80
 8005ab0:	021b      	lsls	r3, r3, #8
 8005ab2:	429a      	cmp	r2, r3
 8005ab4:	d000      	beq.n	8005ab8 <UART_SetConfig+0x300>
 8005ab6:	e083      	b.n	8005bc0 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8005ab8:	231b      	movs	r3, #27
 8005aba:	2220      	movs	r2, #32
 8005abc:	189b      	adds	r3, r3, r2
 8005abe:	19db      	adds	r3, r3, r7
 8005ac0:	781b      	ldrb	r3, [r3, #0]
 8005ac2:	2b08      	cmp	r3, #8
 8005ac4:	d015      	beq.n	8005af2 <UART_SetConfig+0x33a>
 8005ac6:	dc2b      	bgt.n	8005b20 <UART_SetConfig+0x368>
 8005ac8:	2b04      	cmp	r3, #4
 8005aca:	d00d      	beq.n	8005ae8 <UART_SetConfig+0x330>
 8005acc:	dc28      	bgt.n	8005b20 <UART_SetConfig+0x368>
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d002      	beq.n	8005ad8 <UART_SetConfig+0x320>
 8005ad2:	2b02      	cmp	r3, #2
 8005ad4:	d005      	beq.n	8005ae2 <UART_SetConfig+0x32a>
 8005ad6:	e023      	b.n	8005b20 <UART_SetConfig+0x368>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ad8:	f7ff fbec 	bl	80052b4 <HAL_RCC_GetPCLK1Freq>
 8005adc:	0003      	movs	r3, r0
 8005ade:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005ae0:	e027      	b.n	8005b32 <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005ae2:	4b0d      	ldr	r3, [pc, #52]	; (8005b18 <UART_SetConfig+0x360>)
 8005ae4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005ae6:	e024      	b.n	8005b32 <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005ae8:	f7ff fb58 	bl	800519c <HAL_RCC_GetSysClockFreq>
 8005aec:	0003      	movs	r3, r0
 8005aee:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005af0:	e01f      	b.n	8005b32 <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005af2:	2380      	movs	r3, #128	; 0x80
 8005af4:	021b      	lsls	r3, r3, #8
 8005af6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005af8:	e01b      	b.n	8005b32 <UART_SetConfig+0x37a>
 8005afa:	46c0      	nop			; (mov r8, r8)
 8005afc:	cfff69f3 	.word	0xcfff69f3
 8005b00:	ffffcfff 	.word	0xffffcfff
 8005b04:	40008000 	.word	0x40008000
 8005b08:	11fff4ff 	.word	0x11fff4ff
 8005b0c:	40013800 	.word	0x40013800
 8005b10:	40021000 	.word	0x40021000
 8005b14:	40004400 	.word	0x40004400
 8005b18:	00f42400 	.word	0x00f42400
 8005b1c:	0800acf0 	.word	0x0800acf0
      default:
        pclk = 0U;
 8005b20:	2300      	movs	r3, #0
 8005b22:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8005b24:	231a      	movs	r3, #26
 8005b26:	2220      	movs	r2, #32
 8005b28:	189b      	adds	r3, r3, r2
 8005b2a:	19db      	adds	r3, r3, r7
 8005b2c:	2201      	movs	r2, #1
 8005b2e:	701a      	strb	r2, [r3, #0]
        break;
 8005b30:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005b32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d100      	bne.n	8005b3a <UART_SetConfig+0x382>
 8005b38:	e09a      	b.n	8005c70 <UART_SetConfig+0x4b8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b3c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005b3e:	4b58      	ldr	r3, [pc, #352]	; (8005ca0 <UART_SetConfig+0x4e8>)
 8005b40:	0052      	lsls	r2, r2, #1
 8005b42:	5ad3      	ldrh	r3, [r2, r3]
 8005b44:	0019      	movs	r1, r3
 8005b46:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005b48:	f7fa faf8 	bl	800013c <__udivsi3>
 8005b4c:	0003      	movs	r3, r0
 8005b4e:	005a      	lsls	r2, r3, #1
 8005b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b52:	685b      	ldr	r3, [r3, #4]
 8005b54:	085b      	lsrs	r3, r3, #1
 8005b56:	18d2      	adds	r2, r2, r3
 8005b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b5a:	685b      	ldr	r3, [r3, #4]
 8005b5c:	0019      	movs	r1, r3
 8005b5e:	0010      	movs	r0, r2
 8005b60:	f7fa faec 	bl	800013c <__udivsi3>
 8005b64:	0003      	movs	r3, r0
 8005b66:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005b68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b6a:	2b0f      	cmp	r3, #15
 8005b6c:	d921      	bls.n	8005bb2 <UART_SetConfig+0x3fa>
 8005b6e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b70:	2380      	movs	r3, #128	; 0x80
 8005b72:	025b      	lsls	r3, r3, #9
 8005b74:	429a      	cmp	r2, r3
 8005b76:	d21c      	bcs.n	8005bb2 <UART_SetConfig+0x3fa>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005b78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b7a:	b29a      	uxth	r2, r3
 8005b7c:	200e      	movs	r0, #14
 8005b7e:	2420      	movs	r4, #32
 8005b80:	1903      	adds	r3, r0, r4
 8005b82:	19db      	adds	r3, r3, r7
 8005b84:	210f      	movs	r1, #15
 8005b86:	438a      	bics	r2, r1
 8005b88:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005b8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b8c:	085b      	lsrs	r3, r3, #1
 8005b8e:	b29b      	uxth	r3, r3
 8005b90:	2207      	movs	r2, #7
 8005b92:	4013      	ands	r3, r2
 8005b94:	b299      	uxth	r1, r3
 8005b96:	1903      	adds	r3, r0, r4
 8005b98:	19db      	adds	r3, r3, r7
 8005b9a:	1902      	adds	r2, r0, r4
 8005b9c:	19d2      	adds	r2, r2, r7
 8005b9e:	8812      	ldrh	r2, [r2, #0]
 8005ba0:	430a      	orrs	r2, r1
 8005ba2:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8005ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	1902      	adds	r2, r0, r4
 8005baa:	19d2      	adds	r2, r2, r7
 8005bac:	8812      	ldrh	r2, [r2, #0]
 8005bae:	60da      	str	r2, [r3, #12]
 8005bb0:	e05e      	b.n	8005c70 <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 8005bb2:	231a      	movs	r3, #26
 8005bb4:	2220      	movs	r2, #32
 8005bb6:	189b      	adds	r3, r3, r2
 8005bb8:	19db      	adds	r3, r3, r7
 8005bba:	2201      	movs	r2, #1
 8005bbc:	701a      	strb	r2, [r3, #0]
 8005bbe:	e057      	b.n	8005c70 <UART_SetConfig+0x4b8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005bc0:	231b      	movs	r3, #27
 8005bc2:	2220      	movs	r2, #32
 8005bc4:	189b      	adds	r3, r3, r2
 8005bc6:	19db      	adds	r3, r3, r7
 8005bc8:	781b      	ldrb	r3, [r3, #0]
 8005bca:	2b08      	cmp	r3, #8
 8005bcc:	d015      	beq.n	8005bfa <UART_SetConfig+0x442>
 8005bce:	dc18      	bgt.n	8005c02 <UART_SetConfig+0x44a>
 8005bd0:	2b04      	cmp	r3, #4
 8005bd2:	d00d      	beq.n	8005bf0 <UART_SetConfig+0x438>
 8005bd4:	dc15      	bgt.n	8005c02 <UART_SetConfig+0x44a>
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d002      	beq.n	8005be0 <UART_SetConfig+0x428>
 8005bda:	2b02      	cmp	r3, #2
 8005bdc:	d005      	beq.n	8005bea <UART_SetConfig+0x432>
 8005bde:	e010      	b.n	8005c02 <UART_SetConfig+0x44a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005be0:	f7ff fb68 	bl	80052b4 <HAL_RCC_GetPCLK1Freq>
 8005be4:	0003      	movs	r3, r0
 8005be6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005be8:	e014      	b.n	8005c14 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005bea:	4b2e      	ldr	r3, [pc, #184]	; (8005ca4 <UART_SetConfig+0x4ec>)
 8005bec:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005bee:	e011      	b.n	8005c14 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005bf0:	f7ff fad4 	bl	800519c <HAL_RCC_GetSysClockFreq>
 8005bf4:	0003      	movs	r3, r0
 8005bf6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005bf8:	e00c      	b.n	8005c14 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005bfa:	2380      	movs	r3, #128	; 0x80
 8005bfc:	021b      	lsls	r3, r3, #8
 8005bfe:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005c00:	e008      	b.n	8005c14 <UART_SetConfig+0x45c>
      default:
        pclk = 0U;
 8005c02:	2300      	movs	r3, #0
 8005c04:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8005c06:	231a      	movs	r3, #26
 8005c08:	2220      	movs	r2, #32
 8005c0a:	189b      	adds	r3, r3, r2
 8005c0c:	19db      	adds	r3, r3, r7
 8005c0e:	2201      	movs	r2, #1
 8005c10:	701a      	strb	r2, [r3, #0]
        break;
 8005c12:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8005c14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d02a      	beq.n	8005c70 <UART_SetConfig+0x4b8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c1c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005c1e:	4b20      	ldr	r3, [pc, #128]	; (8005ca0 <UART_SetConfig+0x4e8>)
 8005c20:	0052      	lsls	r2, r2, #1
 8005c22:	5ad3      	ldrh	r3, [r2, r3]
 8005c24:	0019      	movs	r1, r3
 8005c26:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005c28:	f7fa fa88 	bl	800013c <__udivsi3>
 8005c2c:	0003      	movs	r3, r0
 8005c2e:	001a      	movs	r2, r3
 8005c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c32:	685b      	ldr	r3, [r3, #4]
 8005c34:	085b      	lsrs	r3, r3, #1
 8005c36:	18d2      	adds	r2, r2, r3
 8005c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c3a:	685b      	ldr	r3, [r3, #4]
 8005c3c:	0019      	movs	r1, r3
 8005c3e:	0010      	movs	r0, r2
 8005c40:	f7fa fa7c 	bl	800013c <__udivsi3>
 8005c44:	0003      	movs	r3, r0
 8005c46:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005c48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c4a:	2b0f      	cmp	r3, #15
 8005c4c:	d90a      	bls.n	8005c64 <UART_SetConfig+0x4ac>
 8005c4e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c50:	2380      	movs	r3, #128	; 0x80
 8005c52:	025b      	lsls	r3, r3, #9
 8005c54:	429a      	cmp	r2, r3
 8005c56:	d205      	bcs.n	8005c64 <UART_SetConfig+0x4ac>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005c58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c5a:	b29a      	uxth	r2, r3
 8005c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	60da      	str	r2, [r3, #12]
 8005c62:	e005      	b.n	8005c70 <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 8005c64:	231a      	movs	r3, #26
 8005c66:	2220      	movs	r2, #32
 8005c68:	189b      	adds	r3, r3, r2
 8005c6a:	19db      	adds	r3, r3, r7
 8005c6c:	2201      	movs	r2, #1
 8005c6e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c72:	226a      	movs	r2, #106	; 0x6a
 8005c74:	2101      	movs	r1, #1
 8005c76:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8005c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c7a:	2268      	movs	r2, #104	; 0x68
 8005c7c:	2101      	movs	r1, #1
 8005c7e:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c82:	2200      	movs	r2, #0
 8005c84:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8005c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c88:	2200      	movs	r2, #0
 8005c8a:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8005c8c:	231a      	movs	r3, #26
 8005c8e:	2220      	movs	r2, #32
 8005c90:	189b      	adds	r3, r3, r2
 8005c92:	19db      	adds	r3, r3, r7
 8005c94:	781b      	ldrb	r3, [r3, #0]
}
 8005c96:	0018      	movs	r0, r3
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	b010      	add	sp, #64	; 0x40
 8005c9c:	bdb0      	pop	{r4, r5, r7, pc}
 8005c9e:	46c0      	nop			; (mov r8, r8)
 8005ca0:	0800acf0 	.word	0x0800acf0
 8005ca4:	00f42400 	.word	0x00f42400

08005ca8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005ca8:	b580      	push	{r7, lr}
 8005caa:	b082      	sub	sp, #8
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cb4:	2201      	movs	r2, #1
 8005cb6:	4013      	ands	r3, r2
 8005cb8:	d00b      	beq.n	8005cd2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	685b      	ldr	r3, [r3, #4]
 8005cc0:	4a4a      	ldr	r2, [pc, #296]	; (8005dec <UART_AdvFeatureConfig+0x144>)
 8005cc2:	4013      	ands	r3, r2
 8005cc4:	0019      	movs	r1, r3
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	430a      	orrs	r2, r1
 8005cd0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cd6:	2202      	movs	r2, #2
 8005cd8:	4013      	ands	r3, r2
 8005cda:	d00b      	beq.n	8005cf4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	685b      	ldr	r3, [r3, #4]
 8005ce2:	4a43      	ldr	r2, [pc, #268]	; (8005df0 <UART_AdvFeatureConfig+0x148>)
 8005ce4:	4013      	ands	r3, r2
 8005ce6:	0019      	movs	r1, r3
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	430a      	orrs	r2, r1
 8005cf2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cf8:	2204      	movs	r2, #4
 8005cfa:	4013      	ands	r3, r2
 8005cfc:	d00b      	beq.n	8005d16 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	685b      	ldr	r3, [r3, #4]
 8005d04:	4a3b      	ldr	r2, [pc, #236]	; (8005df4 <UART_AdvFeatureConfig+0x14c>)
 8005d06:	4013      	ands	r3, r2
 8005d08:	0019      	movs	r1, r3
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	430a      	orrs	r2, r1
 8005d14:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d1a:	2208      	movs	r2, #8
 8005d1c:	4013      	ands	r3, r2
 8005d1e:	d00b      	beq.n	8005d38 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	685b      	ldr	r3, [r3, #4]
 8005d26:	4a34      	ldr	r2, [pc, #208]	; (8005df8 <UART_AdvFeatureConfig+0x150>)
 8005d28:	4013      	ands	r3, r2
 8005d2a:	0019      	movs	r1, r3
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	430a      	orrs	r2, r1
 8005d36:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d3c:	2210      	movs	r2, #16
 8005d3e:	4013      	ands	r3, r2
 8005d40:	d00b      	beq.n	8005d5a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	689b      	ldr	r3, [r3, #8]
 8005d48:	4a2c      	ldr	r2, [pc, #176]	; (8005dfc <UART_AdvFeatureConfig+0x154>)
 8005d4a:	4013      	ands	r3, r2
 8005d4c:	0019      	movs	r1, r3
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	430a      	orrs	r2, r1
 8005d58:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d5e:	2220      	movs	r2, #32
 8005d60:	4013      	ands	r3, r2
 8005d62:	d00b      	beq.n	8005d7c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	689b      	ldr	r3, [r3, #8]
 8005d6a:	4a25      	ldr	r2, [pc, #148]	; (8005e00 <UART_AdvFeatureConfig+0x158>)
 8005d6c:	4013      	ands	r3, r2
 8005d6e:	0019      	movs	r1, r3
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	430a      	orrs	r2, r1
 8005d7a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d80:	2240      	movs	r2, #64	; 0x40
 8005d82:	4013      	ands	r3, r2
 8005d84:	d01d      	beq.n	8005dc2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	685b      	ldr	r3, [r3, #4]
 8005d8c:	4a1d      	ldr	r2, [pc, #116]	; (8005e04 <UART_AdvFeatureConfig+0x15c>)
 8005d8e:	4013      	ands	r3, r2
 8005d90:	0019      	movs	r1, r3
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	430a      	orrs	r2, r1
 8005d9c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005da2:	2380      	movs	r3, #128	; 0x80
 8005da4:	035b      	lsls	r3, r3, #13
 8005da6:	429a      	cmp	r2, r3
 8005da8:	d10b      	bne.n	8005dc2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	685b      	ldr	r3, [r3, #4]
 8005db0:	4a15      	ldr	r2, [pc, #84]	; (8005e08 <UART_AdvFeatureConfig+0x160>)
 8005db2:	4013      	ands	r3, r2
 8005db4:	0019      	movs	r1, r3
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	430a      	orrs	r2, r1
 8005dc0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dc6:	2280      	movs	r2, #128	; 0x80
 8005dc8:	4013      	ands	r3, r2
 8005dca:	d00b      	beq.n	8005de4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	685b      	ldr	r3, [r3, #4]
 8005dd2:	4a0e      	ldr	r2, [pc, #56]	; (8005e0c <UART_AdvFeatureConfig+0x164>)
 8005dd4:	4013      	ands	r3, r2
 8005dd6:	0019      	movs	r1, r3
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	430a      	orrs	r2, r1
 8005de2:	605a      	str	r2, [r3, #4]
  }
}
 8005de4:	46c0      	nop			; (mov r8, r8)
 8005de6:	46bd      	mov	sp, r7
 8005de8:	b002      	add	sp, #8
 8005dea:	bd80      	pop	{r7, pc}
 8005dec:	fffdffff 	.word	0xfffdffff
 8005df0:	fffeffff 	.word	0xfffeffff
 8005df4:	fffbffff 	.word	0xfffbffff
 8005df8:	ffff7fff 	.word	0xffff7fff
 8005dfc:	ffffefff 	.word	0xffffefff
 8005e00:	ffffdfff 	.word	0xffffdfff
 8005e04:	ffefffff 	.word	0xffefffff
 8005e08:	ff9fffff 	.word	0xff9fffff
 8005e0c:	fff7ffff 	.word	0xfff7ffff

08005e10 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005e10:	b580      	push	{r7, lr}
 8005e12:	b086      	sub	sp, #24
 8005e14:	af02      	add	r7, sp, #8
 8005e16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2290      	movs	r2, #144	; 0x90
 8005e1c:	2100      	movs	r1, #0
 8005e1e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005e20:	f7fd fd40 	bl	80038a4 <HAL_GetTick>
 8005e24:	0003      	movs	r3, r0
 8005e26:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	2208      	movs	r2, #8
 8005e30:	4013      	ands	r3, r2
 8005e32:	2b08      	cmp	r3, #8
 8005e34:	d10c      	bne.n	8005e50 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	2280      	movs	r2, #128	; 0x80
 8005e3a:	0391      	lsls	r1, r2, #14
 8005e3c:	6878      	ldr	r0, [r7, #4]
 8005e3e:	4a1a      	ldr	r2, [pc, #104]	; (8005ea8 <UART_CheckIdleState+0x98>)
 8005e40:	9200      	str	r2, [sp, #0]
 8005e42:	2200      	movs	r2, #0
 8005e44:	f000 f832 	bl	8005eac <UART_WaitOnFlagUntilTimeout>
 8005e48:	1e03      	subs	r3, r0, #0
 8005e4a:	d001      	beq.n	8005e50 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005e4c:	2303      	movs	r3, #3
 8005e4e:	e026      	b.n	8005e9e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	2204      	movs	r2, #4
 8005e58:	4013      	ands	r3, r2
 8005e5a:	2b04      	cmp	r3, #4
 8005e5c:	d10c      	bne.n	8005e78 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	2280      	movs	r2, #128	; 0x80
 8005e62:	03d1      	lsls	r1, r2, #15
 8005e64:	6878      	ldr	r0, [r7, #4]
 8005e66:	4a10      	ldr	r2, [pc, #64]	; (8005ea8 <UART_CheckIdleState+0x98>)
 8005e68:	9200      	str	r2, [sp, #0]
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	f000 f81e 	bl	8005eac <UART_WaitOnFlagUntilTimeout>
 8005e70:	1e03      	subs	r3, r0, #0
 8005e72:	d001      	beq.n	8005e78 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005e74:	2303      	movs	r3, #3
 8005e76:	e012      	b.n	8005e9e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2288      	movs	r2, #136	; 0x88
 8005e7c:	2120      	movs	r1, #32
 8005e7e:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	228c      	movs	r2, #140	; 0x8c
 8005e84:	2120      	movs	r1, #32
 8005e86:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	2200      	movs	r2, #0
 8005e92:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2284      	movs	r2, #132	; 0x84
 8005e98:	2100      	movs	r1, #0
 8005e9a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005e9c:	2300      	movs	r3, #0
}
 8005e9e:	0018      	movs	r0, r3
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	b004      	add	sp, #16
 8005ea4:	bd80      	pop	{r7, pc}
 8005ea6:	46c0      	nop			; (mov r8, r8)
 8005ea8:	01ffffff 	.word	0x01ffffff

08005eac <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005eac:	b580      	push	{r7, lr}
 8005eae:	b094      	sub	sp, #80	; 0x50
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	60f8      	str	r0, [r7, #12]
 8005eb4:	60b9      	str	r1, [r7, #8]
 8005eb6:	603b      	str	r3, [r7, #0]
 8005eb8:	1dfb      	adds	r3, r7, #7
 8005eba:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ebc:	e0a7      	b.n	800600e <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ebe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005ec0:	3301      	adds	r3, #1
 8005ec2:	d100      	bne.n	8005ec6 <UART_WaitOnFlagUntilTimeout+0x1a>
 8005ec4:	e0a3      	b.n	800600e <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ec6:	f7fd fced 	bl	80038a4 <HAL_GetTick>
 8005eca:	0002      	movs	r2, r0
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	1ad3      	subs	r3, r2, r3
 8005ed0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005ed2:	429a      	cmp	r2, r3
 8005ed4:	d302      	bcc.n	8005edc <UART_WaitOnFlagUntilTimeout+0x30>
 8005ed6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d13f      	bne.n	8005f5c <UART_WaitOnFlagUntilTimeout+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005edc:	f3ef 8310 	mrs	r3, PRIMASK
 8005ee0:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8005ee2:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005ee4:	647b      	str	r3, [r7, #68]	; 0x44
 8005ee6:	2301      	movs	r3, #1
 8005ee8:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005eea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005eec:	f383 8810 	msr	PRIMASK, r3
}
 8005ef0:	46c0      	nop			; (mov r8, r8)
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	681a      	ldr	r2, [r3, #0]
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	494e      	ldr	r1, [pc, #312]	; (8006038 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8005efe:	400a      	ands	r2, r1
 8005f00:	601a      	str	r2, [r3, #0]
 8005f02:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f04:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f08:	f383 8810 	msr	PRIMASK, r3
}
 8005f0c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005f0e:	f3ef 8310 	mrs	r3, PRIMASK
 8005f12:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8005f14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f16:	643b      	str	r3, [r7, #64]	; 0x40
 8005f18:	2301      	movs	r3, #1
 8005f1a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f1e:	f383 8810 	msr	PRIMASK, r3
}
 8005f22:	46c0      	nop			; (mov r8, r8)
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	689a      	ldr	r2, [r3, #8]
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	2101      	movs	r1, #1
 8005f30:	438a      	bics	r2, r1
 8005f32:	609a      	str	r2, [r3, #8]
 8005f34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f36:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f3a:	f383 8810 	msr	PRIMASK, r3
}
 8005f3e:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	2288      	movs	r2, #136	; 0x88
 8005f44:	2120      	movs	r1, #32
 8005f46:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	228c      	movs	r2, #140	; 0x8c
 8005f4c:	2120      	movs	r1, #32
 8005f4e:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	2284      	movs	r2, #132	; 0x84
 8005f54:	2100      	movs	r1, #0
 8005f56:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005f58:	2303      	movs	r3, #3
 8005f5a:	e069      	b.n	8006030 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	2204      	movs	r2, #4
 8005f64:	4013      	ands	r3, r2
 8005f66:	d052      	beq.n	800600e <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	69da      	ldr	r2, [r3, #28]
 8005f6e:	2380      	movs	r3, #128	; 0x80
 8005f70:	011b      	lsls	r3, r3, #4
 8005f72:	401a      	ands	r2, r3
 8005f74:	2380      	movs	r3, #128	; 0x80
 8005f76:	011b      	lsls	r3, r3, #4
 8005f78:	429a      	cmp	r2, r3
 8005f7a:	d148      	bne.n	800600e <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	2280      	movs	r2, #128	; 0x80
 8005f82:	0112      	lsls	r2, r2, #4
 8005f84:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005f86:	f3ef 8310 	mrs	r3, PRIMASK
 8005f8a:	613b      	str	r3, [r7, #16]
  return(result);
 8005f8c:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005f8e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005f90:	2301      	movs	r3, #1
 8005f92:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f94:	697b      	ldr	r3, [r7, #20]
 8005f96:	f383 8810 	msr	PRIMASK, r3
}
 8005f9a:	46c0      	nop			; (mov r8, r8)
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	681a      	ldr	r2, [r3, #0]
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	4924      	ldr	r1, [pc, #144]	; (8006038 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8005fa8:	400a      	ands	r2, r1
 8005faa:	601a      	str	r2, [r3, #0]
 8005fac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005fae:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005fb0:	69bb      	ldr	r3, [r7, #24]
 8005fb2:	f383 8810 	msr	PRIMASK, r3
}
 8005fb6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005fb8:	f3ef 8310 	mrs	r3, PRIMASK
 8005fbc:	61fb      	str	r3, [r7, #28]
  return(result);
 8005fbe:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fc0:	64bb      	str	r3, [r7, #72]	; 0x48
 8005fc2:	2301      	movs	r3, #1
 8005fc4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005fc6:	6a3b      	ldr	r3, [r7, #32]
 8005fc8:	f383 8810 	msr	PRIMASK, r3
}
 8005fcc:	46c0      	nop			; (mov r8, r8)
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	689a      	ldr	r2, [r3, #8]
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	2101      	movs	r1, #1
 8005fda:	438a      	bics	r2, r1
 8005fdc:	609a      	str	r2, [r3, #8]
 8005fde:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005fe0:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fe4:	f383 8810 	msr	PRIMASK, r3
}
 8005fe8:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	2288      	movs	r2, #136	; 0x88
 8005fee:	2120      	movs	r1, #32
 8005ff0:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	228c      	movs	r2, #140	; 0x8c
 8005ff6:	2120      	movs	r1, #32
 8005ff8:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	2290      	movs	r2, #144	; 0x90
 8005ffe:	2120      	movs	r1, #32
 8006000:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	2284      	movs	r2, #132	; 0x84
 8006006:	2100      	movs	r1, #0
 8006008:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800600a:	2303      	movs	r3, #3
 800600c:	e010      	b.n	8006030 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	69db      	ldr	r3, [r3, #28]
 8006014:	68ba      	ldr	r2, [r7, #8]
 8006016:	4013      	ands	r3, r2
 8006018:	68ba      	ldr	r2, [r7, #8]
 800601a:	1ad3      	subs	r3, r2, r3
 800601c:	425a      	negs	r2, r3
 800601e:	4153      	adcs	r3, r2
 8006020:	b2db      	uxtb	r3, r3
 8006022:	001a      	movs	r2, r3
 8006024:	1dfb      	adds	r3, r7, #7
 8006026:	781b      	ldrb	r3, [r3, #0]
 8006028:	429a      	cmp	r2, r3
 800602a:	d100      	bne.n	800602e <UART_WaitOnFlagUntilTimeout+0x182>
 800602c:	e747      	b.n	8005ebe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800602e:	2300      	movs	r3, #0
}
 8006030:	0018      	movs	r0, r3
 8006032:	46bd      	mov	sp, r7
 8006034:	b014      	add	sp, #80	; 0x50
 8006036:	bd80      	pop	{r7, pc}
 8006038:	fffffe5f 	.word	0xfffffe5f

0800603c <__errno>:
 800603c:	4b01      	ldr	r3, [pc, #4]	; (8006044 <__errno+0x8>)
 800603e:	6818      	ldr	r0, [r3, #0]
 8006040:	4770      	bx	lr
 8006042:	46c0      	nop			; (mov r8, r8)
 8006044:	2000000c 	.word	0x2000000c

08006048 <__libc_init_array>:
 8006048:	b570      	push	{r4, r5, r6, lr}
 800604a:	2600      	movs	r6, #0
 800604c:	4d0c      	ldr	r5, [pc, #48]	; (8006080 <__libc_init_array+0x38>)
 800604e:	4c0d      	ldr	r4, [pc, #52]	; (8006084 <__libc_init_array+0x3c>)
 8006050:	1b64      	subs	r4, r4, r5
 8006052:	10a4      	asrs	r4, r4, #2
 8006054:	42a6      	cmp	r6, r4
 8006056:	d109      	bne.n	800606c <__libc_init_array+0x24>
 8006058:	2600      	movs	r6, #0
 800605a:	f004 fd47 	bl	800aaec <_init>
 800605e:	4d0a      	ldr	r5, [pc, #40]	; (8006088 <__libc_init_array+0x40>)
 8006060:	4c0a      	ldr	r4, [pc, #40]	; (800608c <__libc_init_array+0x44>)
 8006062:	1b64      	subs	r4, r4, r5
 8006064:	10a4      	asrs	r4, r4, #2
 8006066:	42a6      	cmp	r6, r4
 8006068:	d105      	bne.n	8006076 <__libc_init_array+0x2e>
 800606a:	bd70      	pop	{r4, r5, r6, pc}
 800606c:	00b3      	lsls	r3, r6, #2
 800606e:	58eb      	ldr	r3, [r5, r3]
 8006070:	4798      	blx	r3
 8006072:	3601      	adds	r6, #1
 8006074:	e7ee      	b.n	8006054 <__libc_init_array+0xc>
 8006076:	00b3      	lsls	r3, r6, #2
 8006078:	58eb      	ldr	r3, [r5, r3]
 800607a:	4798      	blx	r3
 800607c:	3601      	adds	r6, #1
 800607e:	e7f2      	b.n	8006066 <__libc_init_array+0x1e>
 8006080:	0800b1b4 	.word	0x0800b1b4
 8006084:	0800b1b4 	.word	0x0800b1b4
 8006088:	0800b1b4 	.word	0x0800b1b4
 800608c:	0800b1b8 	.word	0x0800b1b8

08006090 <memset>:
 8006090:	0003      	movs	r3, r0
 8006092:	1882      	adds	r2, r0, r2
 8006094:	4293      	cmp	r3, r2
 8006096:	d100      	bne.n	800609a <memset+0xa>
 8006098:	4770      	bx	lr
 800609a:	7019      	strb	r1, [r3, #0]
 800609c:	3301      	adds	r3, #1
 800609e:	e7f9      	b.n	8006094 <memset+0x4>

080060a0 <__cvt>:
 80060a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80060a2:	001e      	movs	r6, r3
 80060a4:	2300      	movs	r3, #0
 80060a6:	0014      	movs	r4, r2
 80060a8:	b08b      	sub	sp, #44	; 0x2c
 80060aa:	429e      	cmp	r6, r3
 80060ac:	da04      	bge.n	80060b8 <__cvt+0x18>
 80060ae:	2180      	movs	r1, #128	; 0x80
 80060b0:	0609      	lsls	r1, r1, #24
 80060b2:	1873      	adds	r3, r6, r1
 80060b4:	001e      	movs	r6, r3
 80060b6:	232d      	movs	r3, #45	; 0x2d
 80060b8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80060ba:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80060bc:	7013      	strb	r3, [r2, #0]
 80060be:	2320      	movs	r3, #32
 80060c0:	2203      	movs	r2, #3
 80060c2:	439f      	bics	r7, r3
 80060c4:	2f46      	cmp	r7, #70	; 0x46
 80060c6:	d007      	beq.n	80060d8 <__cvt+0x38>
 80060c8:	003b      	movs	r3, r7
 80060ca:	3b45      	subs	r3, #69	; 0x45
 80060cc:	4259      	negs	r1, r3
 80060ce:	414b      	adcs	r3, r1
 80060d0:	9910      	ldr	r1, [sp, #64]	; 0x40
 80060d2:	3a01      	subs	r2, #1
 80060d4:	18cb      	adds	r3, r1, r3
 80060d6:	9310      	str	r3, [sp, #64]	; 0x40
 80060d8:	ab09      	add	r3, sp, #36	; 0x24
 80060da:	9304      	str	r3, [sp, #16]
 80060dc:	ab08      	add	r3, sp, #32
 80060de:	9303      	str	r3, [sp, #12]
 80060e0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80060e2:	9200      	str	r2, [sp, #0]
 80060e4:	9302      	str	r3, [sp, #8]
 80060e6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80060e8:	0022      	movs	r2, r4
 80060ea:	9301      	str	r3, [sp, #4]
 80060ec:	0033      	movs	r3, r6
 80060ee:	f001 fdc3 	bl	8007c78 <_dtoa_r>
 80060f2:	0005      	movs	r5, r0
 80060f4:	2f47      	cmp	r7, #71	; 0x47
 80060f6:	d102      	bne.n	80060fe <__cvt+0x5e>
 80060f8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80060fa:	07db      	lsls	r3, r3, #31
 80060fc:	d528      	bpl.n	8006150 <__cvt+0xb0>
 80060fe:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006100:	18eb      	adds	r3, r5, r3
 8006102:	9307      	str	r3, [sp, #28]
 8006104:	2f46      	cmp	r7, #70	; 0x46
 8006106:	d114      	bne.n	8006132 <__cvt+0x92>
 8006108:	782b      	ldrb	r3, [r5, #0]
 800610a:	2b30      	cmp	r3, #48	; 0x30
 800610c:	d10c      	bne.n	8006128 <__cvt+0x88>
 800610e:	2200      	movs	r2, #0
 8006110:	2300      	movs	r3, #0
 8006112:	0020      	movs	r0, r4
 8006114:	0031      	movs	r1, r6
 8006116:	f7fa f997 	bl	8000448 <__aeabi_dcmpeq>
 800611a:	2800      	cmp	r0, #0
 800611c:	d104      	bne.n	8006128 <__cvt+0x88>
 800611e:	2301      	movs	r3, #1
 8006120:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006122:	1a9b      	subs	r3, r3, r2
 8006124:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006126:	6013      	str	r3, [r2, #0]
 8006128:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800612a:	9a07      	ldr	r2, [sp, #28]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	18d3      	adds	r3, r2, r3
 8006130:	9307      	str	r3, [sp, #28]
 8006132:	2200      	movs	r2, #0
 8006134:	2300      	movs	r3, #0
 8006136:	0020      	movs	r0, r4
 8006138:	0031      	movs	r1, r6
 800613a:	f7fa f985 	bl	8000448 <__aeabi_dcmpeq>
 800613e:	2800      	cmp	r0, #0
 8006140:	d001      	beq.n	8006146 <__cvt+0xa6>
 8006142:	9b07      	ldr	r3, [sp, #28]
 8006144:	9309      	str	r3, [sp, #36]	; 0x24
 8006146:	2230      	movs	r2, #48	; 0x30
 8006148:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800614a:	9907      	ldr	r1, [sp, #28]
 800614c:	428b      	cmp	r3, r1
 800614e:	d306      	bcc.n	800615e <__cvt+0xbe>
 8006150:	0028      	movs	r0, r5
 8006152:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006154:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006156:	1b5b      	subs	r3, r3, r5
 8006158:	6013      	str	r3, [r2, #0]
 800615a:	b00b      	add	sp, #44	; 0x2c
 800615c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800615e:	1c59      	adds	r1, r3, #1
 8006160:	9109      	str	r1, [sp, #36]	; 0x24
 8006162:	701a      	strb	r2, [r3, #0]
 8006164:	e7f0      	b.n	8006148 <__cvt+0xa8>

08006166 <__exponent>:
 8006166:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006168:	1c83      	adds	r3, r0, #2
 800616a:	b087      	sub	sp, #28
 800616c:	9303      	str	r3, [sp, #12]
 800616e:	0005      	movs	r5, r0
 8006170:	000c      	movs	r4, r1
 8006172:	232b      	movs	r3, #43	; 0x2b
 8006174:	7002      	strb	r2, [r0, #0]
 8006176:	2900      	cmp	r1, #0
 8006178:	da01      	bge.n	800617e <__exponent+0x18>
 800617a:	424c      	negs	r4, r1
 800617c:	3302      	adds	r3, #2
 800617e:	706b      	strb	r3, [r5, #1]
 8006180:	2c09      	cmp	r4, #9
 8006182:	dd31      	ble.n	80061e8 <__exponent+0x82>
 8006184:	270a      	movs	r7, #10
 8006186:	ab04      	add	r3, sp, #16
 8006188:	1dde      	adds	r6, r3, #7
 800618a:	0020      	movs	r0, r4
 800618c:	0039      	movs	r1, r7
 800618e:	9601      	str	r6, [sp, #4]
 8006190:	f7fa f944 	bl	800041c <__aeabi_idivmod>
 8006194:	3e01      	subs	r6, #1
 8006196:	3130      	adds	r1, #48	; 0x30
 8006198:	0020      	movs	r0, r4
 800619a:	7031      	strb	r1, [r6, #0]
 800619c:	0039      	movs	r1, r7
 800619e:	9402      	str	r4, [sp, #8]
 80061a0:	f7fa f856 	bl	8000250 <__divsi3>
 80061a4:	9b02      	ldr	r3, [sp, #8]
 80061a6:	0004      	movs	r4, r0
 80061a8:	2b63      	cmp	r3, #99	; 0x63
 80061aa:	dcee      	bgt.n	800618a <__exponent+0x24>
 80061ac:	9b01      	ldr	r3, [sp, #4]
 80061ae:	3430      	adds	r4, #48	; 0x30
 80061b0:	1e9a      	subs	r2, r3, #2
 80061b2:	0013      	movs	r3, r2
 80061b4:	9903      	ldr	r1, [sp, #12]
 80061b6:	7014      	strb	r4, [r2, #0]
 80061b8:	a804      	add	r0, sp, #16
 80061ba:	3007      	adds	r0, #7
 80061bc:	4298      	cmp	r0, r3
 80061be:	d80e      	bhi.n	80061de <__exponent+0x78>
 80061c0:	ab04      	add	r3, sp, #16
 80061c2:	3307      	adds	r3, #7
 80061c4:	2000      	movs	r0, #0
 80061c6:	429a      	cmp	r2, r3
 80061c8:	d804      	bhi.n	80061d4 <__exponent+0x6e>
 80061ca:	ab04      	add	r3, sp, #16
 80061cc:	3009      	adds	r0, #9
 80061ce:	18c0      	adds	r0, r0, r3
 80061d0:	9b01      	ldr	r3, [sp, #4]
 80061d2:	1ac0      	subs	r0, r0, r3
 80061d4:	9b03      	ldr	r3, [sp, #12]
 80061d6:	1818      	adds	r0, r3, r0
 80061d8:	1b40      	subs	r0, r0, r5
 80061da:	b007      	add	sp, #28
 80061dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80061de:	7818      	ldrb	r0, [r3, #0]
 80061e0:	3301      	adds	r3, #1
 80061e2:	7008      	strb	r0, [r1, #0]
 80061e4:	3101      	adds	r1, #1
 80061e6:	e7e7      	b.n	80061b8 <__exponent+0x52>
 80061e8:	2330      	movs	r3, #48	; 0x30
 80061ea:	18e4      	adds	r4, r4, r3
 80061ec:	70ab      	strb	r3, [r5, #2]
 80061ee:	1d28      	adds	r0, r5, #4
 80061f0:	70ec      	strb	r4, [r5, #3]
 80061f2:	e7f1      	b.n	80061d8 <__exponent+0x72>

080061f4 <_printf_float>:
 80061f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80061f6:	b095      	sub	sp, #84	; 0x54
 80061f8:	000c      	movs	r4, r1
 80061fa:	9209      	str	r2, [sp, #36]	; 0x24
 80061fc:	001e      	movs	r6, r3
 80061fe:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8006200:	0007      	movs	r7, r0
 8006202:	f002 fec7 	bl	8008f94 <_localeconv_r>
 8006206:	6803      	ldr	r3, [r0, #0]
 8006208:	0018      	movs	r0, r3
 800620a:	930c      	str	r3, [sp, #48]	; 0x30
 800620c:	f7f9 ff7a 	bl	8000104 <strlen>
 8006210:	2300      	movs	r3, #0
 8006212:	9312      	str	r3, [sp, #72]	; 0x48
 8006214:	7e23      	ldrb	r3, [r4, #24]
 8006216:	2207      	movs	r2, #7
 8006218:	930a      	str	r3, [sp, #40]	; 0x28
 800621a:	6823      	ldr	r3, [r4, #0]
 800621c:	900e      	str	r0, [sp, #56]	; 0x38
 800621e:	930d      	str	r3, [sp, #52]	; 0x34
 8006220:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006222:	682b      	ldr	r3, [r5, #0]
 8006224:	05c9      	lsls	r1, r1, #23
 8006226:	d547      	bpl.n	80062b8 <_printf_float+0xc4>
 8006228:	189b      	adds	r3, r3, r2
 800622a:	4393      	bics	r3, r2
 800622c:	001a      	movs	r2, r3
 800622e:	3208      	adds	r2, #8
 8006230:	602a      	str	r2, [r5, #0]
 8006232:	681a      	ldr	r2, [r3, #0]
 8006234:	685b      	ldr	r3, [r3, #4]
 8006236:	64a2      	str	r2, [r4, #72]	; 0x48
 8006238:	64e3      	str	r3, [r4, #76]	; 0x4c
 800623a:	2201      	movs	r2, #1
 800623c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800623e:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8006240:	930b      	str	r3, [sp, #44]	; 0x2c
 8006242:	006b      	lsls	r3, r5, #1
 8006244:	085b      	lsrs	r3, r3, #1
 8006246:	930f      	str	r3, [sp, #60]	; 0x3c
 8006248:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800624a:	4ba7      	ldr	r3, [pc, #668]	; (80064e8 <_printf_float+0x2f4>)
 800624c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800624e:	4252      	negs	r2, r2
 8006250:	f7fc fbee 	bl	8002a30 <__aeabi_dcmpun>
 8006254:	2800      	cmp	r0, #0
 8006256:	d131      	bne.n	80062bc <_printf_float+0xc8>
 8006258:	2201      	movs	r2, #1
 800625a:	4ba3      	ldr	r3, [pc, #652]	; (80064e8 <_printf_float+0x2f4>)
 800625c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800625e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006260:	4252      	negs	r2, r2
 8006262:	f7fa f901 	bl	8000468 <__aeabi_dcmple>
 8006266:	2800      	cmp	r0, #0
 8006268:	d128      	bne.n	80062bc <_printf_float+0xc8>
 800626a:	2200      	movs	r2, #0
 800626c:	2300      	movs	r3, #0
 800626e:	0029      	movs	r1, r5
 8006270:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8006272:	f7fa f8ef 	bl	8000454 <__aeabi_dcmplt>
 8006276:	2800      	cmp	r0, #0
 8006278:	d003      	beq.n	8006282 <_printf_float+0x8e>
 800627a:	0023      	movs	r3, r4
 800627c:	222d      	movs	r2, #45	; 0x2d
 800627e:	3343      	adds	r3, #67	; 0x43
 8006280:	701a      	strb	r2, [r3, #0]
 8006282:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006284:	4d99      	ldr	r5, [pc, #612]	; (80064ec <_printf_float+0x2f8>)
 8006286:	2b47      	cmp	r3, #71	; 0x47
 8006288:	d900      	bls.n	800628c <_printf_float+0x98>
 800628a:	4d99      	ldr	r5, [pc, #612]	; (80064f0 <_printf_float+0x2fc>)
 800628c:	2303      	movs	r3, #3
 800628e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006290:	6123      	str	r3, [r4, #16]
 8006292:	3301      	adds	r3, #1
 8006294:	439a      	bics	r2, r3
 8006296:	2300      	movs	r3, #0
 8006298:	6022      	str	r2, [r4, #0]
 800629a:	930b      	str	r3, [sp, #44]	; 0x2c
 800629c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800629e:	0021      	movs	r1, r4
 80062a0:	0038      	movs	r0, r7
 80062a2:	9600      	str	r6, [sp, #0]
 80062a4:	aa13      	add	r2, sp, #76	; 0x4c
 80062a6:	f000 f9e7 	bl	8006678 <_printf_common>
 80062aa:	1c43      	adds	r3, r0, #1
 80062ac:	d000      	beq.n	80062b0 <_printf_float+0xbc>
 80062ae:	e0a2      	b.n	80063f6 <_printf_float+0x202>
 80062b0:	2001      	movs	r0, #1
 80062b2:	4240      	negs	r0, r0
 80062b4:	b015      	add	sp, #84	; 0x54
 80062b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80062b8:	3307      	adds	r3, #7
 80062ba:	e7b6      	b.n	800622a <_printf_float+0x36>
 80062bc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80062be:	002b      	movs	r3, r5
 80062c0:	0010      	movs	r0, r2
 80062c2:	0029      	movs	r1, r5
 80062c4:	f7fc fbb4 	bl	8002a30 <__aeabi_dcmpun>
 80062c8:	2800      	cmp	r0, #0
 80062ca:	d00b      	beq.n	80062e4 <_printf_float+0xf0>
 80062cc:	2d00      	cmp	r5, #0
 80062ce:	da03      	bge.n	80062d8 <_printf_float+0xe4>
 80062d0:	0023      	movs	r3, r4
 80062d2:	222d      	movs	r2, #45	; 0x2d
 80062d4:	3343      	adds	r3, #67	; 0x43
 80062d6:	701a      	strb	r2, [r3, #0]
 80062d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80062da:	4d86      	ldr	r5, [pc, #536]	; (80064f4 <_printf_float+0x300>)
 80062dc:	2b47      	cmp	r3, #71	; 0x47
 80062de:	d9d5      	bls.n	800628c <_printf_float+0x98>
 80062e0:	4d85      	ldr	r5, [pc, #532]	; (80064f8 <_printf_float+0x304>)
 80062e2:	e7d3      	b.n	800628c <_printf_float+0x98>
 80062e4:	2220      	movs	r2, #32
 80062e6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80062e8:	6863      	ldr	r3, [r4, #4]
 80062ea:	4391      	bics	r1, r2
 80062ec:	910f      	str	r1, [sp, #60]	; 0x3c
 80062ee:	1c5a      	adds	r2, r3, #1
 80062f0:	d149      	bne.n	8006386 <_printf_float+0x192>
 80062f2:	3307      	adds	r3, #7
 80062f4:	6063      	str	r3, [r4, #4]
 80062f6:	2380      	movs	r3, #128	; 0x80
 80062f8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80062fa:	00db      	lsls	r3, r3, #3
 80062fc:	4313      	orrs	r3, r2
 80062fe:	2200      	movs	r2, #0
 8006300:	9206      	str	r2, [sp, #24]
 8006302:	aa12      	add	r2, sp, #72	; 0x48
 8006304:	9205      	str	r2, [sp, #20]
 8006306:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006308:	a908      	add	r1, sp, #32
 800630a:	9204      	str	r2, [sp, #16]
 800630c:	aa11      	add	r2, sp, #68	; 0x44
 800630e:	9203      	str	r2, [sp, #12]
 8006310:	2223      	movs	r2, #35	; 0x23
 8006312:	6023      	str	r3, [r4, #0]
 8006314:	9301      	str	r3, [sp, #4]
 8006316:	6863      	ldr	r3, [r4, #4]
 8006318:	1852      	adds	r2, r2, r1
 800631a:	9202      	str	r2, [sp, #8]
 800631c:	9300      	str	r3, [sp, #0]
 800631e:	0038      	movs	r0, r7
 8006320:	002b      	movs	r3, r5
 8006322:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006324:	f7ff febc 	bl	80060a0 <__cvt>
 8006328:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800632a:	0005      	movs	r5, r0
 800632c:	9911      	ldr	r1, [sp, #68]	; 0x44
 800632e:	2b47      	cmp	r3, #71	; 0x47
 8006330:	d108      	bne.n	8006344 <_printf_float+0x150>
 8006332:	1ccb      	adds	r3, r1, #3
 8006334:	db02      	blt.n	800633c <_printf_float+0x148>
 8006336:	6863      	ldr	r3, [r4, #4]
 8006338:	4299      	cmp	r1, r3
 800633a:	dd48      	ble.n	80063ce <_printf_float+0x1da>
 800633c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800633e:	3b02      	subs	r3, #2
 8006340:	b2db      	uxtb	r3, r3
 8006342:	930a      	str	r3, [sp, #40]	; 0x28
 8006344:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006346:	2b65      	cmp	r3, #101	; 0x65
 8006348:	d824      	bhi.n	8006394 <_printf_float+0x1a0>
 800634a:	0020      	movs	r0, r4
 800634c:	001a      	movs	r2, r3
 800634e:	3901      	subs	r1, #1
 8006350:	3050      	adds	r0, #80	; 0x50
 8006352:	9111      	str	r1, [sp, #68]	; 0x44
 8006354:	f7ff ff07 	bl	8006166 <__exponent>
 8006358:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800635a:	900b      	str	r0, [sp, #44]	; 0x2c
 800635c:	1813      	adds	r3, r2, r0
 800635e:	6123      	str	r3, [r4, #16]
 8006360:	2a01      	cmp	r2, #1
 8006362:	dc02      	bgt.n	800636a <_printf_float+0x176>
 8006364:	6822      	ldr	r2, [r4, #0]
 8006366:	07d2      	lsls	r2, r2, #31
 8006368:	d501      	bpl.n	800636e <_printf_float+0x17a>
 800636a:	3301      	adds	r3, #1
 800636c:	6123      	str	r3, [r4, #16]
 800636e:	2323      	movs	r3, #35	; 0x23
 8006370:	aa08      	add	r2, sp, #32
 8006372:	189b      	adds	r3, r3, r2
 8006374:	781b      	ldrb	r3, [r3, #0]
 8006376:	2b00      	cmp	r3, #0
 8006378:	d100      	bne.n	800637c <_printf_float+0x188>
 800637a:	e78f      	b.n	800629c <_printf_float+0xa8>
 800637c:	0023      	movs	r3, r4
 800637e:	222d      	movs	r2, #45	; 0x2d
 8006380:	3343      	adds	r3, #67	; 0x43
 8006382:	701a      	strb	r2, [r3, #0]
 8006384:	e78a      	b.n	800629c <_printf_float+0xa8>
 8006386:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006388:	2a47      	cmp	r2, #71	; 0x47
 800638a:	d1b4      	bne.n	80062f6 <_printf_float+0x102>
 800638c:	2b00      	cmp	r3, #0
 800638e:	d1b2      	bne.n	80062f6 <_printf_float+0x102>
 8006390:	3301      	adds	r3, #1
 8006392:	e7af      	b.n	80062f4 <_printf_float+0x100>
 8006394:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006396:	2b66      	cmp	r3, #102	; 0x66
 8006398:	d11b      	bne.n	80063d2 <_printf_float+0x1de>
 800639a:	6863      	ldr	r3, [r4, #4]
 800639c:	2900      	cmp	r1, #0
 800639e:	dd0d      	ble.n	80063bc <_printf_float+0x1c8>
 80063a0:	6121      	str	r1, [r4, #16]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d102      	bne.n	80063ac <_printf_float+0x1b8>
 80063a6:	6822      	ldr	r2, [r4, #0]
 80063a8:	07d2      	lsls	r2, r2, #31
 80063aa:	d502      	bpl.n	80063b2 <_printf_float+0x1be>
 80063ac:	3301      	adds	r3, #1
 80063ae:	1859      	adds	r1, r3, r1
 80063b0:	6121      	str	r1, [r4, #16]
 80063b2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80063b4:	65a3      	str	r3, [r4, #88]	; 0x58
 80063b6:	2300      	movs	r3, #0
 80063b8:	930b      	str	r3, [sp, #44]	; 0x2c
 80063ba:	e7d8      	b.n	800636e <_printf_float+0x17a>
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d103      	bne.n	80063c8 <_printf_float+0x1d4>
 80063c0:	2201      	movs	r2, #1
 80063c2:	6821      	ldr	r1, [r4, #0]
 80063c4:	4211      	tst	r1, r2
 80063c6:	d000      	beq.n	80063ca <_printf_float+0x1d6>
 80063c8:	1c9a      	adds	r2, r3, #2
 80063ca:	6122      	str	r2, [r4, #16]
 80063cc:	e7f1      	b.n	80063b2 <_printf_float+0x1be>
 80063ce:	2367      	movs	r3, #103	; 0x67
 80063d0:	930a      	str	r3, [sp, #40]	; 0x28
 80063d2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80063d4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80063d6:	4293      	cmp	r3, r2
 80063d8:	db06      	blt.n	80063e8 <_printf_float+0x1f4>
 80063da:	6822      	ldr	r2, [r4, #0]
 80063dc:	6123      	str	r3, [r4, #16]
 80063de:	07d2      	lsls	r2, r2, #31
 80063e0:	d5e7      	bpl.n	80063b2 <_printf_float+0x1be>
 80063e2:	3301      	adds	r3, #1
 80063e4:	6123      	str	r3, [r4, #16]
 80063e6:	e7e4      	b.n	80063b2 <_printf_float+0x1be>
 80063e8:	2101      	movs	r1, #1
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	dc01      	bgt.n	80063f2 <_printf_float+0x1fe>
 80063ee:	1849      	adds	r1, r1, r1
 80063f0:	1ac9      	subs	r1, r1, r3
 80063f2:	1852      	adds	r2, r2, r1
 80063f4:	e7e9      	b.n	80063ca <_printf_float+0x1d6>
 80063f6:	6822      	ldr	r2, [r4, #0]
 80063f8:	0553      	lsls	r3, r2, #21
 80063fa:	d407      	bmi.n	800640c <_printf_float+0x218>
 80063fc:	6923      	ldr	r3, [r4, #16]
 80063fe:	002a      	movs	r2, r5
 8006400:	0038      	movs	r0, r7
 8006402:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006404:	47b0      	blx	r6
 8006406:	1c43      	adds	r3, r0, #1
 8006408:	d128      	bne.n	800645c <_printf_float+0x268>
 800640a:	e751      	b.n	80062b0 <_printf_float+0xbc>
 800640c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800640e:	2b65      	cmp	r3, #101	; 0x65
 8006410:	d800      	bhi.n	8006414 <_printf_float+0x220>
 8006412:	e0e1      	b.n	80065d8 <_printf_float+0x3e4>
 8006414:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8006416:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8006418:	2200      	movs	r2, #0
 800641a:	2300      	movs	r3, #0
 800641c:	f7fa f814 	bl	8000448 <__aeabi_dcmpeq>
 8006420:	2800      	cmp	r0, #0
 8006422:	d031      	beq.n	8006488 <_printf_float+0x294>
 8006424:	2301      	movs	r3, #1
 8006426:	0038      	movs	r0, r7
 8006428:	4a34      	ldr	r2, [pc, #208]	; (80064fc <_printf_float+0x308>)
 800642a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800642c:	47b0      	blx	r6
 800642e:	1c43      	adds	r3, r0, #1
 8006430:	d100      	bne.n	8006434 <_printf_float+0x240>
 8006432:	e73d      	b.n	80062b0 <_printf_float+0xbc>
 8006434:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006436:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006438:	4293      	cmp	r3, r2
 800643a:	db02      	blt.n	8006442 <_printf_float+0x24e>
 800643c:	6823      	ldr	r3, [r4, #0]
 800643e:	07db      	lsls	r3, r3, #31
 8006440:	d50c      	bpl.n	800645c <_printf_float+0x268>
 8006442:	0038      	movs	r0, r7
 8006444:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006446:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006448:	9909      	ldr	r1, [sp, #36]	; 0x24
 800644a:	47b0      	blx	r6
 800644c:	2500      	movs	r5, #0
 800644e:	1c43      	adds	r3, r0, #1
 8006450:	d100      	bne.n	8006454 <_printf_float+0x260>
 8006452:	e72d      	b.n	80062b0 <_printf_float+0xbc>
 8006454:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006456:	3b01      	subs	r3, #1
 8006458:	42ab      	cmp	r3, r5
 800645a:	dc0a      	bgt.n	8006472 <_printf_float+0x27e>
 800645c:	6823      	ldr	r3, [r4, #0]
 800645e:	079b      	lsls	r3, r3, #30
 8006460:	d500      	bpl.n	8006464 <_printf_float+0x270>
 8006462:	e106      	b.n	8006672 <_printf_float+0x47e>
 8006464:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006466:	68e0      	ldr	r0, [r4, #12]
 8006468:	4298      	cmp	r0, r3
 800646a:	db00      	blt.n	800646e <_printf_float+0x27a>
 800646c:	e722      	b.n	80062b4 <_printf_float+0xc0>
 800646e:	0018      	movs	r0, r3
 8006470:	e720      	b.n	80062b4 <_printf_float+0xc0>
 8006472:	0022      	movs	r2, r4
 8006474:	2301      	movs	r3, #1
 8006476:	0038      	movs	r0, r7
 8006478:	9909      	ldr	r1, [sp, #36]	; 0x24
 800647a:	321a      	adds	r2, #26
 800647c:	47b0      	blx	r6
 800647e:	1c43      	adds	r3, r0, #1
 8006480:	d100      	bne.n	8006484 <_printf_float+0x290>
 8006482:	e715      	b.n	80062b0 <_printf_float+0xbc>
 8006484:	3501      	adds	r5, #1
 8006486:	e7e5      	b.n	8006454 <_printf_float+0x260>
 8006488:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800648a:	2b00      	cmp	r3, #0
 800648c:	dc38      	bgt.n	8006500 <_printf_float+0x30c>
 800648e:	2301      	movs	r3, #1
 8006490:	0038      	movs	r0, r7
 8006492:	4a1a      	ldr	r2, [pc, #104]	; (80064fc <_printf_float+0x308>)
 8006494:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006496:	47b0      	blx	r6
 8006498:	1c43      	adds	r3, r0, #1
 800649a:	d100      	bne.n	800649e <_printf_float+0x2aa>
 800649c:	e708      	b.n	80062b0 <_printf_float+0xbc>
 800649e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80064a0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80064a2:	4313      	orrs	r3, r2
 80064a4:	d102      	bne.n	80064ac <_printf_float+0x2b8>
 80064a6:	6823      	ldr	r3, [r4, #0]
 80064a8:	07db      	lsls	r3, r3, #31
 80064aa:	d5d7      	bpl.n	800645c <_printf_float+0x268>
 80064ac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80064ae:	0038      	movs	r0, r7
 80064b0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80064b2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80064b4:	47b0      	blx	r6
 80064b6:	1c43      	adds	r3, r0, #1
 80064b8:	d100      	bne.n	80064bc <_printf_float+0x2c8>
 80064ba:	e6f9      	b.n	80062b0 <_printf_float+0xbc>
 80064bc:	2300      	movs	r3, #0
 80064be:	930a      	str	r3, [sp, #40]	; 0x28
 80064c0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80064c2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80064c4:	425b      	negs	r3, r3
 80064c6:	4293      	cmp	r3, r2
 80064c8:	dc01      	bgt.n	80064ce <_printf_float+0x2da>
 80064ca:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80064cc:	e797      	b.n	80063fe <_printf_float+0x20a>
 80064ce:	0022      	movs	r2, r4
 80064d0:	2301      	movs	r3, #1
 80064d2:	0038      	movs	r0, r7
 80064d4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80064d6:	321a      	adds	r2, #26
 80064d8:	47b0      	blx	r6
 80064da:	1c43      	adds	r3, r0, #1
 80064dc:	d100      	bne.n	80064e0 <_printf_float+0x2ec>
 80064de:	e6e7      	b.n	80062b0 <_printf_float+0xbc>
 80064e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80064e2:	3301      	adds	r3, #1
 80064e4:	e7eb      	b.n	80064be <_printf_float+0x2ca>
 80064e6:	46c0      	nop			; (mov r8, r8)
 80064e8:	7fefffff 	.word	0x7fefffff
 80064ec:	0800ad0c 	.word	0x0800ad0c
 80064f0:	0800ad10 	.word	0x0800ad10
 80064f4:	0800ad14 	.word	0x0800ad14
 80064f8:	0800ad18 	.word	0x0800ad18
 80064fc:	0800ad1c 	.word	0x0800ad1c
 8006500:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006502:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006504:	920a      	str	r2, [sp, #40]	; 0x28
 8006506:	429a      	cmp	r2, r3
 8006508:	dd00      	ble.n	800650c <_printf_float+0x318>
 800650a:	930a      	str	r3, [sp, #40]	; 0x28
 800650c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800650e:	2b00      	cmp	r3, #0
 8006510:	dc3c      	bgt.n	800658c <_printf_float+0x398>
 8006512:	2300      	movs	r3, #0
 8006514:	930d      	str	r3, [sp, #52]	; 0x34
 8006516:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006518:	43db      	mvns	r3, r3
 800651a:	17db      	asrs	r3, r3, #31
 800651c:	930f      	str	r3, [sp, #60]	; 0x3c
 800651e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006520:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006522:	930b      	str	r3, [sp, #44]	; 0x2c
 8006524:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006526:	4013      	ands	r3, r2
 8006528:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800652a:	1ad3      	subs	r3, r2, r3
 800652c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800652e:	4293      	cmp	r3, r2
 8006530:	dc34      	bgt.n	800659c <_printf_float+0x3a8>
 8006532:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006534:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006536:	4293      	cmp	r3, r2
 8006538:	db3d      	blt.n	80065b6 <_printf_float+0x3c2>
 800653a:	6823      	ldr	r3, [r4, #0]
 800653c:	07db      	lsls	r3, r3, #31
 800653e:	d43a      	bmi.n	80065b6 <_printf_float+0x3c2>
 8006540:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006542:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006544:	9911      	ldr	r1, [sp, #68]	; 0x44
 8006546:	1ad3      	subs	r3, r2, r3
 8006548:	1a52      	subs	r2, r2, r1
 800654a:	920a      	str	r2, [sp, #40]	; 0x28
 800654c:	429a      	cmp	r2, r3
 800654e:	dd00      	ble.n	8006552 <_printf_float+0x35e>
 8006550:	930a      	str	r3, [sp, #40]	; 0x28
 8006552:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006554:	2b00      	cmp	r3, #0
 8006556:	dc36      	bgt.n	80065c6 <_printf_float+0x3d2>
 8006558:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800655a:	2500      	movs	r5, #0
 800655c:	43db      	mvns	r3, r3
 800655e:	17db      	asrs	r3, r3, #31
 8006560:	930b      	str	r3, [sp, #44]	; 0x2c
 8006562:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8006564:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006566:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006568:	1a9b      	subs	r3, r3, r2
 800656a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800656c:	400a      	ands	r2, r1
 800656e:	1a9b      	subs	r3, r3, r2
 8006570:	42ab      	cmp	r3, r5
 8006572:	dc00      	bgt.n	8006576 <_printf_float+0x382>
 8006574:	e772      	b.n	800645c <_printf_float+0x268>
 8006576:	0022      	movs	r2, r4
 8006578:	2301      	movs	r3, #1
 800657a:	0038      	movs	r0, r7
 800657c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800657e:	321a      	adds	r2, #26
 8006580:	47b0      	blx	r6
 8006582:	1c43      	adds	r3, r0, #1
 8006584:	d100      	bne.n	8006588 <_printf_float+0x394>
 8006586:	e693      	b.n	80062b0 <_printf_float+0xbc>
 8006588:	3501      	adds	r5, #1
 800658a:	e7ea      	b.n	8006562 <_printf_float+0x36e>
 800658c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800658e:	002a      	movs	r2, r5
 8006590:	0038      	movs	r0, r7
 8006592:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006594:	47b0      	blx	r6
 8006596:	1c43      	adds	r3, r0, #1
 8006598:	d1bb      	bne.n	8006512 <_printf_float+0x31e>
 800659a:	e689      	b.n	80062b0 <_printf_float+0xbc>
 800659c:	0022      	movs	r2, r4
 800659e:	2301      	movs	r3, #1
 80065a0:	0038      	movs	r0, r7
 80065a2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80065a4:	321a      	adds	r2, #26
 80065a6:	47b0      	blx	r6
 80065a8:	1c43      	adds	r3, r0, #1
 80065aa:	d100      	bne.n	80065ae <_printf_float+0x3ba>
 80065ac:	e680      	b.n	80062b0 <_printf_float+0xbc>
 80065ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80065b0:	3301      	adds	r3, #1
 80065b2:	930d      	str	r3, [sp, #52]	; 0x34
 80065b4:	e7b3      	b.n	800651e <_printf_float+0x32a>
 80065b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80065b8:	0038      	movs	r0, r7
 80065ba:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80065bc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80065be:	47b0      	blx	r6
 80065c0:	1c43      	adds	r3, r0, #1
 80065c2:	d1bd      	bne.n	8006540 <_printf_float+0x34c>
 80065c4:	e674      	b.n	80062b0 <_printf_float+0xbc>
 80065c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80065c8:	0038      	movs	r0, r7
 80065ca:	18ea      	adds	r2, r5, r3
 80065cc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80065ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80065d0:	47b0      	blx	r6
 80065d2:	1c43      	adds	r3, r0, #1
 80065d4:	d1c0      	bne.n	8006558 <_printf_float+0x364>
 80065d6:	e66b      	b.n	80062b0 <_printf_float+0xbc>
 80065d8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80065da:	2b01      	cmp	r3, #1
 80065dc:	dc02      	bgt.n	80065e4 <_printf_float+0x3f0>
 80065de:	2301      	movs	r3, #1
 80065e0:	421a      	tst	r2, r3
 80065e2:	d034      	beq.n	800664e <_printf_float+0x45a>
 80065e4:	2301      	movs	r3, #1
 80065e6:	002a      	movs	r2, r5
 80065e8:	0038      	movs	r0, r7
 80065ea:	9909      	ldr	r1, [sp, #36]	; 0x24
 80065ec:	47b0      	blx	r6
 80065ee:	1c43      	adds	r3, r0, #1
 80065f0:	d100      	bne.n	80065f4 <_printf_float+0x400>
 80065f2:	e65d      	b.n	80062b0 <_printf_float+0xbc>
 80065f4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80065f6:	0038      	movs	r0, r7
 80065f8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80065fa:	9909      	ldr	r1, [sp, #36]	; 0x24
 80065fc:	47b0      	blx	r6
 80065fe:	1c43      	adds	r3, r0, #1
 8006600:	d100      	bne.n	8006604 <_printf_float+0x410>
 8006602:	e655      	b.n	80062b0 <_printf_float+0xbc>
 8006604:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8006606:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8006608:	2200      	movs	r2, #0
 800660a:	2300      	movs	r3, #0
 800660c:	f7f9 ff1c 	bl	8000448 <__aeabi_dcmpeq>
 8006610:	2800      	cmp	r0, #0
 8006612:	d11a      	bne.n	800664a <_printf_float+0x456>
 8006614:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006616:	1c6a      	adds	r2, r5, #1
 8006618:	3b01      	subs	r3, #1
 800661a:	0038      	movs	r0, r7
 800661c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800661e:	47b0      	blx	r6
 8006620:	1c43      	adds	r3, r0, #1
 8006622:	d10e      	bne.n	8006642 <_printf_float+0x44e>
 8006624:	e644      	b.n	80062b0 <_printf_float+0xbc>
 8006626:	0022      	movs	r2, r4
 8006628:	2301      	movs	r3, #1
 800662a:	0038      	movs	r0, r7
 800662c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800662e:	321a      	adds	r2, #26
 8006630:	47b0      	blx	r6
 8006632:	1c43      	adds	r3, r0, #1
 8006634:	d100      	bne.n	8006638 <_printf_float+0x444>
 8006636:	e63b      	b.n	80062b0 <_printf_float+0xbc>
 8006638:	3501      	adds	r5, #1
 800663a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800663c:	3b01      	subs	r3, #1
 800663e:	42ab      	cmp	r3, r5
 8006640:	dcf1      	bgt.n	8006626 <_printf_float+0x432>
 8006642:	0022      	movs	r2, r4
 8006644:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006646:	3250      	adds	r2, #80	; 0x50
 8006648:	e6da      	b.n	8006400 <_printf_float+0x20c>
 800664a:	2500      	movs	r5, #0
 800664c:	e7f5      	b.n	800663a <_printf_float+0x446>
 800664e:	002a      	movs	r2, r5
 8006650:	e7e3      	b.n	800661a <_printf_float+0x426>
 8006652:	0022      	movs	r2, r4
 8006654:	2301      	movs	r3, #1
 8006656:	0038      	movs	r0, r7
 8006658:	9909      	ldr	r1, [sp, #36]	; 0x24
 800665a:	3219      	adds	r2, #25
 800665c:	47b0      	blx	r6
 800665e:	1c43      	adds	r3, r0, #1
 8006660:	d100      	bne.n	8006664 <_printf_float+0x470>
 8006662:	e625      	b.n	80062b0 <_printf_float+0xbc>
 8006664:	3501      	adds	r5, #1
 8006666:	68e3      	ldr	r3, [r4, #12]
 8006668:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800666a:	1a9b      	subs	r3, r3, r2
 800666c:	42ab      	cmp	r3, r5
 800666e:	dcf0      	bgt.n	8006652 <_printf_float+0x45e>
 8006670:	e6f8      	b.n	8006464 <_printf_float+0x270>
 8006672:	2500      	movs	r5, #0
 8006674:	e7f7      	b.n	8006666 <_printf_float+0x472>
 8006676:	46c0      	nop			; (mov r8, r8)

08006678 <_printf_common>:
 8006678:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800667a:	0015      	movs	r5, r2
 800667c:	9301      	str	r3, [sp, #4]
 800667e:	688a      	ldr	r2, [r1, #8]
 8006680:	690b      	ldr	r3, [r1, #16]
 8006682:	000c      	movs	r4, r1
 8006684:	9000      	str	r0, [sp, #0]
 8006686:	4293      	cmp	r3, r2
 8006688:	da00      	bge.n	800668c <_printf_common+0x14>
 800668a:	0013      	movs	r3, r2
 800668c:	0022      	movs	r2, r4
 800668e:	602b      	str	r3, [r5, #0]
 8006690:	3243      	adds	r2, #67	; 0x43
 8006692:	7812      	ldrb	r2, [r2, #0]
 8006694:	2a00      	cmp	r2, #0
 8006696:	d001      	beq.n	800669c <_printf_common+0x24>
 8006698:	3301      	adds	r3, #1
 800669a:	602b      	str	r3, [r5, #0]
 800669c:	6823      	ldr	r3, [r4, #0]
 800669e:	069b      	lsls	r3, r3, #26
 80066a0:	d502      	bpl.n	80066a8 <_printf_common+0x30>
 80066a2:	682b      	ldr	r3, [r5, #0]
 80066a4:	3302      	adds	r3, #2
 80066a6:	602b      	str	r3, [r5, #0]
 80066a8:	6822      	ldr	r2, [r4, #0]
 80066aa:	2306      	movs	r3, #6
 80066ac:	0017      	movs	r7, r2
 80066ae:	401f      	ands	r7, r3
 80066b0:	421a      	tst	r2, r3
 80066b2:	d027      	beq.n	8006704 <_printf_common+0x8c>
 80066b4:	0023      	movs	r3, r4
 80066b6:	3343      	adds	r3, #67	; 0x43
 80066b8:	781b      	ldrb	r3, [r3, #0]
 80066ba:	1e5a      	subs	r2, r3, #1
 80066bc:	4193      	sbcs	r3, r2
 80066be:	6822      	ldr	r2, [r4, #0]
 80066c0:	0692      	lsls	r2, r2, #26
 80066c2:	d430      	bmi.n	8006726 <_printf_common+0xae>
 80066c4:	0022      	movs	r2, r4
 80066c6:	9901      	ldr	r1, [sp, #4]
 80066c8:	9800      	ldr	r0, [sp, #0]
 80066ca:	9e08      	ldr	r6, [sp, #32]
 80066cc:	3243      	adds	r2, #67	; 0x43
 80066ce:	47b0      	blx	r6
 80066d0:	1c43      	adds	r3, r0, #1
 80066d2:	d025      	beq.n	8006720 <_printf_common+0xa8>
 80066d4:	2306      	movs	r3, #6
 80066d6:	6820      	ldr	r0, [r4, #0]
 80066d8:	682a      	ldr	r2, [r5, #0]
 80066da:	68e1      	ldr	r1, [r4, #12]
 80066dc:	2500      	movs	r5, #0
 80066de:	4003      	ands	r3, r0
 80066e0:	2b04      	cmp	r3, #4
 80066e2:	d103      	bne.n	80066ec <_printf_common+0x74>
 80066e4:	1a8d      	subs	r5, r1, r2
 80066e6:	43eb      	mvns	r3, r5
 80066e8:	17db      	asrs	r3, r3, #31
 80066ea:	401d      	ands	r5, r3
 80066ec:	68a3      	ldr	r3, [r4, #8]
 80066ee:	6922      	ldr	r2, [r4, #16]
 80066f0:	4293      	cmp	r3, r2
 80066f2:	dd01      	ble.n	80066f8 <_printf_common+0x80>
 80066f4:	1a9b      	subs	r3, r3, r2
 80066f6:	18ed      	adds	r5, r5, r3
 80066f8:	2700      	movs	r7, #0
 80066fa:	42bd      	cmp	r5, r7
 80066fc:	d120      	bne.n	8006740 <_printf_common+0xc8>
 80066fe:	2000      	movs	r0, #0
 8006700:	e010      	b.n	8006724 <_printf_common+0xac>
 8006702:	3701      	adds	r7, #1
 8006704:	68e3      	ldr	r3, [r4, #12]
 8006706:	682a      	ldr	r2, [r5, #0]
 8006708:	1a9b      	subs	r3, r3, r2
 800670a:	42bb      	cmp	r3, r7
 800670c:	ddd2      	ble.n	80066b4 <_printf_common+0x3c>
 800670e:	0022      	movs	r2, r4
 8006710:	2301      	movs	r3, #1
 8006712:	9901      	ldr	r1, [sp, #4]
 8006714:	9800      	ldr	r0, [sp, #0]
 8006716:	9e08      	ldr	r6, [sp, #32]
 8006718:	3219      	adds	r2, #25
 800671a:	47b0      	blx	r6
 800671c:	1c43      	adds	r3, r0, #1
 800671e:	d1f0      	bne.n	8006702 <_printf_common+0x8a>
 8006720:	2001      	movs	r0, #1
 8006722:	4240      	negs	r0, r0
 8006724:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006726:	2030      	movs	r0, #48	; 0x30
 8006728:	18e1      	adds	r1, r4, r3
 800672a:	3143      	adds	r1, #67	; 0x43
 800672c:	7008      	strb	r0, [r1, #0]
 800672e:	0021      	movs	r1, r4
 8006730:	1c5a      	adds	r2, r3, #1
 8006732:	3145      	adds	r1, #69	; 0x45
 8006734:	7809      	ldrb	r1, [r1, #0]
 8006736:	18a2      	adds	r2, r4, r2
 8006738:	3243      	adds	r2, #67	; 0x43
 800673a:	3302      	adds	r3, #2
 800673c:	7011      	strb	r1, [r2, #0]
 800673e:	e7c1      	b.n	80066c4 <_printf_common+0x4c>
 8006740:	0022      	movs	r2, r4
 8006742:	2301      	movs	r3, #1
 8006744:	9901      	ldr	r1, [sp, #4]
 8006746:	9800      	ldr	r0, [sp, #0]
 8006748:	9e08      	ldr	r6, [sp, #32]
 800674a:	321a      	adds	r2, #26
 800674c:	47b0      	blx	r6
 800674e:	1c43      	adds	r3, r0, #1
 8006750:	d0e6      	beq.n	8006720 <_printf_common+0xa8>
 8006752:	3701      	adds	r7, #1
 8006754:	e7d1      	b.n	80066fa <_printf_common+0x82>
	...

08006758 <_printf_i>:
 8006758:	b5f0      	push	{r4, r5, r6, r7, lr}
 800675a:	b08b      	sub	sp, #44	; 0x2c
 800675c:	9206      	str	r2, [sp, #24]
 800675e:	000a      	movs	r2, r1
 8006760:	3243      	adds	r2, #67	; 0x43
 8006762:	9307      	str	r3, [sp, #28]
 8006764:	9005      	str	r0, [sp, #20]
 8006766:	9204      	str	r2, [sp, #16]
 8006768:	7e0a      	ldrb	r2, [r1, #24]
 800676a:	000c      	movs	r4, r1
 800676c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800676e:	2a78      	cmp	r2, #120	; 0x78
 8006770:	d807      	bhi.n	8006782 <_printf_i+0x2a>
 8006772:	2a62      	cmp	r2, #98	; 0x62
 8006774:	d809      	bhi.n	800678a <_printf_i+0x32>
 8006776:	2a00      	cmp	r2, #0
 8006778:	d100      	bne.n	800677c <_printf_i+0x24>
 800677a:	e0c1      	b.n	8006900 <_printf_i+0x1a8>
 800677c:	2a58      	cmp	r2, #88	; 0x58
 800677e:	d100      	bne.n	8006782 <_printf_i+0x2a>
 8006780:	e08c      	b.n	800689c <_printf_i+0x144>
 8006782:	0026      	movs	r6, r4
 8006784:	3642      	adds	r6, #66	; 0x42
 8006786:	7032      	strb	r2, [r6, #0]
 8006788:	e022      	b.n	80067d0 <_printf_i+0x78>
 800678a:	0010      	movs	r0, r2
 800678c:	3863      	subs	r0, #99	; 0x63
 800678e:	2815      	cmp	r0, #21
 8006790:	d8f7      	bhi.n	8006782 <_printf_i+0x2a>
 8006792:	f7f9 fcc9 	bl	8000128 <__gnu_thumb1_case_shi>
 8006796:	0016      	.short	0x0016
 8006798:	fff6001f 	.word	0xfff6001f
 800679c:	fff6fff6 	.word	0xfff6fff6
 80067a0:	001ffff6 	.word	0x001ffff6
 80067a4:	fff6fff6 	.word	0xfff6fff6
 80067a8:	fff6fff6 	.word	0xfff6fff6
 80067ac:	003600a8 	.word	0x003600a8
 80067b0:	fff6009a 	.word	0xfff6009a
 80067b4:	00b9fff6 	.word	0x00b9fff6
 80067b8:	0036fff6 	.word	0x0036fff6
 80067bc:	fff6fff6 	.word	0xfff6fff6
 80067c0:	009e      	.short	0x009e
 80067c2:	0026      	movs	r6, r4
 80067c4:	681a      	ldr	r2, [r3, #0]
 80067c6:	3642      	adds	r6, #66	; 0x42
 80067c8:	1d11      	adds	r1, r2, #4
 80067ca:	6019      	str	r1, [r3, #0]
 80067cc:	6813      	ldr	r3, [r2, #0]
 80067ce:	7033      	strb	r3, [r6, #0]
 80067d0:	2301      	movs	r3, #1
 80067d2:	e0a7      	b.n	8006924 <_printf_i+0x1cc>
 80067d4:	6808      	ldr	r0, [r1, #0]
 80067d6:	6819      	ldr	r1, [r3, #0]
 80067d8:	1d0a      	adds	r2, r1, #4
 80067da:	0605      	lsls	r5, r0, #24
 80067dc:	d50b      	bpl.n	80067f6 <_printf_i+0x9e>
 80067de:	680d      	ldr	r5, [r1, #0]
 80067e0:	601a      	str	r2, [r3, #0]
 80067e2:	2d00      	cmp	r5, #0
 80067e4:	da03      	bge.n	80067ee <_printf_i+0x96>
 80067e6:	232d      	movs	r3, #45	; 0x2d
 80067e8:	9a04      	ldr	r2, [sp, #16]
 80067ea:	426d      	negs	r5, r5
 80067ec:	7013      	strb	r3, [r2, #0]
 80067ee:	4b61      	ldr	r3, [pc, #388]	; (8006974 <_printf_i+0x21c>)
 80067f0:	270a      	movs	r7, #10
 80067f2:	9303      	str	r3, [sp, #12]
 80067f4:	e01b      	b.n	800682e <_printf_i+0xd6>
 80067f6:	680d      	ldr	r5, [r1, #0]
 80067f8:	601a      	str	r2, [r3, #0]
 80067fa:	0641      	lsls	r1, r0, #25
 80067fc:	d5f1      	bpl.n	80067e2 <_printf_i+0x8a>
 80067fe:	b22d      	sxth	r5, r5
 8006800:	e7ef      	b.n	80067e2 <_printf_i+0x8a>
 8006802:	680d      	ldr	r5, [r1, #0]
 8006804:	6819      	ldr	r1, [r3, #0]
 8006806:	1d08      	adds	r0, r1, #4
 8006808:	6018      	str	r0, [r3, #0]
 800680a:	062e      	lsls	r6, r5, #24
 800680c:	d501      	bpl.n	8006812 <_printf_i+0xba>
 800680e:	680d      	ldr	r5, [r1, #0]
 8006810:	e003      	b.n	800681a <_printf_i+0xc2>
 8006812:	066d      	lsls	r5, r5, #25
 8006814:	d5fb      	bpl.n	800680e <_printf_i+0xb6>
 8006816:	680d      	ldr	r5, [r1, #0]
 8006818:	b2ad      	uxth	r5, r5
 800681a:	4b56      	ldr	r3, [pc, #344]	; (8006974 <_printf_i+0x21c>)
 800681c:	2708      	movs	r7, #8
 800681e:	9303      	str	r3, [sp, #12]
 8006820:	2a6f      	cmp	r2, #111	; 0x6f
 8006822:	d000      	beq.n	8006826 <_printf_i+0xce>
 8006824:	3702      	adds	r7, #2
 8006826:	0023      	movs	r3, r4
 8006828:	2200      	movs	r2, #0
 800682a:	3343      	adds	r3, #67	; 0x43
 800682c:	701a      	strb	r2, [r3, #0]
 800682e:	6863      	ldr	r3, [r4, #4]
 8006830:	60a3      	str	r3, [r4, #8]
 8006832:	2b00      	cmp	r3, #0
 8006834:	db03      	blt.n	800683e <_printf_i+0xe6>
 8006836:	2204      	movs	r2, #4
 8006838:	6821      	ldr	r1, [r4, #0]
 800683a:	4391      	bics	r1, r2
 800683c:	6021      	str	r1, [r4, #0]
 800683e:	2d00      	cmp	r5, #0
 8006840:	d102      	bne.n	8006848 <_printf_i+0xf0>
 8006842:	9e04      	ldr	r6, [sp, #16]
 8006844:	2b00      	cmp	r3, #0
 8006846:	d00c      	beq.n	8006862 <_printf_i+0x10a>
 8006848:	9e04      	ldr	r6, [sp, #16]
 800684a:	0028      	movs	r0, r5
 800684c:	0039      	movs	r1, r7
 800684e:	f7f9 fcfb 	bl	8000248 <__aeabi_uidivmod>
 8006852:	9b03      	ldr	r3, [sp, #12]
 8006854:	3e01      	subs	r6, #1
 8006856:	5c5b      	ldrb	r3, [r3, r1]
 8006858:	7033      	strb	r3, [r6, #0]
 800685a:	002b      	movs	r3, r5
 800685c:	0005      	movs	r5, r0
 800685e:	429f      	cmp	r7, r3
 8006860:	d9f3      	bls.n	800684a <_printf_i+0xf2>
 8006862:	2f08      	cmp	r7, #8
 8006864:	d109      	bne.n	800687a <_printf_i+0x122>
 8006866:	6823      	ldr	r3, [r4, #0]
 8006868:	07db      	lsls	r3, r3, #31
 800686a:	d506      	bpl.n	800687a <_printf_i+0x122>
 800686c:	6863      	ldr	r3, [r4, #4]
 800686e:	6922      	ldr	r2, [r4, #16]
 8006870:	4293      	cmp	r3, r2
 8006872:	dc02      	bgt.n	800687a <_printf_i+0x122>
 8006874:	2330      	movs	r3, #48	; 0x30
 8006876:	3e01      	subs	r6, #1
 8006878:	7033      	strb	r3, [r6, #0]
 800687a:	9b04      	ldr	r3, [sp, #16]
 800687c:	1b9b      	subs	r3, r3, r6
 800687e:	6123      	str	r3, [r4, #16]
 8006880:	9b07      	ldr	r3, [sp, #28]
 8006882:	0021      	movs	r1, r4
 8006884:	9300      	str	r3, [sp, #0]
 8006886:	9805      	ldr	r0, [sp, #20]
 8006888:	9b06      	ldr	r3, [sp, #24]
 800688a:	aa09      	add	r2, sp, #36	; 0x24
 800688c:	f7ff fef4 	bl	8006678 <_printf_common>
 8006890:	1c43      	adds	r3, r0, #1
 8006892:	d14c      	bne.n	800692e <_printf_i+0x1d6>
 8006894:	2001      	movs	r0, #1
 8006896:	4240      	negs	r0, r0
 8006898:	b00b      	add	sp, #44	; 0x2c
 800689a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800689c:	3145      	adds	r1, #69	; 0x45
 800689e:	700a      	strb	r2, [r1, #0]
 80068a0:	4a34      	ldr	r2, [pc, #208]	; (8006974 <_printf_i+0x21c>)
 80068a2:	9203      	str	r2, [sp, #12]
 80068a4:	681a      	ldr	r2, [r3, #0]
 80068a6:	6821      	ldr	r1, [r4, #0]
 80068a8:	ca20      	ldmia	r2!, {r5}
 80068aa:	601a      	str	r2, [r3, #0]
 80068ac:	0608      	lsls	r0, r1, #24
 80068ae:	d516      	bpl.n	80068de <_printf_i+0x186>
 80068b0:	07cb      	lsls	r3, r1, #31
 80068b2:	d502      	bpl.n	80068ba <_printf_i+0x162>
 80068b4:	2320      	movs	r3, #32
 80068b6:	4319      	orrs	r1, r3
 80068b8:	6021      	str	r1, [r4, #0]
 80068ba:	2710      	movs	r7, #16
 80068bc:	2d00      	cmp	r5, #0
 80068be:	d1b2      	bne.n	8006826 <_printf_i+0xce>
 80068c0:	2320      	movs	r3, #32
 80068c2:	6822      	ldr	r2, [r4, #0]
 80068c4:	439a      	bics	r2, r3
 80068c6:	6022      	str	r2, [r4, #0]
 80068c8:	e7ad      	b.n	8006826 <_printf_i+0xce>
 80068ca:	2220      	movs	r2, #32
 80068cc:	6809      	ldr	r1, [r1, #0]
 80068ce:	430a      	orrs	r2, r1
 80068d0:	6022      	str	r2, [r4, #0]
 80068d2:	0022      	movs	r2, r4
 80068d4:	2178      	movs	r1, #120	; 0x78
 80068d6:	3245      	adds	r2, #69	; 0x45
 80068d8:	7011      	strb	r1, [r2, #0]
 80068da:	4a27      	ldr	r2, [pc, #156]	; (8006978 <_printf_i+0x220>)
 80068dc:	e7e1      	b.n	80068a2 <_printf_i+0x14a>
 80068de:	0648      	lsls	r0, r1, #25
 80068e0:	d5e6      	bpl.n	80068b0 <_printf_i+0x158>
 80068e2:	b2ad      	uxth	r5, r5
 80068e4:	e7e4      	b.n	80068b0 <_printf_i+0x158>
 80068e6:	681a      	ldr	r2, [r3, #0]
 80068e8:	680d      	ldr	r5, [r1, #0]
 80068ea:	1d10      	adds	r0, r2, #4
 80068ec:	6949      	ldr	r1, [r1, #20]
 80068ee:	6018      	str	r0, [r3, #0]
 80068f0:	6813      	ldr	r3, [r2, #0]
 80068f2:	062e      	lsls	r6, r5, #24
 80068f4:	d501      	bpl.n	80068fa <_printf_i+0x1a2>
 80068f6:	6019      	str	r1, [r3, #0]
 80068f8:	e002      	b.n	8006900 <_printf_i+0x1a8>
 80068fa:	066d      	lsls	r5, r5, #25
 80068fc:	d5fb      	bpl.n	80068f6 <_printf_i+0x19e>
 80068fe:	8019      	strh	r1, [r3, #0]
 8006900:	2300      	movs	r3, #0
 8006902:	9e04      	ldr	r6, [sp, #16]
 8006904:	6123      	str	r3, [r4, #16]
 8006906:	e7bb      	b.n	8006880 <_printf_i+0x128>
 8006908:	681a      	ldr	r2, [r3, #0]
 800690a:	1d11      	adds	r1, r2, #4
 800690c:	6019      	str	r1, [r3, #0]
 800690e:	6816      	ldr	r6, [r2, #0]
 8006910:	2100      	movs	r1, #0
 8006912:	0030      	movs	r0, r6
 8006914:	6862      	ldr	r2, [r4, #4]
 8006916:	f002 fb5d 	bl	8008fd4 <memchr>
 800691a:	2800      	cmp	r0, #0
 800691c:	d001      	beq.n	8006922 <_printf_i+0x1ca>
 800691e:	1b80      	subs	r0, r0, r6
 8006920:	6060      	str	r0, [r4, #4]
 8006922:	6863      	ldr	r3, [r4, #4]
 8006924:	6123      	str	r3, [r4, #16]
 8006926:	2300      	movs	r3, #0
 8006928:	9a04      	ldr	r2, [sp, #16]
 800692a:	7013      	strb	r3, [r2, #0]
 800692c:	e7a8      	b.n	8006880 <_printf_i+0x128>
 800692e:	6923      	ldr	r3, [r4, #16]
 8006930:	0032      	movs	r2, r6
 8006932:	9906      	ldr	r1, [sp, #24]
 8006934:	9805      	ldr	r0, [sp, #20]
 8006936:	9d07      	ldr	r5, [sp, #28]
 8006938:	47a8      	blx	r5
 800693a:	1c43      	adds	r3, r0, #1
 800693c:	d0aa      	beq.n	8006894 <_printf_i+0x13c>
 800693e:	6823      	ldr	r3, [r4, #0]
 8006940:	079b      	lsls	r3, r3, #30
 8006942:	d415      	bmi.n	8006970 <_printf_i+0x218>
 8006944:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006946:	68e0      	ldr	r0, [r4, #12]
 8006948:	4298      	cmp	r0, r3
 800694a:	daa5      	bge.n	8006898 <_printf_i+0x140>
 800694c:	0018      	movs	r0, r3
 800694e:	e7a3      	b.n	8006898 <_printf_i+0x140>
 8006950:	0022      	movs	r2, r4
 8006952:	2301      	movs	r3, #1
 8006954:	9906      	ldr	r1, [sp, #24]
 8006956:	9805      	ldr	r0, [sp, #20]
 8006958:	9e07      	ldr	r6, [sp, #28]
 800695a:	3219      	adds	r2, #25
 800695c:	47b0      	blx	r6
 800695e:	1c43      	adds	r3, r0, #1
 8006960:	d098      	beq.n	8006894 <_printf_i+0x13c>
 8006962:	3501      	adds	r5, #1
 8006964:	68e3      	ldr	r3, [r4, #12]
 8006966:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006968:	1a9b      	subs	r3, r3, r2
 800696a:	42ab      	cmp	r3, r5
 800696c:	dcf0      	bgt.n	8006950 <_printf_i+0x1f8>
 800696e:	e7e9      	b.n	8006944 <_printf_i+0x1ec>
 8006970:	2500      	movs	r5, #0
 8006972:	e7f7      	b.n	8006964 <_printf_i+0x20c>
 8006974:	0800ad1e 	.word	0x0800ad1e
 8006978:	0800ad2f 	.word	0x0800ad2f

0800697c <_scanf_float>:
 800697c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800697e:	b08b      	sub	sp, #44	; 0x2c
 8006980:	0015      	movs	r5, r2
 8006982:	9001      	str	r0, [sp, #4]
 8006984:	22ae      	movs	r2, #174	; 0xae
 8006986:	2000      	movs	r0, #0
 8006988:	9306      	str	r3, [sp, #24]
 800698a:	688b      	ldr	r3, [r1, #8]
 800698c:	000e      	movs	r6, r1
 800698e:	1e59      	subs	r1, r3, #1
 8006990:	0052      	lsls	r2, r2, #1
 8006992:	9005      	str	r0, [sp, #20]
 8006994:	4291      	cmp	r1, r2
 8006996:	d905      	bls.n	80069a4 <_scanf_float+0x28>
 8006998:	3b5e      	subs	r3, #94	; 0x5e
 800699a:	3bff      	subs	r3, #255	; 0xff
 800699c:	9305      	str	r3, [sp, #20]
 800699e:	235e      	movs	r3, #94	; 0x5e
 80069a0:	33ff      	adds	r3, #255	; 0xff
 80069a2:	60b3      	str	r3, [r6, #8]
 80069a4:	23f0      	movs	r3, #240	; 0xf0
 80069a6:	6832      	ldr	r2, [r6, #0]
 80069a8:	00db      	lsls	r3, r3, #3
 80069aa:	4313      	orrs	r3, r2
 80069ac:	6033      	str	r3, [r6, #0]
 80069ae:	0033      	movs	r3, r6
 80069b0:	2400      	movs	r4, #0
 80069b2:	331c      	adds	r3, #28
 80069b4:	001f      	movs	r7, r3
 80069b6:	9303      	str	r3, [sp, #12]
 80069b8:	9402      	str	r4, [sp, #8]
 80069ba:	9408      	str	r4, [sp, #32]
 80069bc:	9407      	str	r4, [sp, #28]
 80069be:	9400      	str	r4, [sp, #0]
 80069c0:	9404      	str	r4, [sp, #16]
 80069c2:	68b2      	ldr	r2, [r6, #8]
 80069c4:	2a00      	cmp	r2, #0
 80069c6:	d00a      	beq.n	80069de <_scanf_float+0x62>
 80069c8:	682b      	ldr	r3, [r5, #0]
 80069ca:	781b      	ldrb	r3, [r3, #0]
 80069cc:	2b4e      	cmp	r3, #78	; 0x4e
 80069ce:	d844      	bhi.n	8006a5a <_scanf_float+0xde>
 80069d0:	0018      	movs	r0, r3
 80069d2:	2b40      	cmp	r3, #64	; 0x40
 80069d4:	d82c      	bhi.n	8006a30 <_scanf_float+0xb4>
 80069d6:	382b      	subs	r0, #43	; 0x2b
 80069d8:	b2c1      	uxtb	r1, r0
 80069da:	290e      	cmp	r1, #14
 80069dc:	d92a      	bls.n	8006a34 <_scanf_float+0xb8>
 80069de:	9b00      	ldr	r3, [sp, #0]
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d003      	beq.n	80069ec <_scanf_float+0x70>
 80069e4:	6832      	ldr	r2, [r6, #0]
 80069e6:	4ba4      	ldr	r3, [pc, #656]	; (8006c78 <_scanf_float+0x2fc>)
 80069e8:	4013      	ands	r3, r2
 80069ea:	6033      	str	r3, [r6, #0]
 80069ec:	9b02      	ldr	r3, [sp, #8]
 80069ee:	3b01      	subs	r3, #1
 80069f0:	2b01      	cmp	r3, #1
 80069f2:	d900      	bls.n	80069f6 <_scanf_float+0x7a>
 80069f4:	e0f9      	b.n	8006bea <_scanf_float+0x26e>
 80069f6:	24be      	movs	r4, #190	; 0xbe
 80069f8:	0064      	lsls	r4, r4, #1
 80069fa:	9b03      	ldr	r3, [sp, #12]
 80069fc:	429f      	cmp	r7, r3
 80069fe:	d900      	bls.n	8006a02 <_scanf_float+0x86>
 8006a00:	e0e9      	b.n	8006bd6 <_scanf_float+0x25a>
 8006a02:	2301      	movs	r3, #1
 8006a04:	9302      	str	r3, [sp, #8]
 8006a06:	e185      	b.n	8006d14 <_scanf_float+0x398>
 8006a08:	0018      	movs	r0, r3
 8006a0a:	3861      	subs	r0, #97	; 0x61
 8006a0c:	280d      	cmp	r0, #13
 8006a0e:	d8e6      	bhi.n	80069de <_scanf_float+0x62>
 8006a10:	f7f9 fb8a 	bl	8000128 <__gnu_thumb1_case_shi>
 8006a14:	ffe50083 	.word	0xffe50083
 8006a18:	ffe5ffe5 	.word	0xffe5ffe5
 8006a1c:	00a200b6 	.word	0x00a200b6
 8006a20:	ffe5ffe5 	.word	0xffe5ffe5
 8006a24:	ffe50089 	.word	0xffe50089
 8006a28:	ffe5ffe5 	.word	0xffe5ffe5
 8006a2c:	0065ffe5 	.word	0x0065ffe5
 8006a30:	3841      	subs	r0, #65	; 0x41
 8006a32:	e7eb      	b.n	8006a0c <_scanf_float+0x90>
 8006a34:	280e      	cmp	r0, #14
 8006a36:	d8d2      	bhi.n	80069de <_scanf_float+0x62>
 8006a38:	f7f9 fb76 	bl	8000128 <__gnu_thumb1_case_shi>
 8006a3c:	ffd1004b 	.word	0xffd1004b
 8006a40:	0098004b 	.word	0x0098004b
 8006a44:	0020ffd1 	.word	0x0020ffd1
 8006a48:	00400040 	.word	0x00400040
 8006a4c:	00400040 	.word	0x00400040
 8006a50:	00400040 	.word	0x00400040
 8006a54:	00400040 	.word	0x00400040
 8006a58:	0040      	.short	0x0040
 8006a5a:	2b6e      	cmp	r3, #110	; 0x6e
 8006a5c:	d809      	bhi.n	8006a72 <_scanf_float+0xf6>
 8006a5e:	2b60      	cmp	r3, #96	; 0x60
 8006a60:	d8d2      	bhi.n	8006a08 <_scanf_float+0x8c>
 8006a62:	2b54      	cmp	r3, #84	; 0x54
 8006a64:	d07d      	beq.n	8006b62 <_scanf_float+0x1e6>
 8006a66:	2b59      	cmp	r3, #89	; 0x59
 8006a68:	d1b9      	bne.n	80069de <_scanf_float+0x62>
 8006a6a:	2c07      	cmp	r4, #7
 8006a6c:	d1b7      	bne.n	80069de <_scanf_float+0x62>
 8006a6e:	2408      	movs	r4, #8
 8006a70:	e02c      	b.n	8006acc <_scanf_float+0x150>
 8006a72:	2b74      	cmp	r3, #116	; 0x74
 8006a74:	d075      	beq.n	8006b62 <_scanf_float+0x1e6>
 8006a76:	2b79      	cmp	r3, #121	; 0x79
 8006a78:	d0f7      	beq.n	8006a6a <_scanf_float+0xee>
 8006a7a:	e7b0      	b.n	80069de <_scanf_float+0x62>
 8006a7c:	6831      	ldr	r1, [r6, #0]
 8006a7e:	05c8      	lsls	r0, r1, #23
 8006a80:	d51c      	bpl.n	8006abc <_scanf_float+0x140>
 8006a82:	2380      	movs	r3, #128	; 0x80
 8006a84:	4399      	bics	r1, r3
 8006a86:	9b00      	ldr	r3, [sp, #0]
 8006a88:	6031      	str	r1, [r6, #0]
 8006a8a:	3301      	adds	r3, #1
 8006a8c:	9300      	str	r3, [sp, #0]
 8006a8e:	9b05      	ldr	r3, [sp, #20]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d003      	beq.n	8006a9c <_scanf_float+0x120>
 8006a94:	3b01      	subs	r3, #1
 8006a96:	3201      	adds	r2, #1
 8006a98:	9305      	str	r3, [sp, #20]
 8006a9a:	60b2      	str	r2, [r6, #8]
 8006a9c:	68b3      	ldr	r3, [r6, #8]
 8006a9e:	3b01      	subs	r3, #1
 8006aa0:	60b3      	str	r3, [r6, #8]
 8006aa2:	6933      	ldr	r3, [r6, #16]
 8006aa4:	3301      	adds	r3, #1
 8006aa6:	6133      	str	r3, [r6, #16]
 8006aa8:	686b      	ldr	r3, [r5, #4]
 8006aaa:	3b01      	subs	r3, #1
 8006aac:	606b      	str	r3, [r5, #4]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	dc00      	bgt.n	8006ab4 <_scanf_float+0x138>
 8006ab2:	e086      	b.n	8006bc2 <_scanf_float+0x246>
 8006ab4:	682b      	ldr	r3, [r5, #0]
 8006ab6:	3301      	adds	r3, #1
 8006ab8:	602b      	str	r3, [r5, #0]
 8006aba:	e782      	b.n	80069c2 <_scanf_float+0x46>
 8006abc:	9a02      	ldr	r2, [sp, #8]
 8006abe:	1912      	adds	r2, r2, r4
 8006ac0:	2a00      	cmp	r2, #0
 8006ac2:	d18c      	bne.n	80069de <_scanf_float+0x62>
 8006ac4:	4a6d      	ldr	r2, [pc, #436]	; (8006c7c <_scanf_float+0x300>)
 8006ac6:	6831      	ldr	r1, [r6, #0]
 8006ac8:	400a      	ands	r2, r1
 8006aca:	6032      	str	r2, [r6, #0]
 8006acc:	703b      	strb	r3, [r7, #0]
 8006ace:	3701      	adds	r7, #1
 8006ad0:	e7e4      	b.n	8006a9c <_scanf_float+0x120>
 8006ad2:	2180      	movs	r1, #128	; 0x80
 8006ad4:	6832      	ldr	r2, [r6, #0]
 8006ad6:	420a      	tst	r2, r1
 8006ad8:	d081      	beq.n	80069de <_scanf_float+0x62>
 8006ada:	438a      	bics	r2, r1
 8006adc:	e7f5      	b.n	8006aca <_scanf_float+0x14e>
 8006ade:	9a02      	ldr	r2, [sp, #8]
 8006ae0:	2a00      	cmp	r2, #0
 8006ae2:	d10f      	bne.n	8006b04 <_scanf_float+0x188>
 8006ae4:	9a00      	ldr	r2, [sp, #0]
 8006ae6:	2a00      	cmp	r2, #0
 8006ae8:	d10f      	bne.n	8006b0a <_scanf_float+0x18e>
 8006aea:	6832      	ldr	r2, [r6, #0]
 8006aec:	21e0      	movs	r1, #224	; 0xe0
 8006aee:	0010      	movs	r0, r2
 8006af0:	00c9      	lsls	r1, r1, #3
 8006af2:	4008      	ands	r0, r1
 8006af4:	4288      	cmp	r0, r1
 8006af6:	d108      	bne.n	8006b0a <_scanf_float+0x18e>
 8006af8:	4961      	ldr	r1, [pc, #388]	; (8006c80 <_scanf_float+0x304>)
 8006afa:	400a      	ands	r2, r1
 8006afc:	6032      	str	r2, [r6, #0]
 8006afe:	2201      	movs	r2, #1
 8006b00:	9202      	str	r2, [sp, #8]
 8006b02:	e7e3      	b.n	8006acc <_scanf_float+0x150>
 8006b04:	9a02      	ldr	r2, [sp, #8]
 8006b06:	2a02      	cmp	r2, #2
 8006b08:	d059      	beq.n	8006bbe <_scanf_float+0x242>
 8006b0a:	2c01      	cmp	r4, #1
 8006b0c:	d002      	beq.n	8006b14 <_scanf_float+0x198>
 8006b0e:	2c04      	cmp	r4, #4
 8006b10:	d000      	beq.n	8006b14 <_scanf_float+0x198>
 8006b12:	e764      	b.n	80069de <_scanf_float+0x62>
 8006b14:	3401      	adds	r4, #1
 8006b16:	b2e4      	uxtb	r4, r4
 8006b18:	e7d8      	b.n	8006acc <_scanf_float+0x150>
 8006b1a:	9a02      	ldr	r2, [sp, #8]
 8006b1c:	2a01      	cmp	r2, #1
 8006b1e:	d000      	beq.n	8006b22 <_scanf_float+0x1a6>
 8006b20:	e75d      	b.n	80069de <_scanf_float+0x62>
 8006b22:	2202      	movs	r2, #2
 8006b24:	e7ec      	b.n	8006b00 <_scanf_float+0x184>
 8006b26:	2c00      	cmp	r4, #0
 8006b28:	d110      	bne.n	8006b4c <_scanf_float+0x1d0>
 8006b2a:	9a00      	ldr	r2, [sp, #0]
 8006b2c:	2a00      	cmp	r2, #0
 8006b2e:	d000      	beq.n	8006b32 <_scanf_float+0x1b6>
 8006b30:	e758      	b.n	80069e4 <_scanf_float+0x68>
 8006b32:	6832      	ldr	r2, [r6, #0]
 8006b34:	21e0      	movs	r1, #224	; 0xe0
 8006b36:	0010      	movs	r0, r2
 8006b38:	00c9      	lsls	r1, r1, #3
 8006b3a:	4008      	ands	r0, r1
 8006b3c:	4288      	cmp	r0, r1
 8006b3e:	d000      	beq.n	8006b42 <_scanf_float+0x1c6>
 8006b40:	e754      	b.n	80069ec <_scanf_float+0x70>
 8006b42:	494f      	ldr	r1, [pc, #316]	; (8006c80 <_scanf_float+0x304>)
 8006b44:	3401      	adds	r4, #1
 8006b46:	400a      	ands	r2, r1
 8006b48:	6032      	str	r2, [r6, #0]
 8006b4a:	e7bf      	b.n	8006acc <_scanf_float+0x150>
 8006b4c:	21fd      	movs	r1, #253	; 0xfd
 8006b4e:	1ee2      	subs	r2, r4, #3
 8006b50:	420a      	tst	r2, r1
 8006b52:	d000      	beq.n	8006b56 <_scanf_float+0x1da>
 8006b54:	e743      	b.n	80069de <_scanf_float+0x62>
 8006b56:	e7dd      	b.n	8006b14 <_scanf_float+0x198>
 8006b58:	2c02      	cmp	r4, #2
 8006b5a:	d000      	beq.n	8006b5e <_scanf_float+0x1e2>
 8006b5c:	e73f      	b.n	80069de <_scanf_float+0x62>
 8006b5e:	2403      	movs	r4, #3
 8006b60:	e7b4      	b.n	8006acc <_scanf_float+0x150>
 8006b62:	2c06      	cmp	r4, #6
 8006b64:	d000      	beq.n	8006b68 <_scanf_float+0x1ec>
 8006b66:	e73a      	b.n	80069de <_scanf_float+0x62>
 8006b68:	2407      	movs	r4, #7
 8006b6a:	e7af      	b.n	8006acc <_scanf_float+0x150>
 8006b6c:	6832      	ldr	r2, [r6, #0]
 8006b6e:	0591      	lsls	r1, r2, #22
 8006b70:	d400      	bmi.n	8006b74 <_scanf_float+0x1f8>
 8006b72:	e734      	b.n	80069de <_scanf_float+0x62>
 8006b74:	4943      	ldr	r1, [pc, #268]	; (8006c84 <_scanf_float+0x308>)
 8006b76:	400a      	ands	r2, r1
 8006b78:	6032      	str	r2, [r6, #0]
 8006b7a:	9a00      	ldr	r2, [sp, #0]
 8006b7c:	9204      	str	r2, [sp, #16]
 8006b7e:	e7a5      	b.n	8006acc <_scanf_float+0x150>
 8006b80:	21a0      	movs	r1, #160	; 0xa0
 8006b82:	2080      	movs	r0, #128	; 0x80
 8006b84:	6832      	ldr	r2, [r6, #0]
 8006b86:	00c9      	lsls	r1, r1, #3
 8006b88:	4011      	ands	r1, r2
 8006b8a:	00c0      	lsls	r0, r0, #3
 8006b8c:	4281      	cmp	r1, r0
 8006b8e:	d006      	beq.n	8006b9e <_scanf_float+0x222>
 8006b90:	4202      	tst	r2, r0
 8006b92:	d100      	bne.n	8006b96 <_scanf_float+0x21a>
 8006b94:	e723      	b.n	80069de <_scanf_float+0x62>
 8006b96:	9900      	ldr	r1, [sp, #0]
 8006b98:	2900      	cmp	r1, #0
 8006b9a:	d100      	bne.n	8006b9e <_scanf_float+0x222>
 8006b9c:	e726      	b.n	80069ec <_scanf_float+0x70>
 8006b9e:	0591      	lsls	r1, r2, #22
 8006ba0:	d404      	bmi.n	8006bac <_scanf_float+0x230>
 8006ba2:	9900      	ldr	r1, [sp, #0]
 8006ba4:	9804      	ldr	r0, [sp, #16]
 8006ba6:	9708      	str	r7, [sp, #32]
 8006ba8:	1a09      	subs	r1, r1, r0
 8006baa:	9107      	str	r1, [sp, #28]
 8006bac:	4934      	ldr	r1, [pc, #208]	; (8006c80 <_scanf_float+0x304>)
 8006bae:	400a      	ands	r2, r1
 8006bb0:	21c0      	movs	r1, #192	; 0xc0
 8006bb2:	0049      	lsls	r1, r1, #1
 8006bb4:	430a      	orrs	r2, r1
 8006bb6:	6032      	str	r2, [r6, #0]
 8006bb8:	2200      	movs	r2, #0
 8006bba:	9200      	str	r2, [sp, #0]
 8006bbc:	e786      	b.n	8006acc <_scanf_float+0x150>
 8006bbe:	2203      	movs	r2, #3
 8006bc0:	e79e      	b.n	8006b00 <_scanf_float+0x184>
 8006bc2:	23c0      	movs	r3, #192	; 0xc0
 8006bc4:	005b      	lsls	r3, r3, #1
 8006bc6:	0029      	movs	r1, r5
 8006bc8:	58f3      	ldr	r3, [r6, r3]
 8006bca:	9801      	ldr	r0, [sp, #4]
 8006bcc:	4798      	blx	r3
 8006bce:	2800      	cmp	r0, #0
 8006bd0:	d100      	bne.n	8006bd4 <_scanf_float+0x258>
 8006bd2:	e6f6      	b.n	80069c2 <_scanf_float+0x46>
 8006bd4:	e703      	b.n	80069de <_scanf_float+0x62>
 8006bd6:	3f01      	subs	r7, #1
 8006bd8:	5933      	ldr	r3, [r6, r4]
 8006bda:	002a      	movs	r2, r5
 8006bdc:	7839      	ldrb	r1, [r7, #0]
 8006bde:	9801      	ldr	r0, [sp, #4]
 8006be0:	4798      	blx	r3
 8006be2:	6933      	ldr	r3, [r6, #16]
 8006be4:	3b01      	subs	r3, #1
 8006be6:	6133      	str	r3, [r6, #16]
 8006be8:	e707      	b.n	80069fa <_scanf_float+0x7e>
 8006bea:	1e63      	subs	r3, r4, #1
 8006bec:	2b06      	cmp	r3, #6
 8006bee:	d80e      	bhi.n	8006c0e <_scanf_float+0x292>
 8006bf0:	9702      	str	r7, [sp, #8]
 8006bf2:	2c02      	cmp	r4, #2
 8006bf4:	d920      	bls.n	8006c38 <_scanf_float+0x2bc>
 8006bf6:	1be3      	subs	r3, r4, r7
 8006bf8:	b2db      	uxtb	r3, r3
 8006bfa:	9305      	str	r3, [sp, #20]
 8006bfc:	9b02      	ldr	r3, [sp, #8]
 8006bfe:	9a05      	ldr	r2, [sp, #20]
 8006c00:	189b      	adds	r3, r3, r2
 8006c02:	b2db      	uxtb	r3, r3
 8006c04:	2b03      	cmp	r3, #3
 8006c06:	d827      	bhi.n	8006c58 <_scanf_float+0x2dc>
 8006c08:	3c03      	subs	r4, #3
 8006c0a:	b2e4      	uxtb	r4, r4
 8006c0c:	1b3f      	subs	r7, r7, r4
 8006c0e:	6833      	ldr	r3, [r6, #0]
 8006c10:	05da      	lsls	r2, r3, #23
 8006c12:	d554      	bpl.n	8006cbe <_scanf_float+0x342>
 8006c14:	055b      	lsls	r3, r3, #21
 8006c16:	d537      	bpl.n	8006c88 <_scanf_float+0x30c>
 8006c18:	24be      	movs	r4, #190	; 0xbe
 8006c1a:	0064      	lsls	r4, r4, #1
 8006c1c:	9b03      	ldr	r3, [sp, #12]
 8006c1e:	429f      	cmp	r7, r3
 8006c20:	d800      	bhi.n	8006c24 <_scanf_float+0x2a8>
 8006c22:	e6ee      	b.n	8006a02 <_scanf_float+0x86>
 8006c24:	3f01      	subs	r7, #1
 8006c26:	5933      	ldr	r3, [r6, r4]
 8006c28:	002a      	movs	r2, r5
 8006c2a:	7839      	ldrb	r1, [r7, #0]
 8006c2c:	9801      	ldr	r0, [sp, #4]
 8006c2e:	4798      	blx	r3
 8006c30:	6933      	ldr	r3, [r6, #16]
 8006c32:	3b01      	subs	r3, #1
 8006c34:	6133      	str	r3, [r6, #16]
 8006c36:	e7f1      	b.n	8006c1c <_scanf_float+0x2a0>
 8006c38:	24be      	movs	r4, #190	; 0xbe
 8006c3a:	0064      	lsls	r4, r4, #1
 8006c3c:	9b03      	ldr	r3, [sp, #12]
 8006c3e:	429f      	cmp	r7, r3
 8006c40:	d800      	bhi.n	8006c44 <_scanf_float+0x2c8>
 8006c42:	e6de      	b.n	8006a02 <_scanf_float+0x86>
 8006c44:	3f01      	subs	r7, #1
 8006c46:	5933      	ldr	r3, [r6, r4]
 8006c48:	002a      	movs	r2, r5
 8006c4a:	7839      	ldrb	r1, [r7, #0]
 8006c4c:	9801      	ldr	r0, [sp, #4]
 8006c4e:	4798      	blx	r3
 8006c50:	6933      	ldr	r3, [r6, #16]
 8006c52:	3b01      	subs	r3, #1
 8006c54:	6133      	str	r3, [r6, #16]
 8006c56:	e7f1      	b.n	8006c3c <_scanf_float+0x2c0>
 8006c58:	9b02      	ldr	r3, [sp, #8]
 8006c5a:	002a      	movs	r2, r5
 8006c5c:	3b01      	subs	r3, #1
 8006c5e:	7819      	ldrb	r1, [r3, #0]
 8006c60:	9302      	str	r3, [sp, #8]
 8006c62:	23be      	movs	r3, #190	; 0xbe
 8006c64:	005b      	lsls	r3, r3, #1
 8006c66:	58f3      	ldr	r3, [r6, r3]
 8006c68:	9801      	ldr	r0, [sp, #4]
 8006c6a:	9309      	str	r3, [sp, #36]	; 0x24
 8006c6c:	4798      	blx	r3
 8006c6e:	6933      	ldr	r3, [r6, #16]
 8006c70:	3b01      	subs	r3, #1
 8006c72:	6133      	str	r3, [r6, #16]
 8006c74:	e7c2      	b.n	8006bfc <_scanf_float+0x280>
 8006c76:	46c0      	nop			; (mov r8, r8)
 8006c78:	fffffeff 	.word	0xfffffeff
 8006c7c:	fffffe7f 	.word	0xfffffe7f
 8006c80:	fffff87f 	.word	0xfffff87f
 8006c84:	fffffd7f 	.word	0xfffffd7f
 8006c88:	6933      	ldr	r3, [r6, #16]
 8006c8a:	1e7c      	subs	r4, r7, #1
 8006c8c:	7821      	ldrb	r1, [r4, #0]
 8006c8e:	3b01      	subs	r3, #1
 8006c90:	6133      	str	r3, [r6, #16]
 8006c92:	2965      	cmp	r1, #101	; 0x65
 8006c94:	d00c      	beq.n	8006cb0 <_scanf_float+0x334>
 8006c96:	2945      	cmp	r1, #69	; 0x45
 8006c98:	d00a      	beq.n	8006cb0 <_scanf_float+0x334>
 8006c9a:	23be      	movs	r3, #190	; 0xbe
 8006c9c:	005b      	lsls	r3, r3, #1
 8006c9e:	58f3      	ldr	r3, [r6, r3]
 8006ca0:	002a      	movs	r2, r5
 8006ca2:	9801      	ldr	r0, [sp, #4]
 8006ca4:	4798      	blx	r3
 8006ca6:	6933      	ldr	r3, [r6, #16]
 8006ca8:	1ebc      	subs	r4, r7, #2
 8006caa:	3b01      	subs	r3, #1
 8006cac:	7821      	ldrb	r1, [r4, #0]
 8006cae:	6133      	str	r3, [r6, #16]
 8006cb0:	23be      	movs	r3, #190	; 0xbe
 8006cb2:	005b      	lsls	r3, r3, #1
 8006cb4:	002a      	movs	r2, r5
 8006cb6:	58f3      	ldr	r3, [r6, r3]
 8006cb8:	9801      	ldr	r0, [sp, #4]
 8006cba:	4798      	blx	r3
 8006cbc:	0027      	movs	r7, r4
 8006cbe:	6832      	ldr	r2, [r6, #0]
 8006cc0:	2310      	movs	r3, #16
 8006cc2:	0011      	movs	r1, r2
 8006cc4:	4019      	ands	r1, r3
 8006cc6:	9102      	str	r1, [sp, #8]
 8006cc8:	421a      	tst	r2, r3
 8006cca:	d158      	bne.n	8006d7e <_scanf_float+0x402>
 8006ccc:	23c0      	movs	r3, #192	; 0xc0
 8006cce:	7039      	strb	r1, [r7, #0]
 8006cd0:	6832      	ldr	r2, [r6, #0]
 8006cd2:	00db      	lsls	r3, r3, #3
 8006cd4:	4013      	ands	r3, r2
 8006cd6:	2280      	movs	r2, #128	; 0x80
 8006cd8:	00d2      	lsls	r2, r2, #3
 8006cda:	4293      	cmp	r3, r2
 8006cdc:	d11d      	bne.n	8006d1a <_scanf_float+0x39e>
 8006cde:	9b04      	ldr	r3, [sp, #16]
 8006ce0:	9a00      	ldr	r2, [sp, #0]
 8006ce2:	9900      	ldr	r1, [sp, #0]
 8006ce4:	1a9a      	subs	r2, r3, r2
 8006ce6:	428b      	cmp	r3, r1
 8006ce8:	d124      	bne.n	8006d34 <_scanf_float+0x3b8>
 8006cea:	2200      	movs	r2, #0
 8006cec:	9903      	ldr	r1, [sp, #12]
 8006cee:	9801      	ldr	r0, [sp, #4]
 8006cf0:	f000 fe9c 	bl	8007a2c <_strtod_r>
 8006cf4:	9b06      	ldr	r3, [sp, #24]
 8006cf6:	000d      	movs	r5, r1
 8006cf8:	6831      	ldr	r1, [r6, #0]
 8006cfa:	0004      	movs	r4, r0
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	078a      	lsls	r2, r1, #30
 8006d00:	d525      	bpl.n	8006d4e <_scanf_float+0x3d2>
 8006d02:	1d1a      	adds	r2, r3, #4
 8006d04:	9906      	ldr	r1, [sp, #24]
 8006d06:	600a      	str	r2, [r1, #0]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	601c      	str	r4, [r3, #0]
 8006d0c:	605d      	str	r5, [r3, #4]
 8006d0e:	68f3      	ldr	r3, [r6, #12]
 8006d10:	3301      	adds	r3, #1
 8006d12:	60f3      	str	r3, [r6, #12]
 8006d14:	9802      	ldr	r0, [sp, #8]
 8006d16:	b00b      	add	sp, #44	; 0x2c
 8006d18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006d1a:	9b07      	ldr	r3, [sp, #28]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d0e4      	beq.n	8006cea <_scanf_float+0x36e>
 8006d20:	9b08      	ldr	r3, [sp, #32]
 8006d22:	9a02      	ldr	r2, [sp, #8]
 8006d24:	1c59      	adds	r1, r3, #1
 8006d26:	9801      	ldr	r0, [sp, #4]
 8006d28:	230a      	movs	r3, #10
 8006d2a:	f000 ff15 	bl	8007b58 <_strtol_r>
 8006d2e:	9b07      	ldr	r3, [sp, #28]
 8006d30:	9f08      	ldr	r7, [sp, #32]
 8006d32:	1ac2      	subs	r2, r0, r3
 8006d34:	0033      	movs	r3, r6
 8006d36:	3370      	adds	r3, #112	; 0x70
 8006d38:	33ff      	adds	r3, #255	; 0xff
 8006d3a:	429f      	cmp	r7, r3
 8006d3c:	d302      	bcc.n	8006d44 <_scanf_float+0x3c8>
 8006d3e:	0037      	movs	r7, r6
 8006d40:	376f      	adds	r7, #111	; 0x6f
 8006d42:	37ff      	adds	r7, #255	; 0xff
 8006d44:	0038      	movs	r0, r7
 8006d46:	490f      	ldr	r1, [pc, #60]	; (8006d84 <_scanf_float+0x408>)
 8006d48:	f000 f824 	bl	8006d94 <siprintf>
 8006d4c:	e7cd      	b.n	8006cea <_scanf_float+0x36e>
 8006d4e:	1d1a      	adds	r2, r3, #4
 8006d50:	0749      	lsls	r1, r1, #29
 8006d52:	d4d7      	bmi.n	8006d04 <_scanf_float+0x388>
 8006d54:	9906      	ldr	r1, [sp, #24]
 8006d56:	0020      	movs	r0, r4
 8006d58:	600a      	str	r2, [r1, #0]
 8006d5a:	681f      	ldr	r7, [r3, #0]
 8006d5c:	0022      	movs	r2, r4
 8006d5e:	002b      	movs	r3, r5
 8006d60:	0029      	movs	r1, r5
 8006d62:	f7fb fe65 	bl	8002a30 <__aeabi_dcmpun>
 8006d66:	2800      	cmp	r0, #0
 8006d68:	d004      	beq.n	8006d74 <_scanf_float+0x3f8>
 8006d6a:	4807      	ldr	r0, [pc, #28]	; (8006d88 <_scanf_float+0x40c>)
 8006d6c:	f000 f80e 	bl	8006d8c <nanf>
 8006d70:	6038      	str	r0, [r7, #0]
 8006d72:	e7cc      	b.n	8006d0e <_scanf_float+0x392>
 8006d74:	0020      	movs	r0, r4
 8006d76:	0029      	movs	r1, r5
 8006d78:	f7fb ff4c 	bl	8002c14 <__aeabi_d2f>
 8006d7c:	e7f8      	b.n	8006d70 <_scanf_float+0x3f4>
 8006d7e:	2300      	movs	r3, #0
 8006d80:	e640      	b.n	8006a04 <_scanf_float+0x88>
 8006d82:	46c0      	nop			; (mov r8, r8)
 8006d84:	0800ad40 	.word	0x0800ad40
 8006d88:	0800b148 	.word	0x0800b148

08006d8c <nanf>:
 8006d8c:	4800      	ldr	r0, [pc, #0]	; (8006d90 <nanf+0x4>)
 8006d8e:	4770      	bx	lr
 8006d90:	7fc00000 	.word	0x7fc00000

08006d94 <siprintf>:
 8006d94:	b40e      	push	{r1, r2, r3}
 8006d96:	b500      	push	{lr}
 8006d98:	490b      	ldr	r1, [pc, #44]	; (8006dc8 <siprintf+0x34>)
 8006d9a:	b09c      	sub	sp, #112	; 0x70
 8006d9c:	ab1d      	add	r3, sp, #116	; 0x74
 8006d9e:	9002      	str	r0, [sp, #8]
 8006da0:	9006      	str	r0, [sp, #24]
 8006da2:	9107      	str	r1, [sp, #28]
 8006da4:	9104      	str	r1, [sp, #16]
 8006da6:	4809      	ldr	r0, [pc, #36]	; (8006dcc <siprintf+0x38>)
 8006da8:	4909      	ldr	r1, [pc, #36]	; (8006dd0 <siprintf+0x3c>)
 8006daa:	cb04      	ldmia	r3!, {r2}
 8006dac:	9105      	str	r1, [sp, #20]
 8006dae:	6800      	ldr	r0, [r0, #0]
 8006db0:	a902      	add	r1, sp, #8
 8006db2:	9301      	str	r3, [sp, #4]
 8006db4:	f002 ff5c 	bl	8009c70 <_svfiprintf_r>
 8006db8:	2300      	movs	r3, #0
 8006dba:	9a02      	ldr	r2, [sp, #8]
 8006dbc:	7013      	strb	r3, [r2, #0]
 8006dbe:	b01c      	add	sp, #112	; 0x70
 8006dc0:	bc08      	pop	{r3}
 8006dc2:	b003      	add	sp, #12
 8006dc4:	4718      	bx	r3
 8006dc6:	46c0      	nop			; (mov r8, r8)
 8006dc8:	7fffffff 	.word	0x7fffffff
 8006dcc:	2000000c 	.word	0x2000000c
 8006dd0:	ffff0208 	.word	0xffff0208

08006dd4 <sulp>:
 8006dd4:	b570      	push	{r4, r5, r6, lr}
 8006dd6:	0016      	movs	r6, r2
 8006dd8:	000d      	movs	r5, r1
 8006dda:	f002 fc93 	bl	8009704 <__ulp>
 8006dde:	2e00      	cmp	r6, #0
 8006de0:	d00d      	beq.n	8006dfe <sulp+0x2a>
 8006de2:	236b      	movs	r3, #107	; 0x6b
 8006de4:	006a      	lsls	r2, r5, #1
 8006de6:	0d52      	lsrs	r2, r2, #21
 8006de8:	1a9b      	subs	r3, r3, r2
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	dd07      	ble.n	8006dfe <sulp+0x2a>
 8006dee:	2400      	movs	r4, #0
 8006df0:	4a03      	ldr	r2, [pc, #12]	; (8006e00 <sulp+0x2c>)
 8006df2:	051b      	lsls	r3, r3, #20
 8006df4:	189d      	adds	r5, r3, r2
 8006df6:	002b      	movs	r3, r5
 8006df8:	0022      	movs	r2, r4
 8006dfa:	f7fb f81b 	bl	8001e34 <__aeabi_dmul>
 8006dfe:	bd70      	pop	{r4, r5, r6, pc}
 8006e00:	3ff00000 	.word	0x3ff00000

08006e04 <_strtod_l>:
 8006e04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006e06:	001d      	movs	r5, r3
 8006e08:	2300      	movs	r3, #0
 8006e0a:	b0a5      	sub	sp, #148	; 0x94
 8006e0c:	9320      	str	r3, [sp, #128]	; 0x80
 8006e0e:	4bac      	ldr	r3, [pc, #688]	; (80070c0 <_strtod_l+0x2bc>)
 8006e10:	9005      	str	r0, [sp, #20]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	9108      	str	r1, [sp, #32]
 8006e16:	0018      	movs	r0, r3
 8006e18:	9307      	str	r3, [sp, #28]
 8006e1a:	921b      	str	r2, [sp, #108]	; 0x6c
 8006e1c:	f7f9 f972 	bl	8000104 <strlen>
 8006e20:	2600      	movs	r6, #0
 8006e22:	0004      	movs	r4, r0
 8006e24:	2700      	movs	r7, #0
 8006e26:	9b08      	ldr	r3, [sp, #32]
 8006e28:	931f      	str	r3, [sp, #124]	; 0x7c
 8006e2a:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8006e2c:	7813      	ldrb	r3, [r2, #0]
 8006e2e:	2b2b      	cmp	r3, #43	; 0x2b
 8006e30:	d058      	beq.n	8006ee4 <_strtod_l+0xe0>
 8006e32:	d844      	bhi.n	8006ebe <_strtod_l+0xba>
 8006e34:	2b0d      	cmp	r3, #13
 8006e36:	d83d      	bhi.n	8006eb4 <_strtod_l+0xb0>
 8006e38:	2b08      	cmp	r3, #8
 8006e3a:	d83d      	bhi.n	8006eb8 <_strtod_l+0xb4>
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d047      	beq.n	8006ed0 <_strtod_l+0xcc>
 8006e40:	2300      	movs	r3, #0
 8006e42:	930e      	str	r3, [sp, #56]	; 0x38
 8006e44:	2200      	movs	r2, #0
 8006e46:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006e48:	920a      	str	r2, [sp, #40]	; 0x28
 8006e4a:	9306      	str	r3, [sp, #24]
 8006e4c:	781b      	ldrb	r3, [r3, #0]
 8006e4e:	2b30      	cmp	r3, #48	; 0x30
 8006e50:	d000      	beq.n	8006e54 <_strtod_l+0x50>
 8006e52:	e07f      	b.n	8006f54 <_strtod_l+0x150>
 8006e54:	9b06      	ldr	r3, [sp, #24]
 8006e56:	3220      	adds	r2, #32
 8006e58:	785b      	ldrb	r3, [r3, #1]
 8006e5a:	4393      	bics	r3, r2
 8006e5c:	2b58      	cmp	r3, #88	; 0x58
 8006e5e:	d000      	beq.n	8006e62 <_strtod_l+0x5e>
 8006e60:	e06e      	b.n	8006f40 <_strtod_l+0x13c>
 8006e62:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006e64:	9502      	str	r5, [sp, #8]
 8006e66:	9301      	str	r3, [sp, #4]
 8006e68:	ab20      	add	r3, sp, #128	; 0x80
 8006e6a:	9300      	str	r3, [sp, #0]
 8006e6c:	4a95      	ldr	r2, [pc, #596]	; (80070c4 <_strtod_l+0x2c0>)
 8006e6e:	ab21      	add	r3, sp, #132	; 0x84
 8006e70:	9805      	ldr	r0, [sp, #20]
 8006e72:	a91f      	add	r1, sp, #124	; 0x7c
 8006e74:	f001 fd84 	bl	8008980 <__gethex>
 8006e78:	2307      	movs	r3, #7
 8006e7a:	0005      	movs	r5, r0
 8006e7c:	0004      	movs	r4, r0
 8006e7e:	401d      	ands	r5, r3
 8006e80:	4218      	tst	r0, r3
 8006e82:	d006      	beq.n	8006e92 <_strtod_l+0x8e>
 8006e84:	2d06      	cmp	r5, #6
 8006e86:	d12f      	bne.n	8006ee8 <_strtod_l+0xe4>
 8006e88:	9b06      	ldr	r3, [sp, #24]
 8006e8a:	3301      	adds	r3, #1
 8006e8c:	931f      	str	r3, [sp, #124]	; 0x7c
 8006e8e:	2300      	movs	r3, #0
 8006e90:	930e      	str	r3, [sp, #56]	; 0x38
 8006e92:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d002      	beq.n	8006e9e <_strtod_l+0x9a>
 8006e98:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006e9a:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8006e9c:	601a      	str	r2, [r3, #0]
 8006e9e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d01c      	beq.n	8006ede <_strtod_l+0xda>
 8006ea4:	2380      	movs	r3, #128	; 0x80
 8006ea6:	0032      	movs	r2, r6
 8006ea8:	061b      	lsls	r3, r3, #24
 8006eaa:	18fb      	adds	r3, r7, r3
 8006eac:	0010      	movs	r0, r2
 8006eae:	0019      	movs	r1, r3
 8006eb0:	b025      	add	sp, #148	; 0x94
 8006eb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006eb4:	2b20      	cmp	r3, #32
 8006eb6:	d1c3      	bne.n	8006e40 <_strtod_l+0x3c>
 8006eb8:	3201      	adds	r2, #1
 8006eba:	921f      	str	r2, [sp, #124]	; 0x7c
 8006ebc:	e7b5      	b.n	8006e2a <_strtod_l+0x26>
 8006ebe:	2b2d      	cmp	r3, #45	; 0x2d
 8006ec0:	d1be      	bne.n	8006e40 <_strtod_l+0x3c>
 8006ec2:	3b2c      	subs	r3, #44	; 0x2c
 8006ec4:	930e      	str	r3, [sp, #56]	; 0x38
 8006ec6:	1c53      	adds	r3, r2, #1
 8006ec8:	931f      	str	r3, [sp, #124]	; 0x7c
 8006eca:	7853      	ldrb	r3, [r2, #1]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d1b9      	bne.n	8006e44 <_strtod_l+0x40>
 8006ed0:	9b08      	ldr	r3, [sp, #32]
 8006ed2:	931f      	str	r3, [sp, #124]	; 0x7c
 8006ed4:	2300      	movs	r3, #0
 8006ed6:	930e      	str	r3, [sp, #56]	; 0x38
 8006ed8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d1dc      	bne.n	8006e98 <_strtod_l+0x94>
 8006ede:	0032      	movs	r2, r6
 8006ee0:	003b      	movs	r3, r7
 8006ee2:	e7e3      	b.n	8006eac <_strtod_l+0xa8>
 8006ee4:	2300      	movs	r3, #0
 8006ee6:	e7ed      	b.n	8006ec4 <_strtod_l+0xc0>
 8006ee8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006eea:	2a00      	cmp	r2, #0
 8006eec:	d007      	beq.n	8006efe <_strtod_l+0xfa>
 8006eee:	2135      	movs	r1, #53	; 0x35
 8006ef0:	a822      	add	r0, sp, #136	; 0x88
 8006ef2:	f002 fd08 	bl	8009906 <__copybits>
 8006ef6:	9920      	ldr	r1, [sp, #128]	; 0x80
 8006ef8:	9805      	ldr	r0, [sp, #20]
 8006efa:	f002 f8c3 	bl	8009084 <_Bfree>
 8006efe:	1e68      	subs	r0, r5, #1
 8006f00:	2804      	cmp	r0, #4
 8006f02:	d806      	bhi.n	8006f12 <_strtod_l+0x10e>
 8006f04:	f7f9 f906 	bl	8000114 <__gnu_thumb1_case_uqi>
 8006f08:	1816030b 	.word	0x1816030b
 8006f0c:	0b          	.byte	0x0b
 8006f0d:	00          	.byte	0x00
 8006f0e:	9e22      	ldr	r6, [sp, #136]	; 0x88
 8006f10:	9f23      	ldr	r7, [sp, #140]	; 0x8c
 8006f12:	0723      	lsls	r3, r4, #28
 8006f14:	d5bd      	bpl.n	8006e92 <_strtod_l+0x8e>
 8006f16:	2380      	movs	r3, #128	; 0x80
 8006f18:	061b      	lsls	r3, r3, #24
 8006f1a:	431f      	orrs	r7, r3
 8006f1c:	e7b9      	b.n	8006e92 <_strtod_l+0x8e>
 8006f1e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006f20:	4a69      	ldr	r2, [pc, #420]	; (80070c8 <_strtod_l+0x2c4>)
 8006f22:	496a      	ldr	r1, [pc, #424]	; (80070cc <_strtod_l+0x2c8>)
 8006f24:	401a      	ands	r2, r3
 8006f26:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006f28:	9e22      	ldr	r6, [sp, #136]	; 0x88
 8006f2a:	185b      	adds	r3, r3, r1
 8006f2c:	051b      	lsls	r3, r3, #20
 8006f2e:	431a      	orrs	r2, r3
 8006f30:	0017      	movs	r7, r2
 8006f32:	e7ee      	b.n	8006f12 <_strtod_l+0x10e>
 8006f34:	4f66      	ldr	r7, [pc, #408]	; (80070d0 <_strtod_l+0x2cc>)
 8006f36:	e7ec      	b.n	8006f12 <_strtod_l+0x10e>
 8006f38:	2601      	movs	r6, #1
 8006f3a:	4f66      	ldr	r7, [pc, #408]	; (80070d4 <_strtod_l+0x2d0>)
 8006f3c:	4276      	negs	r6, r6
 8006f3e:	e7e8      	b.n	8006f12 <_strtod_l+0x10e>
 8006f40:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006f42:	1c5a      	adds	r2, r3, #1
 8006f44:	921f      	str	r2, [sp, #124]	; 0x7c
 8006f46:	785b      	ldrb	r3, [r3, #1]
 8006f48:	2b30      	cmp	r3, #48	; 0x30
 8006f4a:	d0f9      	beq.n	8006f40 <_strtod_l+0x13c>
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d0a0      	beq.n	8006e92 <_strtod_l+0x8e>
 8006f50:	2301      	movs	r3, #1
 8006f52:	930a      	str	r3, [sp, #40]	; 0x28
 8006f54:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006f56:	220a      	movs	r2, #10
 8006f58:	9310      	str	r3, [sp, #64]	; 0x40
 8006f5a:	2300      	movs	r3, #0
 8006f5c:	930f      	str	r3, [sp, #60]	; 0x3c
 8006f5e:	930b      	str	r3, [sp, #44]	; 0x2c
 8006f60:	9309      	str	r3, [sp, #36]	; 0x24
 8006f62:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8006f64:	7805      	ldrb	r5, [r0, #0]
 8006f66:	002b      	movs	r3, r5
 8006f68:	3b30      	subs	r3, #48	; 0x30
 8006f6a:	b2d9      	uxtb	r1, r3
 8006f6c:	2909      	cmp	r1, #9
 8006f6e:	d927      	bls.n	8006fc0 <_strtod_l+0x1bc>
 8006f70:	0022      	movs	r2, r4
 8006f72:	9907      	ldr	r1, [sp, #28]
 8006f74:	f002 ff94 	bl	8009ea0 <strncmp>
 8006f78:	2800      	cmp	r0, #0
 8006f7a:	d033      	beq.n	8006fe4 <_strtod_l+0x1e0>
 8006f7c:	2000      	movs	r0, #0
 8006f7e:	002b      	movs	r3, r5
 8006f80:	4684      	mov	ip, r0
 8006f82:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006f84:	900c      	str	r0, [sp, #48]	; 0x30
 8006f86:	9206      	str	r2, [sp, #24]
 8006f88:	2220      	movs	r2, #32
 8006f8a:	0019      	movs	r1, r3
 8006f8c:	4391      	bics	r1, r2
 8006f8e:	000a      	movs	r2, r1
 8006f90:	2100      	movs	r1, #0
 8006f92:	9107      	str	r1, [sp, #28]
 8006f94:	2a45      	cmp	r2, #69	; 0x45
 8006f96:	d000      	beq.n	8006f9a <_strtod_l+0x196>
 8006f98:	e0c5      	b.n	8007126 <_strtod_l+0x322>
 8006f9a:	9b06      	ldr	r3, [sp, #24]
 8006f9c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006f9e:	4303      	orrs	r3, r0
 8006fa0:	4313      	orrs	r3, r2
 8006fa2:	428b      	cmp	r3, r1
 8006fa4:	d094      	beq.n	8006ed0 <_strtod_l+0xcc>
 8006fa6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006fa8:	9308      	str	r3, [sp, #32]
 8006faa:	3301      	adds	r3, #1
 8006fac:	931f      	str	r3, [sp, #124]	; 0x7c
 8006fae:	9b08      	ldr	r3, [sp, #32]
 8006fb0:	785b      	ldrb	r3, [r3, #1]
 8006fb2:	2b2b      	cmp	r3, #43	; 0x2b
 8006fb4:	d076      	beq.n	80070a4 <_strtod_l+0x2a0>
 8006fb6:	000c      	movs	r4, r1
 8006fb8:	2b2d      	cmp	r3, #45	; 0x2d
 8006fba:	d179      	bne.n	80070b0 <_strtod_l+0x2ac>
 8006fbc:	2401      	movs	r4, #1
 8006fbe:	e072      	b.n	80070a6 <_strtod_l+0x2a2>
 8006fc0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006fc2:	2908      	cmp	r1, #8
 8006fc4:	dc09      	bgt.n	8006fda <_strtod_l+0x1d6>
 8006fc6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006fc8:	4351      	muls	r1, r2
 8006fca:	185b      	adds	r3, r3, r1
 8006fcc:	930b      	str	r3, [sp, #44]	; 0x2c
 8006fce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006fd0:	3001      	adds	r0, #1
 8006fd2:	3301      	adds	r3, #1
 8006fd4:	9309      	str	r3, [sp, #36]	; 0x24
 8006fd6:	901f      	str	r0, [sp, #124]	; 0x7c
 8006fd8:	e7c3      	b.n	8006f62 <_strtod_l+0x15e>
 8006fda:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006fdc:	4351      	muls	r1, r2
 8006fde:	185b      	adds	r3, r3, r1
 8006fe0:	930f      	str	r3, [sp, #60]	; 0x3c
 8006fe2:	e7f4      	b.n	8006fce <_strtod_l+0x1ca>
 8006fe4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006fe6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006fe8:	191c      	adds	r4, r3, r4
 8006fea:	941f      	str	r4, [sp, #124]	; 0x7c
 8006fec:	7823      	ldrb	r3, [r4, #0]
 8006fee:	2a00      	cmp	r2, #0
 8006ff0:	d039      	beq.n	8007066 <_strtod_l+0x262>
 8006ff2:	900c      	str	r0, [sp, #48]	; 0x30
 8006ff4:	9206      	str	r2, [sp, #24]
 8006ff6:	001a      	movs	r2, r3
 8006ff8:	3a30      	subs	r2, #48	; 0x30
 8006ffa:	2a09      	cmp	r2, #9
 8006ffc:	d912      	bls.n	8007024 <_strtod_l+0x220>
 8006ffe:	2201      	movs	r2, #1
 8007000:	4694      	mov	ip, r2
 8007002:	e7c1      	b.n	8006f88 <_strtod_l+0x184>
 8007004:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007006:	3001      	adds	r0, #1
 8007008:	1c5a      	adds	r2, r3, #1
 800700a:	921f      	str	r2, [sp, #124]	; 0x7c
 800700c:	785b      	ldrb	r3, [r3, #1]
 800700e:	2b30      	cmp	r3, #48	; 0x30
 8007010:	d0f8      	beq.n	8007004 <_strtod_l+0x200>
 8007012:	001a      	movs	r2, r3
 8007014:	3a31      	subs	r2, #49	; 0x31
 8007016:	2a08      	cmp	r2, #8
 8007018:	d83f      	bhi.n	800709a <_strtod_l+0x296>
 800701a:	900c      	str	r0, [sp, #48]	; 0x30
 800701c:	2000      	movs	r0, #0
 800701e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8007020:	9006      	str	r0, [sp, #24]
 8007022:	9210      	str	r2, [sp, #64]	; 0x40
 8007024:	001a      	movs	r2, r3
 8007026:	1c41      	adds	r1, r0, #1
 8007028:	3a30      	subs	r2, #48	; 0x30
 800702a:	2b30      	cmp	r3, #48	; 0x30
 800702c:	d015      	beq.n	800705a <_strtod_l+0x256>
 800702e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007030:	185b      	adds	r3, r3, r1
 8007032:	210a      	movs	r1, #10
 8007034:	930c      	str	r3, [sp, #48]	; 0x30
 8007036:	9b06      	ldr	r3, [sp, #24]
 8007038:	18c4      	adds	r4, r0, r3
 800703a:	42a3      	cmp	r3, r4
 800703c:	d115      	bne.n	800706a <_strtod_l+0x266>
 800703e:	9906      	ldr	r1, [sp, #24]
 8007040:	9b06      	ldr	r3, [sp, #24]
 8007042:	3101      	adds	r1, #1
 8007044:	1809      	adds	r1, r1, r0
 8007046:	181b      	adds	r3, r3, r0
 8007048:	9106      	str	r1, [sp, #24]
 800704a:	2b08      	cmp	r3, #8
 800704c:	dc1b      	bgt.n	8007086 <_strtod_l+0x282>
 800704e:	230a      	movs	r3, #10
 8007050:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007052:	434b      	muls	r3, r1
 8007054:	2100      	movs	r1, #0
 8007056:	18d3      	adds	r3, r2, r3
 8007058:	930b      	str	r3, [sp, #44]	; 0x2c
 800705a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800705c:	0008      	movs	r0, r1
 800705e:	1c5a      	adds	r2, r3, #1
 8007060:	921f      	str	r2, [sp, #124]	; 0x7c
 8007062:	785b      	ldrb	r3, [r3, #1]
 8007064:	e7c7      	b.n	8006ff6 <_strtod_l+0x1f2>
 8007066:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007068:	e7d1      	b.n	800700e <_strtod_l+0x20a>
 800706a:	2b08      	cmp	r3, #8
 800706c:	dc04      	bgt.n	8007078 <_strtod_l+0x274>
 800706e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8007070:	434d      	muls	r5, r1
 8007072:	950b      	str	r5, [sp, #44]	; 0x2c
 8007074:	3301      	adds	r3, #1
 8007076:	e7e0      	b.n	800703a <_strtod_l+0x236>
 8007078:	1c5d      	adds	r5, r3, #1
 800707a:	2d10      	cmp	r5, #16
 800707c:	dcfa      	bgt.n	8007074 <_strtod_l+0x270>
 800707e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007080:	434d      	muls	r5, r1
 8007082:	950f      	str	r5, [sp, #60]	; 0x3c
 8007084:	e7f6      	b.n	8007074 <_strtod_l+0x270>
 8007086:	9b06      	ldr	r3, [sp, #24]
 8007088:	2100      	movs	r1, #0
 800708a:	2b10      	cmp	r3, #16
 800708c:	dce5      	bgt.n	800705a <_strtod_l+0x256>
 800708e:	230a      	movs	r3, #10
 8007090:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8007092:	4343      	muls	r3, r0
 8007094:	18d3      	adds	r3, r2, r3
 8007096:	930f      	str	r3, [sp, #60]	; 0x3c
 8007098:	e7df      	b.n	800705a <_strtod_l+0x256>
 800709a:	2200      	movs	r2, #0
 800709c:	920c      	str	r2, [sp, #48]	; 0x30
 800709e:	9206      	str	r2, [sp, #24]
 80070a0:	3201      	adds	r2, #1
 80070a2:	e7ad      	b.n	8007000 <_strtod_l+0x1fc>
 80070a4:	2400      	movs	r4, #0
 80070a6:	9b08      	ldr	r3, [sp, #32]
 80070a8:	3302      	adds	r3, #2
 80070aa:	931f      	str	r3, [sp, #124]	; 0x7c
 80070ac:	9b08      	ldr	r3, [sp, #32]
 80070ae:	789b      	ldrb	r3, [r3, #2]
 80070b0:	001a      	movs	r2, r3
 80070b2:	3a30      	subs	r2, #48	; 0x30
 80070b4:	2a09      	cmp	r2, #9
 80070b6:	d913      	bls.n	80070e0 <_strtod_l+0x2dc>
 80070b8:	9a08      	ldr	r2, [sp, #32]
 80070ba:	921f      	str	r2, [sp, #124]	; 0x7c
 80070bc:	2200      	movs	r2, #0
 80070be:	e031      	b.n	8007124 <_strtod_l+0x320>
 80070c0:	0800af90 	.word	0x0800af90
 80070c4:	0800ad48 	.word	0x0800ad48
 80070c8:	ffefffff 	.word	0xffefffff
 80070cc:	00000433 	.word	0x00000433
 80070d0:	7ff00000 	.word	0x7ff00000
 80070d4:	7fffffff 	.word	0x7fffffff
 80070d8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80070da:	1c5a      	adds	r2, r3, #1
 80070dc:	921f      	str	r2, [sp, #124]	; 0x7c
 80070de:	785b      	ldrb	r3, [r3, #1]
 80070e0:	2b30      	cmp	r3, #48	; 0x30
 80070e2:	d0f9      	beq.n	80070d8 <_strtod_l+0x2d4>
 80070e4:	2200      	movs	r2, #0
 80070e6:	9207      	str	r2, [sp, #28]
 80070e8:	001a      	movs	r2, r3
 80070ea:	3a31      	subs	r2, #49	; 0x31
 80070ec:	2a08      	cmp	r2, #8
 80070ee:	d81a      	bhi.n	8007126 <_strtod_l+0x322>
 80070f0:	3b30      	subs	r3, #48	; 0x30
 80070f2:	001a      	movs	r2, r3
 80070f4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80070f6:	9307      	str	r3, [sp, #28]
 80070f8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80070fa:	1c59      	adds	r1, r3, #1
 80070fc:	911f      	str	r1, [sp, #124]	; 0x7c
 80070fe:	785b      	ldrb	r3, [r3, #1]
 8007100:	001d      	movs	r5, r3
 8007102:	3d30      	subs	r5, #48	; 0x30
 8007104:	2d09      	cmp	r5, #9
 8007106:	d939      	bls.n	800717c <_strtod_l+0x378>
 8007108:	9d07      	ldr	r5, [sp, #28]
 800710a:	1b49      	subs	r1, r1, r5
 800710c:	4db0      	ldr	r5, [pc, #704]	; (80073d0 <_strtod_l+0x5cc>)
 800710e:	9507      	str	r5, [sp, #28]
 8007110:	2908      	cmp	r1, #8
 8007112:	dc03      	bgt.n	800711c <_strtod_l+0x318>
 8007114:	9207      	str	r2, [sp, #28]
 8007116:	42aa      	cmp	r2, r5
 8007118:	dd00      	ble.n	800711c <_strtod_l+0x318>
 800711a:	9507      	str	r5, [sp, #28]
 800711c:	2c00      	cmp	r4, #0
 800711e:	d002      	beq.n	8007126 <_strtod_l+0x322>
 8007120:	9a07      	ldr	r2, [sp, #28]
 8007122:	4252      	negs	r2, r2
 8007124:	9207      	str	r2, [sp, #28]
 8007126:	9a06      	ldr	r2, [sp, #24]
 8007128:	2a00      	cmp	r2, #0
 800712a:	d14b      	bne.n	80071c4 <_strtod_l+0x3c0>
 800712c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800712e:	4310      	orrs	r0, r2
 8007130:	d000      	beq.n	8007134 <_strtod_l+0x330>
 8007132:	e6ae      	b.n	8006e92 <_strtod_l+0x8e>
 8007134:	4662      	mov	r2, ip
 8007136:	2a00      	cmp	r2, #0
 8007138:	d000      	beq.n	800713c <_strtod_l+0x338>
 800713a:	e6c9      	b.n	8006ed0 <_strtod_l+0xcc>
 800713c:	2b69      	cmp	r3, #105	; 0x69
 800713e:	d025      	beq.n	800718c <_strtod_l+0x388>
 8007140:	dc21      	bgt.n	8007186 <_strtod_l+0x382>
 8007142:	2b49      	cmp	r3, #73	; 0x49
 8007144:	d022      	beq.n	800718c <_strtod_l+0x388>
 8007146:	2b4e      	cmp	r3, #78	; 0x4e
 8007148:	d000      	beq.n	800714c <_strtod_l+0x348>
 800714a:	e6c1      	b.n	8006ed0 <_strtod_l+0xcc>
 800714c:	49a1      	ldr	r1, [pc, #644]	; (80073d4 <_strtod_l+0x5d0>)
 800714e:	a81f      	add	r0, sp, #124	; 0x7c
 8007150:	f001 fe64 	bl	8008e1c <__match>
 8007154:	2800      	cmp	r0, #0
 8007156:	d100      	bne.n	800715a <_strtod_l+0x356>
 8007158:	e6ba      	b.n	8006ed0 <_strtod_l+0xcc>
 800715a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800715c:	781b      	ldrb	r3, [r3, #0]
 800715e:	2b28      	cmp	r3, #40	; 0x28
 8007160:	d12a      	bne.n	80071b8 <_strtod_l+0x3b4>
 8007162:	499d      	ldr	r1, [pc, #628]	; (80073d8 <_strtod_l+0x5d4>)
 8007164:	aa22      	add	r2, sp, #136	; 0x88
 8007166:	a81f      	add	r0, sp, #124	; 0x7c
 8007168:	f001 fe6c 	bl	8008e44 <__hexnan>
 800716c:	2805      	cmp	r0, #5
 800716e:	d123      	bne.n	80071b8 <_strtod_l+0x3b4>
 8007170:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007172:	4a9a      	ldr	r2, [pc, #616]	; (80073dc <_strtod_l+0x5d8>)
 8007174:	9e22      	ldr	r6, [sp, #136]	; 0x88
 8007176:	431a      	orrs	r2, r3
 8007178:	0017      	movs	r7, r2
 800717a:	e68a      	b.n	8006e92 <_strtod_l+0x8e>
 800717c:	210a      	movs	r1, #10
 800717e:	434a      	muls	r2, r1
 8007180:	18d2      	adds	r2, r2, r3
 8007182:	3a30      	subs	r2, #48	; 0x30
 8007184:	e7b8      	b.n	80070f8 <_strtod_l+0x2f4>
 8007186:	2b6e      	cmp	r3, #110	; 0x6e
 8007188:	d0e0      	beq.n	800714c <_strtod_l+0x348>
 800718a:	e6a1      	b.n	8006ed0 <_strtod_l+0xcc>
 800718c:	4994      	ldr	r1, [pc, #592]	; (80073e0 <_strtod_l+0x5dc>)
 800718e:	a81f      	add	r0, sp, #124	; 0x7c
 8007190:	f001 fe44 	bl	8008e1c <__match>
 8007194:	2800      	cmp	r0, #0
 8007196:	d100      	bne.n	800719a <_strtod_l+0x396>
 8007198:	e69a      	b.n	8006ed0 <_strtod_l+0xcc>
 800719a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800719c:	4991      	ldr	r1, [pc, #580]	; (80073e4 <_strtod_l+0x5e0>)
 800719e:	3b01      	subs	r3, #1
 80071a0:	a81f      	add	r0, sp, #124	; 0x7c
 80071a2:	931f      	str	r3, [sp, #124]	; 0x7c
 80071a4:	f001 fe3a 	bl	8008e1c <__match>
 80071a8:	2800      	cmp	r0, #0
 80071aa:	d102      	bne.n	80071b2 <_strtod_l+0x3ae>
 80071ac:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80071ae:	3301      	adds	r3, #1
 80071b0:	931f      	str	r3, [sp, #124]	; 0x7c
 80071b2:	2600      	movs	r6, #0
 80071b4:	4f89      	ldr	r7, [pc, #548]	; (80073dc <_strtod_l+0x5d8>)
 80071b6:	e66c      	b.n	8006e92 <_strtod_l+0x8e>
 80071b8:	488b      	ldr	r0, [pc, #556]	; (80073e8 <_strtod_l+0x5e4>)
 80071ba:	f002 fe59 	bl	8009e70 <nan>
 80071be:	0006      	movs	r6, r0
 80071c0:	000f      	movs	r7, r1
 80071c2:	e666      	b.n	8006e92 <_strtod_l+0x8e>
 80071c4:	9b07      	ldr	r3, [sp, #28]
 80071c6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80071c8:	1a9b      	subs	r3, r3, r2
 80071ca:	930a      	str	r3, [sp, #40]	; 0x28
 80071cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d101      	bne.n	80071d6 <_strtod_l+0x3d2>
 80071d2:	9b06      	ldr	r3, [sp, #24]
 80071d4:	9309      	str	r3, [sp, #36]	; 0x24
 80071d6:	9c06      	ldr	r4, [sp, #24]
 80071d8:	2c10      	cmp	r4, #16
 80071da:	dd00      	ble.n	80071de <_strtod_l+0x3da>
 80071dc:	2410      	movs	r4, #16
 80071de:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80071e0:	f7fb fcaa 	bl	8002b38 <__aeabi_ui2d>
 80071e4:	9b06      	ldr	r3, [sp, #24]
 80071e6:	0006      	movs	r6, r0
 80071e8:	000f      	movs	r7, r1
 80071ea:	2b09      	cmp	r3, #9
 80071ec:	dd15      	ble.n	800721a <_strtod_l+0x416>
 80071ee:	0022      	movs	r2, r4
 80071f0:	4b7e      	ldr	r3, [pc, #504]	; (80073ec <_strtod_l+0x5e8>)
 80071f2:	3a09      	subs	r2, #9
 80071f4:	00d2      	lsls	r2, r2, #3
 80071f6:	189b      	adds	r3, r3, r2
 80071f8:	681a      	ldr	r2, [r3, #0]
 80071fa:	685b      	ldr	r3, [r3, #4]
 80071fc:	f7fa fe1a 	bl	8001e34 <__aeabi_dmul>
 8007200:	0006      	movs	r6, r0
 8007202:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8007204:	000f      	movs	r7, r1
 8007206:	f7fb fc97 	bl	8002b38 <__aeabi_ui2d>
 800720a:	0002      	movs	r2, r0
 800720c:	000b      	movs	r3, r1
 800720e:	0030      	movs	r0, r6
 8007210:	0039      	movs	r1, r7
 8007212:	f7f9 fed1 	bl	8000fb8 <__aeabi_dadd>
 8007216:	0006      	movs	r6, r0
 8007218:	000f      	movs	r7, r1
 800721a:	9b06      	ldr	r3, [sp, #24]
 800721c:	2b0f      	cmp	r3, #15
 800721e:	dc39      	bgt.n	8007294 <_strtod_l+0x490>
 8007220:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007222:	2b00      	cmp	r3, #0
 8007224:	d100      	bne.n	8007228 <_strtod_l+0x424>
 8007226:	e634      	b.n	8006e92 <_strtod_l+0x8e>
 8007228:	dd24      	ble.n	8007274 <_strtod_l+0x470>
 800722a:	2b16      	cmp	r3, #22
 800722c:	dc09      	bgt.n	8007242 <_strtod_l+0x43e>
 800722e:	496f      	ldr	r1, [pc, #444]	; (80073ec <_strtod_l+0x5e8>)
 8007230:	00db      	lsls	r3, r3, #3
 8007232:	18c9      	adds	r1, r1, r3
 8007234:	0032      	movs	r2, r6
 8007236:	6808      	ldr	r0, [r1, #0]
 8007238:	6849      	ldr	r1, [r1, #4]
 800723a:	003b      	movs	r3, r7
 800723c:	f7fa fdfa 	bl	8001e34 <__aeabi_dmul>
 8007240:	e7bd      	b.n	80071be <_strtod_l+0x3ba>
 8007242:	2325      	movs	r3, #37	; 0x25
 8007244:	9a06      	ldr	r2, [sp, #24]
 8007246:	1a9b      	subs	r3, r3, r2
 8007248:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800724a:	4293      	cmp	r3, r2
 800724c:	db22      	blt.n	8007294 <_strtod_l+0x490>
 800724e:	240f      	movs	r4, #15
 8007250:	9b06      	ldr	r3, [sp, #24]
 8007252:	4d66      	ldr	r5, [pc, #408]	; (80073ec <_strtod_l+0x5e8>)
 8007254:	1ae4      	subs	r4, r4, r3
 8007256:	00e1      	lsls	r1, r4, #3
 8007258:	1869      	adds	r1, r5, r1
 800725a:	0032      	movs	r2, r6
 800725c:	6808      	ldr	r0, [r1, #0]
 800725e:	6849      	ldr	r1, [r1, #4]
 8007260:	003b      	movs	r3, r7
 8007262:	f7fa fde7 	bl	8001e34 <__aeabi_dmul>
 8007266:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007268:	1b1c      	subs	r4, r3, r4
 800726a:	00e4      	lsls	r4, r4, #3
 800726c:	192c      	adds	r4, r5, r4
 800726e:	6822      	ldr	r2, [r4, #0]
 8007270:	6863      	ldr	r3, [r4, #4]
 8007272:	e7e3      	b.n	800723c <_strtod_l+0x438>
 8007274:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007276:	3316      	adds	r3, #22
 8007278:	db0c      	blt.n	8007294 <_strtod_l+0x490>
 800727a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800727c:	9a07      	ldr	r2, [sp, #28]
 800727e:	0030      	movs	r0, r6
 8007280:	1a9a      	subs	r2, r3, r2
 8007282:	4b5a      	ldr	r3, [pc, #360]	; (80073ec <_strtod_l+0x5e8>)
 8007284:	00d2      	lsls	r2, r2, #3
 8007286:	189b      	adds	r3, r3, r2
 8007288:	0039      	movs	r1, r7
 800728a:	681a      	ldr	r2, [r3, #0]
 800728c:	685b      	ldr	r3, [r3, #4]
 800728e:	f7fa f9cf 	bl	8001630 <__aeabi_ddiv>
 8007292:	e794      	b.n	80071be <_strtod_l+0x3ba>
 8007294:	9b06      	ldr	r3, [sp, #24]
 8007296:	1b1c      	subs	r4, r3, r4
 8007298:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800729a:	18e4      	adds	r4, r4, r3
 800729c:	2c00      	cmp	r4, #0
 800729e:	dd72      	ble.n	8007386 <_strtod_l+0x582>
 80072a0:	230f      	movs	r3, #15
 80072a2:	0021      	movs	r1, r4
 80072a4:	4019      	ands	r1, r3
 80072a6:	421c      	tst	r4, r3
 80072a8:	d00a      	beq.n	80072c0 <_strtod_l+0x4bc>
 80072aa:	00cb      	lsls	r3, r1, #3
 80072ac:	494f      	ldr	r1, [pc, #316]	; (80073ec <_strtod_l+0x5e8>)
 80072ae:	0032      	movs	r2, r6
 80072b0:	18c9      	adds	r1, r1, r3
 80072b2:	6808      	ldr	r0, [r1, #0]
 80072b4:	6849      	ldr	r1, [r1, #4]
 80072b6:	003b      	movs	r3, r7
 80072b8:	f7fa fdbc 	bl	8001e34 <__aeabi_dmul>
 80072bc:	0006      	movs	r6, r0
 80072be:	000f      	movs	r7, r1
 80072c0:	230f      	movs	r3, #15
 80072c2:	439c      	bics	r4, r3
 80072c4:	d04a      	beq.n	800735c <_strtod_l+0x558>
 80072c6:	3326      	adds	r3, #38	; 0x26
 80072c8:	33ff      	adds	r3, #255	; 0xff
 80072ca:	429c      	cmp	r4, r3
 80072cc:	dd22      	ble.n	8007314 <_strtod_l+0x510>
 80072ce:	2300      	movs	r3, #0
 80072d0:	9306      	str	r3, [sp, #24]
 80072d2:	9307      	str	r3, [sp, #28]
 80072d4:	930b      	str	r3, [sp, #44]	; 0x2c
 80072d6:	9309      	str	r3, [sp, #36]	; 0x24
 80072d8:	2322      	movs	r3, #34	; 0x22
 80072da:	2600      	movs	r6, #0
 80072dc:	9a05      	ldr	r2, [sp, #20]
 80072de:	4f3f      	ldr	r7, [pc, #252]	; (80073dc <_strtod_l+0x5d8>)
 80072e0:	6013      	str	r3, [r2, #0]
 80072e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80072e4:	42b3      	cmp	r3, r6
 80072e6:	d100      	bne.n	80072ea <_strtod_l+0x4e6>
 80072e8:	e5d3      	b.n	8006e92 <_strtod_l+0x8e>
 80072ea:	9920      	ldr	r1, [sp, #128]	; 0x80
 80072ec:	9805      	ldr	r0, [sp, #20]
 80072ee:	f001 fec9 	bl	8009084 <_Bfree>
 80072f2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80072f4:	9805      	ldr	r0, [sp, #20]
 80072f6:	f001 fec5 	bl	8009084 <_Bfree>
 80072fa:	9907      	ldr	r1, [sp, #28]
 80072fc:	9805      	ldr	r0, [sp, #20]
 80072fe:	f001 fec1 	bl	8009084 <_Bfree>
 8007302:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007304:	9805      	ldr	r0, [sp, #20]
 8007306:	f001 febd 	bl	8009084 <_Bfree>
 800730a:	9906      	ldr	r1, [sp, #24]
 800730c:	9805      	ldr	r0, [sp, #20]
 800730e:	f001 feb9 	bl	8009084 <_Bfree>
 8007312:	e5be      	b.n	8006e92 <_strtod_l+0x8e>
 8007314:	2300      	movs	r3, #0
 8007316:	0030      	movs	r0, r6
 8007318:	0039      	movs	r1, r7
 800731a:	4d35      	ldr	r5, [pc, #212]	; (80073f0 <_strtod_l+0x5ec>)
 800731c:	1124      	asrs	r4, r4, #4
 800731e:	9308      	str	r3, [sp, #32]
 8007320:	2c01      	cmp	r4, #1
 8007322:	dc1e      	bgt.n	8007362 <_strtod_l+0x55e>
 8007324:	2b00      	cmp	r3, #0
 8007326:	d001      	beq.n	800732c <_strtod_l+0x528>
 8007328:	0006      	movs	r6, r0
 800732a:	000f      	movs	r7, r1
 800732c:	4b31      	ldr	r3, [pc, #196]	; (80073f4 <_strtod_l+0x5f0>)
 800732e:	0032      	movs	r2, r6
 8007330:	18ff      	adds	r7, r7, r3
 8007332:	9b08      	ldr	r3, [sp, #32]
 8007334:	00dd      	lsls	r5, r3, #3
 8007336:	4b2e      	ldr	r3, [pc, #184]	; (80073f0 <_strtod_l+0x5ec>)
 8007338:	195d      	adds	r5, r3, r5
 800733a:	6828      	ldr	r0, [r5, #0]
 800733c:	6869      	ldr	r1, [r5, #4]
 800733e:	003b      	movs	r3, r7
 8007340:	f7fa fd78 	bl	8001e34 <__aeabi_dmul>
 8007344:	4b25      	ldr	r3, [pc, #148]	; (80073dc <_strtod_l+0x5d8>)
 8007346:	4a2c      	ldr	r2, [pc, #176]	; (80073f8 <_strtod_l+0x5f4>)
 8007348:	0006      	movs	r6, r0
 800734a:	400b      	ands	r3, r1
 800734c:	4293      	cmp	r3, r2
 800734e:	d8be      	bhi.n	80072ce <_strtod_l+0x4ca>
 8007350:	4a2a      	ldr	r2, [pc, #168]	; (80073fc <_strtod_l+0x5f8>)
 8007352:	4293      	cmp	r3, r2
 8007354:	d913      	bls.n	800737e <_strtod_l+0x57a>
 8007356:	2601      	movs	r6, #1
 8007358:	4f29      	ldr	r7, [pc, #164]	; (8007400 <_strtod_l+0x5fc>)
 800735a:	4276      	negs	r6, r6
 800735c:	2300      	movs	r3, #0
 800735e:	9308      	str	r3, [sp, #32]
 8007360:	e087      	b.n	8007472 <_strtod_l+0x66e>
 8007362:	2201      	movs	r2, #1
 8007364:	4214      	tst	r4, r2
 8007366:	d004      	beq.n	8007372 <_strtod_l+0x56e>
 8007368:	682a      	ldr	r2, [r5, #0]
 800736a:	686b      	ldr	r3, [r5, #4]
 800736c:	f7fa fd62 	bl	8001e34 <__aeabi_dmul>
 8007370:	2301      	movs	r3, #1
 8007372:	9a08      	ldr	r2, [sp, #32]
 8007374:	1064      	asrs	r4, r4, #1
 8007376:	3201      	adds	r2, #1
 8007378:	9208      	str	r2, [sp, #32]
 800737a:	3508      	adds	r5, #8
 800737c:	e7d0      	b.n	8007320 <_strtod_l+0x51c>
 800737e:	23d4      	movs	r3, #212	; 0xd4
 8007380:	049b      	lsls	r3, r3, #18
 8007382:	18cf      	adds	r7, r1, r3
 8007384:	e7ea      	b.n	800735c <_strtod_l+0x558>
 8007386:	2c00      	cmp	r4, #0
 8007388:	d0e8      	beq.n	800735c <_strtod_l+0x558>
 800738a:	4264      	negs	r4, r4
 800738c:	220f      	movs	r2, #15
 800738e:	0023      	movs	r3, r4
 8007390:	4013      	ands	r3, r2
 8007392:	4214      	tst	r4, r2
 8007394:	d00a      	beq.n	80073ac <_strtod_l+0x5a8>
 8007396:	00da      	lsls	r2, r3, #3
 8007398:	4b14      	ldr	r3, [pc, #80]	; (80073ec <_strtod_l+0x5e8>)
 800739a:	0030      	movs	r0, r6
 800739c:	189b      	adds	r3, r3, r2
 800739e:	0039      	movs	r1, r7
 80073a0:	681a      	ldr	r2, [r3, #0]
 80073a2:	685b      	ldr	r3, [r3, #4]
 80073a4:	f7fa f944 	bl	8001630 <__aeabi_ddiv>
 80073a8:	0006      	movs	r6, r0
 80073aa:	000f      	movs	r7, r1
 80073ac:	1124      	asrs	r4, r4, #4
 80073ae:	d0d5      	beq.n	800735c <_strtod_l+0x558>
 80073b0:	2c1f      	cmp	r4, #31
 80073b2:	dd27      	ble.n	8007404 <_strtod_l+0x600>
 80073b4:	2300      	movs	r3, #0
 80073b6:	9306      	str	r3, [sp, #24]
 80073b8:	9307      	str	r3, [sp, #28]
 80073ba:	930b      	str	r3, [sp, #44]	; 0x2c
 80073bc:	9309      	str	r3, [sp, #36]	; 0x24
 80073be:	2322      	movs	r3, #34	; 0x22
 80073c0:	9a05      	ldr	r2, [sp, #20]
 80073c2:	2600      	movs	r6, #0
 80073c4:	6013      	str	r3, [r2, #0]
 80073c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80073c8:	2700      	movs	r7, #0
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d18d      	bne.n	80072ea <_strtod_l+0x4e6>
 80073ce:	e560      	b.n	8006e92 <_strtod_l+0x8e>
 80073d0:	00004e1f 	.word	0x00004e1f
 80073d4:	0800ad19 	.word	0x0800ad19
 80073d8:	0800ad5c 	.word	0x0800ad5c
 80073dc:	7ff00000 	.word	0x7ff00000
 80073e0:	0800ad11 	.word	0x0800ad11
 80073e4:	0800ae9c 	.word	0x0800ae9c
 80073e8:	0800b148 	.word	0x0800b148
 80073ec:	0800b028 	.word	0x0800b028
 80073f0:	0800b000 	.word	0x0800b000
 80073f4:	fcb00000 	.word	0xfcb00000
 80073f8:	7ca00000 	.word	0x7ca00000
 80073fc:	7c900000 	.word	0x7c900000
 8007400:	7fefffff 	.word	0x7fefffff
 8007404:	2310      	movs	r3, #16
 8007406:	0022      	movs	r2, r4
 8007408:	401a      	ands	r2, r3
 800740a:	9208      	str	r2, [sp, #32]
 800740c:	421c      	tst	r4, r3
 800740e:	d001      	beq.n	8007414 <_strtod_l+0x610>
 8007410:	335a      	adds	r3, #90	; 0x5a
 8007412:	9308      	str	r3, [sp, #32]
 8007414:	0030      	movs	r0, r6
 8007416:	0039      	movs	r1, r7
 8007418:	2300      	movs	r3, #0
 800741a:	4dc5      	ldr	r5, [pc, #788]	; (8007730 <_strtod_l+0x92c>)
 800741c:	2201      	movs	r2, #1
 800741e:	4214      	tst	r4, r2
 8007420:	d004      	beq.n	800742c <_strtod_l+0x628>
 8007422:	682a      	ldr	r2, [r5, #0]
 8007424:	686b      	ldr	r3, [r5, #4]
 8007426:	f7fa fd05 	bl	8001e34 <__aeabi_dmul>
 800742a:	2301      	movs	r3, #1
 800742c:	1064      	asrs	r4, r4, #1
 800742e:	3508      	adds	r5, #8
 8007430:	2c00      	cmp	r4, #0
 8007432:	d1f3      	bne.n	800741c <_strtod_l+0x618>
 8007434:	2b00      	cmp	r3, #0
 8007436:	d001      	beq.n	800743c <_strtod_l+0x638>
 8007438:	0006      	movs	r6, r0
 800743a:	000f      	movs	r7, r1
 800743c:	9b08      	ldr	r3, [sp, #32]
 800743e:	2b00      	cmp	r3, #0
 8007440:	d00f      	beq.n	8007462 <_strtod_l+0x65e>
 8007442:	236b      	movs	r3, #107	; 0x6b
 8007444:	007a      	lsls	r2, r7, #1
 8007446:	0d52      	lsrs	r2, r2, #21
 8007448:	0039      	movs	r1, r7
 800744a:	1a9b      	subs	r3, r3, r2
 800744c:	2b00      	cmp	r3, #0
 800744e:	dd08      	ble.n	8007462 <_strtod_l+0x65e>
 8007450:	2b1f      	cmp	r3, #31
 8007452:	dc00      	bgt.n	8007456 <_strtod_l+0x652>
 8007454:	e124      	b.n	80076a0 <_strtod_l+0x89c>
 8007456:	2600      	movs	r6, #0
 8007458:	2b34      	cmp	r3, #52	; 0x34
 800745a:	dc00      	bgt.n	800745e <_strtod_l+0x65a>
 800745c:	e119      	b.n	8007692 <_strtod_l+0x88e>
 800745e:	27dc      	movs	r7, #220	; 0xdc
 8007460:	04bf      	lsls	r7, r7, #18
 8007462:	2200      	movs	r2, #0
 8007464:	2300      	movs	r3, #0
 8007466:	0030      	movs	r0, r6
 8007468:	0039      	movs	r1, r7
 800746a:	f7f8 ffed 	bl	8000448 <__aeabi_dcmpeq>
 800746e:	2800      	cmp	r0, #0
 8007470:	d1a0      	bne.n	80073b4 <_strtod_l+0x5b0>
 8007472:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007474:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007476:	9300      	str	r3, [sp, #0]
 8007478:	9910      	ldr	r1, [sp, #64]	; 0x40
 800747a:	9b06      	ldr	r3, [sp, #24]
 800747c:	9805      	ldr	r0, [sp, #20]
 800747e:	f001 fe69 	bl	8009154 <__s2b>
 8007482:	900b      	str	r0, [sp, #44]	; 0x2c
 8007484:	2800      	cmp	r0, #0
 8007486:	d100      	bne.n	800748a <_strtod_l+0x686>
 8007488:	e721      	b.n	80072ce <_strtod_l+0x4ca>
 800748a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800748c:	9907      	ldr	r1, [sp, #28]
 800748e:	17da      	asrs	r2, r3, #31
 8007490:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007492:	1a5b      	subs	r3, r3, r1
 8007494:	401a      	ands	r2, r3
 8007496:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007498:	9215      	str	r2, [sp, #84]	; 0x54
 800749a:	43db      	mvns	r3, r3
 800749c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800749e:	17db      	asrs	r3, r3, #31
 80074a0:	401a      	ands	r2, r3
 80074a2:	2300      	movs	r3, #0
 80074a4:	921a      	str	r2, [sp, #104]	; 0x68
 80074a6:	9306      	str	r3, [sp, #24]
 80074a8:	9307      	str	r3, [sp, #28]
 80074aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80074ac:	9805      	ldr	r0, [sp, #20]
 80074ae:	6859      	ldr	r1, [r3, #4]
 80074b0:	f001 fda4 	bl	8008ffc <_Balloc>
 80074b4:	9009      	str	r0, [sp, #36]	; 0x24
 80074b6:	2800      	cmp	r0, #0
 80074b8:	d100      	bne.n	80074bc <_strtod_l+0x6b8>
 80074ba:	e70d      	b.n	80072d8 <_strtod_l+0x4d4>
 80074bc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80074be:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80074c0:	691b      	ldr	r3, [r3, #16]
 80074c2:	310c      	adds	r1, #12
 80074c4:	1c9a      	adds	r2, r3, #2
 80074c6:	0092      	lsls	r2, r2, #2
 80074c8:	300c      	adds	r0, #12
 80074ca:	930c      	str	r3, [sp, #48]	; 0x30
 80074cc:	f001 fd8d 	bl	8008fea <memcpy>
 80074d0:	ab22      	add	r3, sp, #136	; 0x88
 80074d2:	9301      	str	r3, [sp, #4]
 80074d4:	ab21      	add	r3, sp, #132	; 0x84
 80074d6:	9300      	str	r3, [sp, #0]
 80074d8:	0032      	movs	r2, r6
 80074da:	003b      	movs	r3, r7
 80074dc:	9805      	ldr	r0, [sp, #20]
 80074de:	9612      	str	r6, [sp, #72]	; 0x48
 80074e0:	9713      	str	r7, [sp, #76]	; 0x4c
 80074e2:	f002 f983 	bl	80097ec <__d2b>
 80074e6:	9020      	str	r0, [sp, #128]	; 0x80
 80074e8:	2800      	cmp	r0, #0
 80074ea:	d100      	bne.n	80074ee <_strtod_l+0x6ea>
 80074ec:	e6f4      	b.n	80072d8 <_strtod_l+0x4d4>
 80074ee:	2101      	movs	r1, #1
 80074f0:	9805      	ldr	r0, [sp, #20]
 80074f2:	f001 fec3 	bl	800927c <__i2b>
 80074f6:	9007      	str	r0, [sp, #28]
 80074f8:	2800      	cmp	r0, #0
 80074fa:	d100      	bne.n	80074fe <_strtod_l+0x6fa>
 80074fc:	e6ec      	b.n	80072d8 <_strtod_l+0x4d4>
 80074fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007500:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8007502:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8007504:	1ad4      	subs	r4, r2, r3
 8007506:	2b00      	cmp	r3, #0
 8007508:	db01      	blt.n	800750e <_strtod_l+0x70a>
 800750a:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 800750c:	195d      	adds	r5, r3, r5
 800750e:	9908      	ldr	r1, [sp, #32]
 8007510:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8007512:	1a5b      	subs	r3, r3, r1
 8007514:	2136      	movs	r1, #54	; 0x36
 8007516:	189b      	adds	r3, r3, r2
 8007518:	1a8a      	subs	r2, r1, r2
 800751a:	4986      	ldr	r1, [pc, #536]	; (8007734 <_strtod_l+0x930>)
 800751c:	2001      	movs	r0, #1
 800751e:	468c      	mov	ip, r1
 8007520:	2100      	movs	r1, #0
 8007522:	3b01      	subs	r3, #1
 8007524:	9110      	str	r1, [sp, #64]	; 0x40
 8007526:	9014      	str	r0, [sp, #80]	; 0x50
 8007528:	4563      	cmp	r3, ip
 800752a:	da07      	bge.n	800753c <_strtod_l+0x738>
 800752c:	4661      	mov	r1, ip
 800752e:	1ac9      	subs	r1, r1, r3
 8007530:	1a52      	subs	r2, r2, r1
 8007532:	291f      	cmp	r1, #31
 8007534:	dd00      	ble.n	8007538 <_strtod_l+0x734>
 8007536:	e0b8      	b.n	80076aa <_strtod_l+0x8a6>
 8007538:	4088      	lsls	r0, r1
 800753a:	9014      	str	r0, [sp, #80]	; 0x50
 800753c:	18ab      	adds	r3, r5, r2
 800753e:	930c      	str	r3, [sp, #48]	; 0x30
 8007540:	18a4      	adds	r4, r4, r2
 8007542:	9b08      	ldr	r3, [sp, #32]
 8007544:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007546:	191c      	adds	r4, r3, r4
 8007548:	002b      	movs	r3, r5
 800754a:	4295      	cmp	r5, r2
 800754c:	dd00      	ble.n	8007550 <_strtod_l+0x74c>
 800754e:	0013      	movs	r3, r2
 8007550:	42a3      	cmp	r3, r4
 8007552:	dd00      	ble.n	8007556 <_strtod_l+0x752>
 8007554:	0023      	movs	r3, r4
 8007556:	2b00      	cmp	r3, #0
 8007558:	dd04      	ble.n	8007564 <_strtod_l+0x760>
 800755a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800755c:	1ae4      	subs	r4, r4, r3
 800755e:	1ad2      	subs	r2, r2, r3
 8007560:	920c      	str	r2, [sp, #48]	; 0x30
 8007562:	1aed      	subs	r5, r5, r3
 8007564:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007566:	2b00      	cmp	r3, #0
 8007568:	dd17      	ble.n	800759a <_strtod_l+0x796>
 800756a:	001a      	movs	r2, r3
 800756c:	9907      	ldr	r1, [sp, #28]
 800756e:	9805      	ldr	r0, [sp, #20]
 8007570:	f001 ff4a 	bl	8009408 <__pow5mult>
 8007574:	9007      	str	r0, [sp, #28]
 8007576:	2800      	cmp	r0, #0
 8007578:	d100      	bne.n	800757c <_strtod_l+0x778>
 800757a:	e6ad      	b.n	80072d8 <_strtod_l+0x4d4>
 800757c:	0001      	movs	r1, r0
 800757e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007580:	9805      	ldr	r0, [sp, #20]
 8007582:	f001 fe91 	bl	80092a8 <__multiply>
 8007586:	900f      	str	r0, [sp, #60]	; 0x3c
 8007588:	2800      	cmp	r0, #0
 800758a:	d100      	bne.n	800758e <_strtod_l+0x78a>
 800758c:	e6a4      	b.n	80072d8 <_strtod_l+0x4d4>
 800758e:	9920      	ldr	r1, [sp, #128]	; 0x80
 8007590:	9805      	ldr	r0, [sp, #20]
 8007592:	f001 fd77 	bl	8009084 <_Bfree>
 8007596:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007598:	9320      	str	r3, [sp, #128]	; 0x80
 800759a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800759c:	2b00      	cmp	r3, #0
 800759e:	dd00      	ble.n	80075a2 <_strtod_l+0x79e>
 80075a0:	e089      	b.n	80076b6 <_strtod_l+0x8b2>
 80075a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	dd08      	ble.n	80075ba <_strtod_l+0x7b6>
 80075a8:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80075aa:	9909      	ldr	r1, [sp, #36]	; 0x24
 80075ac:	9805      	ldr	r0, [sp, #20]
 80075ae:	f001 ff2b 	bl	8009408 <__pow5mult>
 80075b2:	9009      	str	r0, [sp, #36]	; 0x24
 80075b4:	2800      	cmp	r0, #0
 80075b6:	d100      	bne.n	80075ba <_strtod_l+0x7b6>
 80075b8:	e68e      	b.n	80072d8 <_strtod_l+0x4d4>
 80075ba:	2c00      	cmp	r4, #0
 80075bc:	dd08      	ble.n	80075d0 <_strtod_l+0x7cc>
 80075be:	0022      	movs	r2, r4
 80075c0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80075c2:	9805      	ldr	r0, [sp, #20]
 80075c4:	f001 ff7c 	bl	80094c0 <__lshift>
 80075c8:	9009      	str	r0, [sp, #36]	; 0x24
 80075ca:	2800      	cmp	r0, #0
 80075cc:	d100      	bne.n	80075d0 <_strtod_l+0x7cc>
 80075ce:	e683      	b.n	80072d8 <_strtod_l+0x4d4>
 80075d0:	2d00      	cmp	r5, #0
 80075d2:	dd08      	ble.n	80075e6 <_strtod_l+0x7e2>
 80075d4:	002a      	movs	r2, r5
 80075d6:	9907      	ldr	r1, [sp, #28]
 80075d8:	9805      	ldr	r0, [sp, #20]
 80075da:	f001 ff71 	bl	80094c0 <__lshift>
 80075de:	9007      	str	r0, [sp, #28]
 80075e0:	2800      	cmp	r0, #0
 80075e2:	d100      	bne.n	80075e6 <_strtod_l+0x7e2>
 80075e4:	e678      	b.n	80072d8 <_strtod_l+0x4d4>
 80075e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80075e8:	9920      	ldr	r1, [sp, #128]	; 0x80
 80075ea:	9805      	ldr	r0, [sp, #20]
 80075ec:	f001 fff2 	bl	80095d4 <__mdiff>
 80075f0:	9006      	str	r0, [sp, #24]
 80075f2:	2800      	cmp	r0, #0
 80075f4:	d100      	bne.n	80075f8 <_strtod_l+0x7f4>
 80075f6:	e66f      	b.n	80072d8 <_strtod_l+0x4d4>
 80075f8:	2200      	movs	r2, #0
 80075fa:	68c3      	ldr	r3, [r0, #12]
 80075fc:	9907      	ldr	r1, [sp, #28]
 80075fe:	60c2      	str	r2, [r0, #12]
 8007600:	930f      	str	r3, [sp, #60]	; 0x3c
 8007602:	f001 ffcb 	bl	800959c <__mcmp>
 8007606:	2800      	cmp	r0, #0
 8007608:	da5f      	bge.n	80076ca <_strtod_l+0x8c6>
 800760a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800760c:	4333      	orrs	r3, r6
 800760e:	d000      	beq.n	8007612 <_strtod_l+0x80e>
 8007610:	e08a      	b.n	8007728 <_strtod_l+0x924>
 8007612:	033b      	lsls	r3, r7, #12
 8007614:	d000      	beq.n	8007618 <_strtod_l+0x814>
 8007616:	e087      	b.n	8007728 <_strtod_l+0x924>
 8007618:	22d6      	movs	r2, #214	; 0xd6
 800761a:	4b47      	ldr	r3, [pc, #284]	; (8007738 <_strtod_l+0x934>)
 800761c:	04d2      	lsls	r2, r2, #19
 800761e:	403b      	ands	r3, r7
 8007620:	4293      	cmp	r3, r2
 8007622:	d800      	bhi.n	8007626 <_strtod_l+0x822>
 8007624:	e080      	b.n	8007728 <_strtod_l+0x924>
 8007626:	9b06      	ldr	r3, [sp, #24]
 8007628:	695b      	ldr	r3, [r3, #20]
 800762a:	930a      	str	r3, [sp, #40]	; 0x28
 800762c:	2b00      	cmp	r3, #0
 800762e:	d104      	bne.n	800763a <_strtod_l+0x836>
 8007630:	9b06      	ldr	r3, [sp, #24]
 8007632:	691b      	ldr	r3, [r3, #16]
 8007634:	930a      	str	r3, [sp, #40]	; 0x28
 8007636:	2b01      	cmp	r3, #1
 8007638:	dd76      	ble.n	8007728 <_strtod_l+0x924>
 800763a:	9906      	ldr	r1, [sp, #24]
 800763c:	2201      	movs	r2, #1
 800763e:	9805      	ldr	r0, [sp, #20]
 8007640:	f001 ff3e 	bl	80094c0 <__lshift>
 8007644:	9907      	ldr	r1, [sp, #28]
 8007646:	9006      	str	r0, [sp, #24]
 8007648:	f001 ffa8 	bl	800959c <__mcmp>
 800764c:	2800      	cmp	r0, #0
 800764e:	dd6b      	ble.n	8007728 <_strtod_l+0x924>
 8007650:	9908      	ldr	r1, [sp, #32]
 8007652:	003b      	movs	r3, r7
 8007654:	4a38      	ldr	r2, [pc, #224]	; (8007738 <_strtod_l+0x934>)
 8007656:	2900      	cmp	r1, #0
 8007658:	d100      	bne.n	800765c <_strtod_l+0x858>
 800765a:	e092      	b.n	8007782 <_strtod_l+0x97e>
 800765c:	0011      	movs	r1, r2
 800765e:	20d6      	movs	r0, #214	; 0xd6
 8007660:	4039      	ands	r1, r7
 8007662:	04c0      	lsls	r0, r0, #19
 8007664:	4281      	cmp	r1, r0
 8007666:	dd00      	ble.n	800766a <_strtod_l+0x866>
 8007668:	e08b      	b.n	8007782 <_strtod_l+0x97e>
 800766a:	23dc      	movs	r3, #220	; 0xdc
 800766c:	049b      	lsls	r3, r3, #18
 800766e:	4299      	cmp	r1, r3
 8007670:	dc00      	bgt.n	8007674 <_strtod_l+0x870>
 8007672:	e6a4      	b.n	80073be <_strtod_l+0x5ba>
 8007674:	0030      	movs	r0, r6
 8007676:	0039      	movs	r1, r7
 8007678:	2200      	movs	r2, #0
 800767a:	4b30      	ldr	r3, [pc, #192]	; (800773c <_strtod_l+0x938>)
 800767c:	f7fa fbda 	bl	8001e34 <__aeabi_dmul>
 8007680:	0006      	movs	r6, r0
 8007682:	000f      	movs	r7, r1
 8007684:	4308      	orrs	r0, r1
 8007686:	d000      	beq.n	800768a <_strtod_l+0x886>
 8007688:	e62f      	b.n	80072ea <_strtod_l+0x4e6>
 800768a:	2322      	movs	r3, #34	; 0x22
 800768c:	9a05      	ldr	r2, [sp, #20]
 800768e:	6013      	str	r3, [r2, #0]
 8007690:	e62b      	b.n	80072ea <_strtod_l+0x4e6>
 8007692:	234b      	movs	r3, #75	; 0x4b
 8007694:	1a9a      	subs	r2, r3, r2
 8007696:	3b4c      	subs	r3, #76	; 0x4c
 8007698:	4093      	lsls	r3, r2
 800769a:	4019      	ands	r1, r3
 800769c:	000f      	movs	r7, r1
 800769e:	e6e0      	b.n	8007462 <_strtod_l+0x65e>
 80076a0:	2201      	movs	r2, #1
 80076a2:	4252      	negs	r2, r2
 80076a4:	409a      	lsls	r2, r3
 80076a6:	4016      	ands	r6, r2
 80076a8:	e6db      	b.n	8007462 <_strtod_l+0x65e>
 80076aa:	4925      	ldr	r1, [pc, #148]	; (8007740 <_strtod_l+0x93c>)
 80076ac:	1acb      	subs	r3, r1, r3
 80076ae:	0001      	movs	r1, r0
 80076b0:	4099      	lsls	r1, r3
 80076b2:	9110      	str	r1, [sp, #64]	; 0x40
 80076b4:	e741      	b.n	800753a <_strtod_l+0x736>
 80076b6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80076b8:	9920      	ldr	r1, [sp, #128]	; 0x80
 80076ba:	9805      	ldr	r0, [sp, #20]
 80076bc:	f001 ff00 	bl	80094c0 <__lshift>
 80076c0:	9020      	str	r0, [sp, #128]	; 0x80
 80076c2:	2800      	cmp	r0, #0
 80076c4:	d000      	beq.n	80076c8 <_strtod_l+0x8c4>
 80076c6:	e76c      	b.n	80075a2 <_strtod_l+0x79e>
 80076c8:	e606      	b.n	80072d8 <_strtod_l+0x4d4>
 80076ca:	970c      	str	r7, [sp, #48]	; 0x30
 80076cc:	2800      	cmp	r0, #0
 80076ce:	d176      	bne.n	80077be <_strtod_l+0x9ba>
 80076d0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80076d2:	033b      	lsls	r3, r7, #12
 80076d4:	0b1b      	lsrs	r3, r3, #12
 80076d6:	2a00      	cmp	r2, #0
 80076d8:	d038      	beq.n	800774c <_strtod_l+0x948>
 80076da:	4a1a      	ldr	r2, [pc, #104]	; (8007744 <_strtod_l+0x940>)
 80076dc:	4293      	cmp	r3, r2
 80076de:	d138      	bne.n	8007752 <_strtod_l+0x94e>
 80076e0:	2201      	movs	r2, #1
 80076e2:	9b08      	ldr	r3, [sp, #32]
 80076e4:	4252      	negs	r2, r2
 80076e6:	0031      	movs	r1, r6
 80076e8:	0010      	movs	r0, r2
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d00b      	beq.n	8007706 <_strtod_l+0x902>
 80076ee:	24d4      	movs	r4, #212	; 0xd4
 80076f0:	4b11      	ldr	r3, [pc, #68]	; (8007738 <_strtod_l+0x934>)
 80076f2:	0010      	movs	r0, r2
 80076f4:	403b      	ands	r3, r7
 80076f6:	04e4      	lsls	r4, r4, #19
 80076f8:	42a3      	cmp	r3, r4
 80076fa:	d804      	bhi.n	8007706 <_strtod_l+0x902>
 80076fc:	306c      	adds	r0, #108	; 0x6c
 80076fe:	0d1b      	lsrs	r3, r3, #20
 8007700:	1ac3      	subs	r3, r0, r3
 8007702:	409a      	lsls	r2, r3
 8007704:	0010      	movs	r0, r2
 8007706:	4281      	cmp	r1, r0
 8007708:	d123      	bne.n	8007752 <_strtod_l+0x94e>
 800770a:	4b0f      	ldr	r3, [pc, #60]	; (8007748 <_strtod_l+0x944>)
 800770c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800770e:	429a      	cmp	r2, r3
 8007710:	d102      	bne.n	8007718 <_strtod_l+0x914>
 8007712:	1c4b      	adds	r3, r1, #1
 8007714:	d100      	bne.n	8007718 <_strtod_l+0x914>
 8007716:	e5df      	b.n	80072d8 <_strtod_l+0x4d4>
 8007718:	4b07      	ldr	r3, [pc, #28]	; (8007738 <_strtod_l+0x934>)
 800771a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800771c:	2600      	movs	r6, #0
 800771e:	401a      	ands	r2, r3
 8007720:	0013      	movs	r3, r2
 8007722:	2280      	movs	r2, #128	; 0x80
 8007724:	0352      	lsls	r2, r2, #13
 8007726:	189f      	adds	r7, r3, r2
 8007728:	9b08      	ldr	r3, [sp, #32]
 800772a:	2b00      	cmp	r3, #0
 800772c:	d1a2      	bne.n	8007674 <_strtod_l+0x870>
 800772e:	e5dc      	b.n	80072ea <_strtod_l+0x4e6>
 8007730:	0800ad70 	.word	0x0800ad70
 8007734:	fffffc02 	.word	0xfffffc02
 8007738:	7ff00000 	.word	0x7ff00000
 800773c:	39500000 	.word	0x39500000
 8007740:	fffffbe2 	.word	0xfffffbe2
 8007744:	000fffff 	.word	0x000fffff
 8007748:	7fefffff 	.word	0x7fefffff
 800774c:	4333      	orrs	r3, r6
 800774e:	d100      	bne.n	8007752 <_strtod_l+0x94e>
 8007750:	e77e      	b.n	8007650 <_strtod_l+0x84c>
 8007752:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007754:	2b00      	cmp	r3, #0
 8007756:	d01d      	beq.n	8007794 <_strtod_l+0x990>
 8007758:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800775a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800775c:	4213      	tst	r3, r2
 800775e:	d0e3      	beq.n	8007728 <_strtod_l+0x924>
 8007760:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007762:	0030      	movs	r0, r6
 8007764:	0039      	movs	r1, r7
 8007766:	9a08      	ldr	r2, [sp, #32]
 8007768:	2b00      	cmp	r3, #0
 800776a:	d017      	beq.n	800779c <_strtod_l+0x998>
 800776c:	f7ff fb32 	bl	8006dd4 <sulp>
 8007770:	0002      	movs	r2, r0
 8007772:	000b      	movs	r3, r1
 8007774:	9812      	ldr	r0, [sp, #72]	; 0x48
 8007776:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8007778:	f7f9 fc1e 	bl	8000fb8 <__aeabi_dadd>
 800777c:	0006      	movs	r6, r0
 800777e:	000f      	movs	r7, r1
 8007780:	e7d2      	b.n	8007728 <_strtod_l+0x924>
 8007782:	2601      	movs	r6, #1
 8007784:	4013      	ands	r3, r2
 8007786:	4a99      	ldr	r2, [pc, #612]	; (80079ec <_strtod_l+0xbe8>)
 8007788:	4276      	negs	r6, r6
 800778a:	189b      	adds	r3, r3, r2
 800778c:	4a98      	ldr	r2, [pc, #608]	; (80079f0 <_strtod_l+0xbec>)
 800778e:	431a      	orrs	r2, r3
 8007790:	0017      	movs	r7, r2
 8007792:	e7c9      	b.n	8007728 <_strtod_l+0x924>
 8007794:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007796:	4233      	tst	r3, r6
 8007798:	d0c6      	beq.n	8007728 <_strtod_l+0x924>
 800779a:	e7e1      	b.n	8007760 <_strtod_l+0x95c>
 800779c:	f7ff fb1a 	bl	8006dd4 <sulp>
 80077a0:	0002      	movs	r2, r0
 80077a2:	000b      	movs	r3, r1
 80077a4:	9812      	ldr	r0, [sp, #72]	; 0x48
 80077a6:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80077a8:	f7fa fdb0 	bl	800230c <__aeabi_dsub>
 80077ac:	2200      	movs	r2, #0
 80077ae:	2300      	movs	r3, #0
 80077b0:	0006      	movs	r6, r0
 80077b2:	000f      	movs	r7, r1
 80077b4:	f7f8 fe48 	bl	8000448 <__aeabi_dcmpeq>
 80077b8:	2800      	cmp	r0, #0
 80077ba:	d0b5      	beq.n	8007728 <_strtod_l+0x924>
 80077bc:	e5ff      	b.n	80073be <_strtod_l+0x5ba>
 80077be:	9907      	ldr	r1, [sp, #28]
 80077c0:	9806      	ldr	r0, [sp, #24]
 80077c2:	f002 f877 	bl	80098b4 <__ratio>
 80077c6:	2380      	movs	r3, #128	; 0x80
 80077c8:	2200      	movs	r2, #0
 80077ca:	05db      	lsls	r3, r3, #23
 80077cc:	0004      	movs	r4, r0
 80077ce:	000d      	movs	r5, r1
 80077d0:	f7f8 fe4a 	bl	8000468 <__aeabi_dcmple>
 80077d4:	2800      	cmp	r0, #0
 80077d6:	d075      	beq.n	80078c4 <_strtod_l+0xac0>
 80077d8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d047      	beq.n	800786e <_strtod_l+0xa6a>
 80077de:	2300      	movs	r3, #0
 80077e0:	4c84      	ldr	r4, [pc, #528]	; (80079f4 <_strtod_l+0xbf0>)
 80077e2:	2500      	movs	r5, #0
 80077e4:	9310      	str	r3, [sp, #64]	; 0x40
 80077e6:	9411      	str	r4, [sp, #68]	; 0x44
 80077e8:	4c82      	ldr	r4, [pc, #520]	; (80079f4 <_strtod_l+0xbf0>)
 80077ea:	4a83      	ldr	r2, [pc, #524]	; (80079f8 <_strtod_l+0xbf4>)
 80077ec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80077ee:	4013      	ands	r3, r2
 80077f0:	9314      	str	r3, [sp, #80]	; 0x50
 80077f2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80077f4:	4b81      	ldr	r3, [pc, #516]	; (80079fc <_strtod_l+0xbf8>)
 80077f6:	429a      	cmp	r2, r3
 80077f8:	d000      	beq.n	80077fc <_strtod_l+0x9f8>
 80077fa:	e0ac      	b.n	8007956 <_strtod_l+0xb52>
 80077fc:	4a80      	ldr	r2, [pc, #512]	; (8007a00 <_strtod_l+0xbfc>)
 80077fe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007800:	4694      	mov	ip, r2
 8007802:	4463      	add	r3, ip
 8007804:	001f      	movs	r7, r3
 8007806:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007808:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800780a:	0030      	movs	r0, r6
 800780c:	0039      	movs	r1, r7
 800780e:	920c      	str	r2, [sp, #48]	; 0x30
 8007810:	930d      	str	r3, [sp, #52]	; 0x34
 8007812:	f001 ff77 	bl	8009704 <__ulp>
 8007816:	0002      	movs	r2, r0
 8007818:	000b      	movs	r3, r1
 800781a:	980c      	ldr	r0, [sp, #48]	; 0x30
 800781c:	990d      	ldr	r1, [sp, #52]	; 0x34
 800781e:	f7fa fb09 	bl	8001e34 <__aeabi_dmul>
 8007822:	0032      	movs	r2, r6
 8007824:	003b      	movs	r3, r7
 8007826:	f7f9 fbc7 	bl	8000fb8 <__aeabi_dadd>
 800782a:	4a73      	ldr	r2, [pc, #460]	; (80079f8 <_strtod_l+0xbf4>)
 800782c:	4b75      	ldr	r3, [pc, #468]	; (8007a04 <_strtod_l+0xc00>)
 800782e:	0006      	movs	r6, r0
 8007830:	400a      	ands	r2, r1
 8007832:	429a      	cmp	r2, r3
 8007834:	d95e      	bls.n	80078f4 <_strtod_l+0xaf0>
 8007836:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007838:	4b73      	ldr	r3, [pc, #460]	; (8007a08 <_strtod_l+0xc04>)
 800783a:	429a      	cmp	r2, r3
 800783c:	d103      	bne.n	8007846 <_strtod_l+0xa42>
 800783e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007840:	3301      	adds	r3, #1
 8007842:	d100      	bne.n	8007846 <_strtod_l+0xa42>
 8007844:	e548      	b.n	80072d8 <_strtod_l+0x4d4>
 8007846:	2601      	movs	r6, #1
 8007848:	4f6f      	ldr	r7, [pc, #444]	; (8007a08 <_strtod_l+0xc04>)
 800784a:	4276      	negs	r6, r6
 800784c:	9920      	ldr	r1, [sp, #128]	; 0x80
 800784e:	9805      	ldr	r0, [sp, #20]
 8007850:	f001 fc18 	bl	8009084 <_Bfree>
 8007854:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007856:	9805      	ldr	r0, [sp, #20]
 8007858:	f001 fc14 	bl	8009084 <_Bfree>
 800785c:	9907      	ldr	r1, [sp, #28]
 800785e:	9805      	ldr	r0, [sp, #20]
 8007860:	f001 fc10 	bl	8009084 <_Bfree>
 8007864:	9906      	ldr	r1, [sp, #24]
 8007866:	9805      	ldr	r0, [sp, #20]
 8007868:	f001 fc0c 	bl	8009084 <_Bfree>
 800786c:	e61d      	b.n	80074aa <_strtod_l+0x6a6>
 800786e:	2e00      	cmp	r6, #0
 8007870:	d11c      	bne.n	80078ac <_strtod_l+0xaa8>
 8007872:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007874:	031b      	lsls	r3, r3, #12
 8007876:	d11f      	bne.n	80078b8 <_strtod_l+0xab4>
 8007878:	2200      	movs	r2, #0
 800787a:	0020      	movs	r0, r4
 800787c:	0029      	movs	r1, r5
 800787e:	4b5d      	ldr	r3, [pc, #372]	; (80079f4 <_strtod_l+0xbf0>)
 8007880:	f7f8 fde8 	bl	8000454 <__aeabi_dcmplt>
 8007884:	2800      	cmp	r0, #0
 8007886:	d11a      	bne.n	80078be <_strtod_l+0xaba>
 8007888:	0020      	movs	r0, r4
 800788a:	0029      	movs	r1, r5
 800788c:	2200      	movs	r2, #0
 800788e:	4b5f      	ldr	r3, [pc, #380]	; (8007a0c <_strtod_l+0xc08>)
 8007890:	f7fa fad0 	bl	8001e34 <__aeabi_dmul>
 8007894:	0005      	movs	r5, r0
 8007896:	000c      	movs	r4, r1
 8007898:	2380      	movs	r3, #128	; 0x80
 800789a:	061b      	lsls	r3, r3, #24
 800789c:	18e3      	adds	r3, r4, r3
 800789e:	951c      	str	r5, [sp, #112]	; 0x70
 80078a0:	931d      	str	r3, [sp, #116]	; 0x74
 80078a2:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80078a4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80078a6:	9210      	str	r2, [sp, #64]	; 0x40
 80078a8:	9311      	str	r3, [sp, #68]	; 0x44
 80078aa:	e79e      	b.n	80077ea <_strtod_l+0x9e6>
 80078ac:	2e01      	cmp	r6, #1
 80078ae:	d103      	bne.n	80078b8 <_strtod_l+0xab4>
 80078b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d100      	bne.n	80078b8 <_strtod_l+0xab4>
 80078b6:	e582      	b.n	80073be <_strtod_l+0x5ba>
 80078b8:	2300      	movs	r3, #0
 80078ba:	4c55      	ldr	r4, [pc, #340]	; (8007a10 <_strtod_l+0xc0c>)
 80078bc:	e791      	b.n	80077e2 <_strtod_l+0x9de>
 80078be:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80078c0:	4c52      	ldr	r4, [pc, #328]	; (8007a0c <_strtod_l+0xc08>)
 80078c2:	e7e9      	b.n	8007898 <_strtod_l+0xa94>
 80078c4:	2200      	movs	r2, #0
 80078c6:	0020      	movs	r0, r4
 80078c8:	0029      	movs	r1, r5
 80078ca:	4b50      	ldr	r3, [pc, #320]	; (8007a0c <_strtod_l+0xc08>)
 80078cc:	f7fa fab2 	bl	8001e34 <__aeabi_dmul>
 80078d0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80078d2:	0005      	movs	r5, r0
 80078d4:	000b      	movs	r3, r1
 80078d6:	000c      	movs	r4, r1
 80078d8:	2a00      	cmp	r2, #0
 80078da:	d107      	bne.n	80078ec <_strtod_l+0xae8>
 80078dc:	2280      	movs	r2, #128	; 0x80
 80078de:	0612      	lsls	r2, r2, #24
 80078e0:	188b      	adds	r3, r1, r2
 80078e2:	9016      	str	r0, [sp, #88]	; 0x58
 80078e4:	9317      	str	r3, [sp, #92]	; 0x5c
 80078e6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80078e8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80078ea:	e7dc      	b.n	80078a6 <_strtod_l+0xaa2>
 80078ec:	0002      	movs	r2, r0
 80078ee:	9216      	str	r2, [sp, #88]	; 0x58
 80078f0:	9317      	str	r3, [sp, #92]	; 0x5c
 80078f2:	e7f8      	b.n	80078e6 <_strtod_l+0xae2>
 80078f4:	23d4      	movs	r3, #212	; 0xd4
 80078f6:	049b      	lsls	r3, r3, #18
 80078f8:	18cf      	adds	r7, r1, r3
 80078fa:	9b08      	ldr	r3, [sp, #32]
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d1a5      	bne.n	800784c <_strtod_l+0xa48>
 8007900:	4b3d      	ldr	r3, [pc, #244]	; (80079f8 <_strtod_l+0xbf4>)
 8007902:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007904:	403b      	ands	r3, r7
 8007906:	429a      	cmp	r2, r3
 8007908:	d1a0      	bne.n	800784c <_strtod_l+0xa48>
 800790a:	0028      	movs	r0, r5
 800790c:	0021      	movs	r1, r4
 800790e:	f7f8 fe07 	bl	8000520 <__aeabi_d2lz>
 8007912:	f7f8 fe41 	bl	8000598 <__aeabi_l2d>
 8007916:	0002      	movs	r2, r0
 8007918:	000b      	movs	r3, r1
 800791a:	0028      	movs	r0, r5
 800791c:	0021      	movs	r1, r4
 800791e:	f7fa fcf5 	bl	800230c <__aeabi_dsub>
 8007922:	033b      	lsls	r3, r7, #12
 8007924:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007926:	0b1b      	lsrs	r3, r3, #12
 8007928:	4333      	orrs	r3, r6
 800792a:	4313      	orrs	r3, r2
 800792c:	0004      	movs	r4, r0
 800792e:	000d      	movs	r5, r1
 8007930:	4a38      	ldr	r2, [pc, #224]	; (8007a14 <_strtod_l+0xc10>)
 8007932:	2b00      	cmp	r3, #0
 8007934:	d055      	beq.n	80079e2 <_strtod_l+0xbde>
 8007936:	4b38      	ldr	r3, [pc, #224]	; (8007a18 <_strtod_l+0xc14>)
 8007938:	f7f8 fd8c 	bl	8000454 <__aeabi_dcmplt>
 800793c:	2800      	cmp	r0, #0
 800793e:	d000      	beq.n	8007942 <_strtod_l+0xb3e>
 8007940:	e4d3      	b.n	80072ea <_strtod_l+0x4e6>
 8007942:	0020      	movs	r0, r4
 8007944:	0029      	movs	r1, r5
 8007946:	4a35      	ldr	r2, [pc, #212]	; (8007a1c <_strtod_l+0xc18>)
 8007948:	4b30      	ldr	r3, [pc, #192]	; (8007a0c <_strtod_l+0xc08>)
 800794a:	f7f8 fd97 	bl	800047c <__aeabi_dcmpgt>
 800794e:	2800      	cmp	r0, #0
 8007950:	d100      	bne.n	8007954 <_strtod_l+0xb50>
 8007952:	e77b      	b.n	800784c <_strtod_l+0xa48>
 8007954:	e4c9      	b.n	80072ea <_strtod_l+0x4e6>
 8007956:	9b08      	ldr	r3, [sp, #32]
 8007958:	2b00      	cmp	r3, #0
 800795a:	d02b      	beq.n	80079b4 <_strtod_l+0xbb0>
 800795c:	23d4      	movs	r3, #212	; 0xd4
 800795e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007960:	04db      	lsls	r3, r3, #19
 8007962:	429a      	cmp	r2, r3
 8007964:	d826      	bhi.n	80079b4 <_strtod_l+0xbb0>
 8007966:	0028      	movs	r0, r5
 8007968:	0021      	movs	r1, r4
 800796a:	4a2d      	ldr	r2, [pc, #180]	; (8007a20 <_strtod_l+0xc1c>)
 800796c:	4b2d      	ldr	r3, [pc, #180]	; (8007a24 <_strtod_l+0xc20>)
 800796e:	f7f8 fd7b 	bl	8000468 <__aeabi_dcmple>
 8007972:	2800      	cmp	r0, #0
 8007974:	d017      	beq.n	80079a6 <_strtod_l+0xba2>
 8007976:	0028      	movs	r0, r5
 8007978:	0021      	movs	r1, r4
 800797a:	f7f8 fdb3 	bl	80004e4 <__aeabi_d2uiz>
 800797e:	2800      	cmp	r0, #0
 8007980:	d100      	bne.n	8007984 <_strtod_l+0xb80>
 8007982:	3001      	adds	r0, #1
 8007984:	f7fb f8d8 	bl	8002b38 <__aeabi_ui2d>
 8007988:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800798a:	0005      	movs	r5, r0
 800798c:	000b      	movs	r3, r1
 800798e:	000c      	movs	r4, r1
 8007990:	2a00      	cmp	r2, #0
 8007992:	d122      	bne.n	80079da <_strtod_l+0xbd6>
 8007994:	2280      	movs	r2, #128	; 0x80
 8007996:	0612      	lsls	r2, r2, #24
 8007998:	188b      	adds	r3, r1, r2
 800799a:	9018      	str	r0, [sp, #96]	; 0x60
 800799c:	9319      	str	r3, [sp, #100]	; 0x64
 800799e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80079a0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80079a2:	9210      	str	r2, [sp, #64]	; 0x40
 80079a4:	9311      	str	r3, [sp, #68]	; 0x44
 80079a6:	22d6      	movs	r2, #214	; 0xd6
 80079a8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80079aa:	04d2      	lsls	r2, r2, #19
 80079ac:	189b      	adds	r3, r3, r2
 80079ae:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80079b0:	1a9b      	subs	r3, r3, r2
 80079b2:	9311      	str	r3, [sp, #68]	; 0x44
 80079b4:	9812      	ldr	r0, [sp, #72]	; 0x48
 80079b6:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80079b8:	9e10      	ldr	r6, [sp, #64]	; 0x40
 80079ba:	9f11      	ldr	r7, [sp, #68]	; 0x44
 80079bc:	f001 fea2 	bl	8009704 <__ulp>
 80079c0:	0002      	movs	r2, r0
 80079c2:	000b      	movs	r3, r1
 80079c4:	0030      	movs	r0, r6
 80079c6:	0039      	movs	r1, r7
 80079c8:	f7fa fa34 	bl	8001e34 <__aeabi_dmul>
 80079cc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80079ce:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80079d0:	f7f9 faf2 	bl	8000fb8 <__aeabi_dadd>
 80079d4:	0006      	movs	r6, r0
 80079d6:	000f      	movs	r7, r1
 80079d8:	e78f      	b.n	80078fa <_strtod_l+0xaf6>
 80079da:	0002      	movs	r2, r0
 80079dc:	9218      	str	r2, [sp, #96]	; 0x60
 80079de:	9319      	str	r3, [sp, #100]	; 0x64
 80079e0:	e7dd      	b.n	800799e <_strtod_l+0xb9a>
 80079e2:	4b11      	ldr	r3, [pc, #68]	; (8007a28 <_strtod_l+0xc24>)
 80079e4:	f7f8 fd36 	bl	8000454 <__aeabi_dcmplt>
 80079e8:	e7b1      	b.n	800794e <_strtod_l+0xb4a>
 80079ea:	46c0      	nop			; (mov r8, r8)
 80079ec:	fff00000 	.word	0xfff00000
 80079f0:	000fffff 	.word	0x000fffff
 80079f4:	3ff00000 	.word	0x3ff00000
 80079f8:	7ff00000 	.word	0x7ff00000
 80079fc:	7fe00000 	.word	0x7fe00000
 8007a00:	fcb00000 	.word	0xfcb00000
 8007a04:	7c9fffff 	.word	0x7c9fffff
 8007a08:	7fefffff 	.word	0x7fefffff
 8007a0c:	3fe00000 	.word	0x3fe00000
 8007a10:	bff00000 	.word	0xbff00000
 8007a14:	94a03595 	.word	0x94a03595
 8007a18:	3fdfffff 	.word	0x3fdfffff
 8007a1c:	35afe535 	.word	0x35afe535
 8007a20:	ffc00000 	.word	0xffc00000
 8007a24:	41dfffff 	.word	0x41dfffff
 8007a28:	3fcfffff 	.word	0x3fcfffff

08007a2c <_strtod_r>:
 8007a2c:	b510      	push	{r4, lr}
 8007a2e:	4b02      	ldr	r3, [pc, #8]	; (8007a38 <_strtod_r+0xc>)
 8007a30:	f7ff f9e8 	bl	8006e04 <_strtod_l>
 8007a34:	bd10      	pop	{r4, pc}
 8007a36:	46c0      	nop			; (mov r8, r8)
 8007a38:	20000074 	.word	0x20000074

08007a3c <_strtol_l.constprop.0>:
 8007a3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007a3e:	b087      	sub	sp, #28
 8007a40:	001e      	movs	r6, r3
 8007a42:	9005      	str	r0, [sp, #20]
 8007a44:	9101      	str	r1, [sp, #4]
 8007a46:	9202      	str	r2, [sp, #8]
 8007a48:	2b01      	cmp	r3, #1
 8007a4a:	d045      	beq.n	8007ad8 <_strtol_l.constprop.0+0x9c>
 8007a4c:	000b      	movs	r3, r1
 8007a4e:	2e24      	cmp	r6, #36	; 0x24
 8007a50:	d842      	bhi.n	8007ad8 <_strtol_l.constprop.0+0x9c>
 8007a52:	4a3f      	ldr	r2, [pc, #252]	; (8007b50 <_strtol_l.constprop.0+0x114>)
 8007a54:	2108      	movs	r1, #8
 8007a56:	4694      	mov	ip, r2
 8007a58:	001a      	movs	r2, r3
 8007a5a:	4660      	mov	r0, ip
 8007a5c:	7814      	ldrb	r4, [r2, #0]
 8007a5e:	3301      	adds	r3, #1
 8007a60:	5d00      	ldrb	r0, [r0, r4]
 8007a62:	001d      	movs	r5, r3
 8007a64:	0007      	movs	r7, r0
 8007a66:	400f      	ands	r7, r1
 8007a68:	4208      	tst	r0, r1
 8007a6a:	d1f5      	bne.n	8007a58 <_strtol_l.constprop.0+0x1c>
 8007a6c:	2c2d      	cmp	r4, #45	; 0x2d
 8007a6e:	d13a      	bne.n	8007ae6 <_strtol_l.constprop.0+0xaa>
 8007a70:	2701      	movs	r7, #1
 8007a72:	781c      	ldrb	r4, [r3, #0]
 8007a74:	1c95      	adds	r5, r2, #2
 8007a76:	2e00      	cmp	r6, #0
 8007a78:	d065      	beq.n	8007b46 <_strtol_l.constprop.0+0x10a>
 8007a7a:	2e10      	cmp	r6, #16
 8007a7c:	d109      	bne.n	8007a92 <_strtol_l.constprop.0+0x56>
 8007a7e:	2c30      	cmp	r4, #48	; 0x30
 8007a80:	d107      	bne.n	8007a92 <_strtol_l.constprop.0+0x56>
 8007a82:	2220      	movs	r2, #32
 8007a84:	782b      	ldrb	r3, [r5, #0]
 8007a86:	4393      	bics	r3, r2
 8007a88:	2b58      	cmp	r3, #88	; 0x58
 8007a8a:	d157      	bne.n	8007b3c <_strtol_l.constprop.0+0x100>
 8007a8c:	2610      	movs	r6, #16
 8007a8e:	786c      	ldrb	r4, [r5, #1]
 8007a90:	3502      	adds	r5, #2
 8007a92:	4b30      	ldr	r3, [pc, #192]	; (8007b54 <_strtol_l.constprop.0+0x118>)
 8007a94:	0031      	movs	r1, r6
 8007a96:	18fb      	adds	r3, r7, r3
 8007a98:	0018      	movs	r0, r3
 8007a9a:	9303      	str	r3, [sp, #12]
 8007a9c:	f7f8 fbd4 	bl	8000248 <__aeabi_uidivmod>
 8007aa0:	2300      	movs	r3, #0
 8007aa2:	2201      	movs	r2, #1
 8007aa4:	4684      	mov	ip, r0
 8007aa6:	0018      	movs	r0, r3
 8007aa8:	9104      	str	r1, [sp, #16]
 8007aaa:	4252      	negs	r2, r2
 8007aac:	0021      	movs	r1, r4
 8007aae:	3930      	subs	r1, #48	; 0x30
 8007ab0:	2909      	cmp	r1, #9
 8007ab2:	d81d      	bhi.n	8007af0 <_strtol_l.constprop.0+0xb4>
 8007ab4:	000c      	movs	r4, r1
 8007ab6:	42a6      	cmp	r6, r4
 8007ab8:	dd28      	ble.n	8007b0c <_strtol_l.constprop.0+0xd0>
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	db24      	blt.n	8007b08 <_strtol_l.constprop.0+0xcc>
 8007abe:	0013      	movs	r3, r2
 8007ac0:	4584      	cmp	ip, r0
 8007ac2:	d306      	bcc.n	8007ad2 <_strtol_l.constprop.0+0x96>
 8007ac4:	d102      	bne.n	8007acc <_strtol_l.constprop.0+0x90>
 8007ac6:	9904      	ldr	r1, [sp, #16]
 8007ac8:	42a1      	cmp	r1, r4
 8007aca:	db02      	blt.n	8007ad2 <_strtol_l.constprop.0+0x96>
 8007acc:	2301      	movs	r3, #1
 8007ace:	4370      	muls	r0, r6
 8007ad0:	1820      	adds	r0, r4, r0
 8007ad2:	782c      	ldrb	r4, [r5, #0]
 8007ad4:	3501      	adds	r5, #1
 8007ad6:	e7e9      	b.n	8007aac <_strtol_l.constprop.0+0x70>
 8007ad8:	f7fe fab0 	bl	800603c <__errno>
 8007adc:	2316      	movs	r3, #22
 8007ade:	6003      	str	r3, [r0, #0]
 8007ae0:	2000      	movs	r0, #0
 8007ae2:	b007      	add	sp, #28
 8007ae4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007ae6:	2c2b      	cmp	r4, #43	; 0x2b
 8007ae8:	d1c5      	bne.n	8007a76 <_strtol_l.constprop.0+0x3a>
 8007aea:	781c      	ldrb	r4, [r3, #0]
 8007aec:	1c95      	adds	r5, r2, #2
 8007aee:	e7c2      	b.n	8007a76 <_strtol_l.constprop.0+0x3a>
 8007af0:	0021      	movs	r1, r4
 8007af2:	3941      	subs	r1, #65	; 0x41
 8007af4:	2919      	cmp	r1, #25
 8007af6:	d801      	bhi.n	8007afc <_strtol_l.constprop.0+0xc0>
 8007af8:	3c37      	subs	r4, #55	; 0x37
 8007afa:	e7dc      	b.n	8007ab6 <_strtol_l.constprop.0+0x7a>
 8007afc:	0021      	movs	r1, r4
 8007afe:	3961      	subs	r1, #97	; 0x61
 8007b00:	2919      	cmp	r1, #25
 8007b02:	d803      	bhi.n	8007b0c <_strtol_l.constprop.0+0xd0>
 8007b04:	3c57      	subs	r4, #87	; 0x57
 8007b06:	e7d6      	b.n	8007ab6 <_strtol_l.constprop.0+0x7a>
 8007b08:	0013      	movs	r3, r2
 8007b0a:	e7e2      	b.n	8007ad2 <_strtol_l.constprop.0+0x96>
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	da09      	bge.n	8007b24 <_strtol_l.constprop.0+0xe8>
 8007b10:	2322      	movs	r3, #34	; 0x22
 8007b12:	9a05      	ldr	r2, [sp, #20]
 8007b14:	9803      	ldr	r0, [sp, #12]
 8007b16:	6013      	str	r3, [r2, #0]
 8007b18:	9b02      	ldr	r3, [sp, #8]
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d0e1      	beq.n	8007ae2 <_strtol_l.constprop.0+0xa6>
 8007b1e:	1e6b      	subs	r3, r5, #1
 8007b20:	9301      	str	r3, [sp, #4]
 8007b22:	e007      	b.n	8007b34 <_strtol_l.constprop.0+0xf8>
 8007b24:	2f00      	cmp	r7, #0
 8007b26:	d000      	beq.n	8007b2a <_strtol_l.constprop.0+0xee>
 8007b28:	4240      	negs	r0, r0
 8007b2a:	9a02      	ldr	r2, [sp, #8]
 8007b2c:	2a00      	cmp	r2, #0
 8007b2e:	d0d8      	beq.n	8007ae2 <_strtol_l.constprop.0+0xa6>
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d1f4      	bne.n	8007b1e <_strtol_l.constprop.0+0xe2>
 8007b34:	9b02      	ldr	r3, [sp, #8]
 8007b36:	9a01      	ldr	r2, [sp, #4]
 8007b38:	601a      	str	r2, [r3, #0]
 8007b3a:	e7d2      	b.n	8007ae2 <_strtol_l.constprop.0+0xa6>
 8007b3c:	2430      	movs	r4, #48	; 0x30
 8007b3e:	2e00      	cmp	r6, #0
 8007b40:	d1a7      	bne.n	8007a92 <_strtol_l.constprop.0+0x56>
 8007b42:	3608      	adds	r6, #8
 8007b44:	e7a5      	b.n	8007a92 <_strtol_l.constprop.0+0x56>
 8007b46:	2c30      	cmp	r4, #48	; 0x30
 8007b48:	d09b      	beq.n	8007a82 <_strtol_l.constprop.0+0x46>
 8007b4a:	260a      	movs	r6, #10
 8007b4c:	e7a1      	b.n	8007a92 <_strtol_l.constprop.0+0x56>
 8007b4e:	46c0      	nop			; (mov r8, r8)
 8007b50:	0800ad99 	.word	0x0800ad99
 8007b54:	7fffffff 	.word	0x7fffffff

08007b58 <_strtol_r>:
 8007b58:	b510      	push	{r4, lr}
 8007b5a:	f7ff ff6f 	bl	8007a3c <_strtol_l.constprop.0>
 8007b5e:	bd10      	pop	{r4, pc}

08007b60 <quorem>:
 8007b60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007b62:	0006      	movs	r6, r0
 8007b64:	690b      	ldr	r3, [r1, #16]
 8007b66:	6932      	ldr	r2, [r6, #16]
 8007b68:	b087      	sub	sp, #28
 8007b6a:	2000      	movs	r0, #0
 8007b6c:	9103      	str	r1, [sp, #12]
 8007b6e:	429a      	cmp	r2, r3
 8007b70:	db65      	blt.n	8007c3e <quorem+0xde>
 8007b72:	3b01      	subs	r3, #1
 8007b74:	009c      	lsls	r4, r3, #2
 8007b76:	9300      	str	r3, [sp, #0]
 8007b78:	000b      	movs	r3, r1
 8007b7a:	3314      	adds	r3, #20
 8007b7c:	9305      	str	r3, [sp, #20]
 8007b7e:	191b      	adds	r3, r3, r4
 8007b80:	9304      	str	r3, [sp, #16]
 8007b82:	0033      	movs	r3, r6
 8007b84:	3314      	adds	r3, #20
 8007b86:	9302      	str	r3, [sp, #8]
 8007b88:	191c      	adds	r4, r3, r4
 8007b8a:	9b04      	ldr	r3, [sp, #16]
 8007b8c:	6827      	ldr	r7, [r4, #0]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	0038      	movs	r0, r7
 8007b92:	1c5d      	adds	r5, r3, #1
 8007b94:	0029      	movs	r1, r5
 8007b96:	9301      	str	r3, [sp, #4]
 8007b98:	f7f8 fad0 	bl	800013c <__udivsi3>
 8007b9c:	9001      	str	r0, [sp, #4]
 8007b9e:	42af      	cmp	r7, r5
 8007ba0:	d324      	bcc.n	8007bec <quorem+0x8c>
 8007ba2:	2500      	movs	r5, #0
 8007ba4:	46ac      	mov	ip, r5
 8007ba6:	9802      	ldr	r0, [sp, #8]
 8007ba8:	9f05      	ldr	r7, [sp, #20]
 8007baa:	cf08      	ldmia	r7!, {r3}
 8007bac:	9a01      	ldr	r2, [sp, #4]
 8007bae:	b299      	uxth	r1, r3
 8007bb0:	4351      	muls	r1, r2
 8007bb2:	0c1b      	lsrs	r3, r3, #16
 8007bb4:	4353      	muls	r3, r2
 8007bb6:	1949      	adds	r1, r1, r5
 8007bb8:	0c0a      	lsrs	r2, r1, #16
 8007bba:	189b      	adds	r3, r3, r2
 8007bbc:	6802      	ldr	r2, [r0, #0]
 8007bbe:	b289      	uxth	r1, r1
 8007bc0:	b292      	uxth	r2, r2
 8007bc2:	4462      	add	r2, ip
 8007bc4:	1a52      	subs	r2, r2, r1
 8007bc6:	6801      	ldr	r1, [r0, #0]
 8007bc8:	0c1d      	lsrs	r5, r3, #16
 8007bca:	0c09      	lsrs	r1, r1, #16
 8007bcc:	b29b      	uxth	r3, r3
 8007bce:	1acb      	subs	r3, r1, r3
 8007bd0:	1411      	asrs	r1, r2, #16
 8007bd2:	185b      	adds	r3, r3, r1
 8007bd4:	1419      	asrs	r1, r3, #16
 8007bd6:	b292      	uxth	r2, r2
 8007bd8:	041b      	lsls	r3, r3, #16
 8007bda:	431a      	orrs	r2, r3
 8007bdc:	9b04      	ldr	r3, [sp, #16]
 8007bde:	468c      	mov	ip, r1
 8007be0:	c004      	stmia	r0!, {r2}
 8007be2:	42bb      	cmp	r3, r7
 8007be4:	d2e1      	bcs.n	8007baa <quorem+0x4a>
 8007be6:	6823      	ldr	r3, [r4, #0]
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d030      	beq.n	8007c4e <quorem+0xee>
 8007bec:	0030      	movs	r0, r6
 8007bee:	9903      	ldr	r1, [sp, #12]
 8007bf0:	f001 fcd4 	bl	800959c <__mcmp>
 8007bf4:	2800      	cmp	r0, #0
 8007bf6:	db21      	blt.n	8007c3c <quorem+0xdc>
 8007bf8:	0030      	movs	r0, r6
 8007bfa:	2400      	movs	r4, #0
 8007bfc:	9b01      	ldr	r3, [sp, #4]
 8007bfe:	9903      	ldr	r1, [sp, #12]
 8007c00:	3301      	adds	r3, #1
 8007c02:	9301      	str	r3, [sp, #4]
 8007c04:	3014      	adds	r0, #20
 8007c06:	3114      	adds	r1, #20
 8007c08:	6803      	ldr	r3, [r0, #0]
 8007c0a:	c920      	ldmia	r1!, {r5}
 8007c0c:	b29a      	uxth	r2, r3
 8007c0e:	1914      	adds	r4, r2, r4
 8007c10:	b2aa      	uxth	r2, r5
 8007c12:	1aa2      	subs	r2, r4, r2
 8007c14:	0c1b      	lsrs	r3, r3, #16
 8007c16:	0c2d      	lsrs	r5, r5, #16
 8007c18:	1414      	asrs	r4, r2, #16
 8007c1a:	1b5b      	subs	r3, r3, r5
 8007c1c:	191b      	adds	r3, r3, r4
 8007c1e:	141c      	asrs	r4, r3, #16
 8007c20:	b292      	uxth	r2, r2
 8007c22:	041b      	lsls	r3, r3, #16
 8007c24:	4313      	orrs	r3, r2
 8007c26:	c008      	stmia	r0!, {r3}
 8007c28:	9b04      	ldr	r3, [sp, #16]
 8007c2a:	428b      	cmp	r3, r1
 8007c2c:	d2ec      	bcs.n	8007c08 <quorem+0xa8>
 8007c2e:	9b00      	ldr	r3, [sp, #0]
 8007c30:	9a02      	ldr	r2, [sp, #8]
 8007c32:	009b      	lsls	r3, r3, #2
 8007c34:	18d3      	adds	r3, r2, r3
 8007c36:	681a      	ldr	r2, [r3, #0]
 8007c38:	2a00      	cmp	r2, #0
 8007c3a:	d015      	beq.n	8007c68 <quorem+0x108>
 8007c3c:	9801      	ldr	r0, [sp, #4]
 8007c3e:	b007      	add	sp, #28
 8007c40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007c42:	6823      	ldr	r3, [r4, #0]
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d106      	bne.n	8007c56 <quorem+0xf6>
 8007c48:	9b00      	ldr	r3, [sp, #0]
 8007c4a:	3b01      	subs	r3, #1
 8007c4c:	9300      	str	r3, [sp, #0]
 8007c4e:	9b02      	ldr	r3, [sp, #8]
 8007c50:	3c04      	subs	r4, #4
 8007c52:	42a3      	cmp	r3, r4
 8007c54:	d3f5      	bcc.n	8007c42 <quorem+0xe2>
 8007c56:	9b00      	ldr	r3, [sp, #0]
 8007c58:	6133      	str	r3, [r6, #16]
 8007c5a:	e7c7      	b.n	8007bec <quorem+0x8c>
 8007c5c:	681a      	ldr	r2, [r3, #0]
 8007c5e:	2a00      	cmp	r2, #0
 8007c60:	d106      	bne.n	8007c70 <quorem+0x110>
 8007c62:	9a00      	ldr	r2, [sp, #0]
 8007c64:	3a01      	subs	r2, #1
 8007c66:	9200      	str	r2, [sp, #0]
 8007c68:	9a02      	ldr	r2, [sp, #8]
 8007c6a:	3b04      	subs	r3, #4
 8007c6c:	429a      	cmp	r2, r3
 8007c6e:	d3f5      	bcc.n	8007c5c <quorem+0xfc>
 8007c70:	9b00      	ldr	r3, [sp, #0]
 8007c72:	6133      	str	r3, [r6, #16]
 8007c74:	e7e2      	b.n	8007c3c <quorem+0xdc>
	...

08007c78 <_dtoa_r>:
 8007c78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007c7a:	b09d      	sub	sp, #116	; 0x74
 8007c7c:	9202      	str	r2, [sp, #8]
 8007c7e:	9303      	str	r3, [sp, #12]
 8007c80:	9b02      	ldr	r3, [sp, #8]
 8007c82:	9c03      	ldr	r4, [sp, #12]
 8007c84:	9308      	str	r3, [sp, #32]
 8007c86:	9409      	str	r4, [sp, #36]	; 0x24
 8007c88:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8007c8a:	0007      	movs	r7, r0
 8007c8c:	9d25      	ldr	r5, [sp, #148]	; 0x94
 8007c8e:	2c00      	cmp	r4, #0
 8007c90:	d10e      	bne.n	8007cb0 <_dtoa_r+0x38>
 8007c92:	2010      	movs	r0, #16
 8007c94:	f001 f982 	bl	8008f9c <malloc>
 8007c98:	1e02      	subs	r2, r0, #0
 8007c9a:	6278      	str	r0, [r7, #36]	; 0x24
 8007c9c:	d104      	bne.n	8007ca8 <_dtoa_r+0x30>
 8007c9e:	21ea      	movs	r1, #234	; 0xea
 8007ca0:	4bc7      	ldr	r3, [pc, #796]	; (8007fc0 <_dtoa_r+0x348>)
 8007ca2:	48c8      	ldr	r0, [pc, #800]	; (8007fc4 <_dtoa_r+0x34c>)
 8007ca4:	f002 f91c 	bl	8009ee0 <__assert_func>
 8007ca8:	6044      	str	r4, [r0, #4]
 8007caa:	6084      	str	r4, [r0, #8]
 8007cac:	6004      	str	r4, [r0, #0]
 8007cae:	60c4      	str	r4, [r0, #12]
 8007cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cb2:	6819      	ldr	r1, [r3, #0]
 8007cb4:	2900      	cmp	r1, #0
 8007cb6:	d00a      	beq.n	8007cce <_dtoa_r+0x56>
 8007cb8:	685a      	ldr	r2, [r3, #4]
 8007cba:	2301      	movs	r3, #1
 8007cbc:	4093      	lsls	r3, r2
 8007cbe:	604a      	str	r2, [r1, #4]
 8007cc0:	608b      	str	r3, [r1, #8]
 8007cc2:	0038      	movs	r0, r7
 8007cc4:	f001 f9de 	bl	8009084 <_Bfree>
 8007cc8:	2200      	movs	r2, #0
 8007cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ccc:	601a      	str	r2, [r3, #0]
 8007cce:	9b03      	ldr	r3, [sp, #12]
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	da20      	bge.n	8007d16 <_dtoa_r+0x9e>
 8007cd4:	2301      	movs	r3, #1
 8007cd6:	602b      	str	r3, [r5, #0]
 8007cd8:	9b03      	ldr	r3, [sp, #12]
 8007cda:	005b      	lsls	r3, r3, #1
 8007cdc:	085b      	lsrs	r3, r3, #1
 8007cde:	9309      	str	r3, [sp, #36]	; 0x24
 8007ce0:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8007ce2:	4bb9      	ldr	r3, [pc, #740]	; (8007fc8 <_dtoa_r+0x350>)
 8007ce4:	4ab8      	ldr	r2, [pc, #736]	; (8007fc8 <_dtoa_r+0x350>)
 8007ce6:	402b      	ands	r3, r5
 8007ce8:	4293      	cmp	r3, r2
 8007cea:	d117      	bne.n	8007d1c <_dtoa_r+0xa4>
 8007cec:	4bb7      	ldr	r3, [pc, #732]	; (8007fcc <_dtoa_r+0x354>)
 8007cee:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007cf0:	0328      	lsls	r0, r5, #12
 8007cf2:	6013      	str	r3, [r2, #0]
 8007cf4:	9b02      	ldr	r3, [sp, #8]
 8007cf6:	0b00      	lsrs	r0, r0, #12
 8007cf8:	4318      	orrs	r0, r3
 8007cfa:	d101      	bne.n	8007d00 <_dtoa_r+0x88>
 8007cfc:	f000 fdbf 	bl	800887e <_dtoa_r+0xc06>
 8007d00:	48b3      	ldr	r0, [pc, #716]	; (8007fd0 <_dtoa_r+0x358>)
 8007d02:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007d04:	9006      	str	r0, [sp, #24]
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d002      	beq.n	8007d10 <_dtoa_r+0x98>
 8007d0a:	4bb2      	ldr	r3, [pc, #712]	; (8007fd4 <_dtoa_r+0x35c>)
 8007d0c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8007d0e:	6013      	str	r3, [r2, #0]
 8007d10:	9806      	ldr	r0, [sp, #24]
 8007d12:	b01d      	add	sp, #116	; 0x74
 8007d14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007d16:	2300      	movs	r3, #0
 8007d18:	602b      	str	r3, [r5, #0]
 8007d1a:	e7e1      	b.n	8007ce0 <_dtoa_r+0x68>
 8007d1c:	9b08      	ldr	r3, [sp, #32]
 8007d1e:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8007d20:	9312      	str	r3, [sp, #72]	; 0x48
 8007d22:	9413      	str	r4, [sp, #76]	; 0x4c
 8007d24:	9812      	ldr	r0, [sp, #72]	; 0x48
 8007d26:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8007d28:	2200      	movs	r2, #0
 8007d2a:	2300      	movs	r3, #0
 8007d2c:	f7f8 fb8c 	bl	8000448 <__aeabi_dcmpeq>
 8007d30:	1e04      	subs	r4, r0, #0
 8007d32:	d009      	beq.n	8007d48 <_dtoa_r+0xd0>
 8007d34:	2301      	movs	r3, #1
 8007d36:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007d38:	6013      	str	r3, [r2, #0]
 8007d3a:	4ba7      	ldr	r3, [pc, #668]	; (8007fd8 <_dtoa_r+0x360>)
 8007d3c:	9306      	str	r3, [sp, #24]
 8007d3e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d0e5      	beq.n	8007d10 <_dtoa_r+0x98>
 8007d44:	4ba5      	ldr	r3, [pc, #660]	; (8007fdc <_dtoa_r+0x364>)
 8007d46:	e7e1      	b.n	8007d0c <_dtoa_r+0x94>
 8007d48:	ab1a      	add	r3, sp, #104	; 0x68
 8007d4a:	9301      	str	r3, [sp, #4]
 8007d4c:	ab1b      	add	r3, sp, #108	; 0x6c
 8007d4e:	9300      	str	r3, [sp, #0]
 8007d50:	0038      	movs	r0, r7
 8007d52:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007d54:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007d56:	f001 fd49 	bl	80097ec <__d2b>
 8007d5a:	006e      	lsls	r6, r5, #1
 8007d5c:	9005      	str	r0, [sp, #20]
 8007d5e:	0d76      	lsrs	r6, r6, #21
 8007d60:	d100      	bne.n	8007d64 <_dtoa_r+0xec>
 8007d62:	e07c      	b.n	8007e5e <_dtoa_r+0x1e6>
 8007d64:	9812      	ldr	r0, [sp, #72]	; 0x48
 8007d66:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8007d68:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007d6a:	4a9d      	ldr	r2, [pc, #628]	; (8007fe0 <_dtoa_r+0x368>)
 8007d6c:	031b      	lsls	r3, r3, #12
 8007d6e:	0b1b      	lsrs	r3, r3, #12
 8007d70:	431a      	orrs	r2, r3
 8007d72:	0011      	movs	r1, r2
 8007d74:	4b9b      	ldr	r3, [pc, #620]	; (8007fe4 <_dtoa_r+0x36c>)
 8007d76:	9418      	str	r4, [sp, #96]	; 0x60
 8007d78:	18f6      	adds	r6, r6, r3
 8007d7a:	2200      	movs	r2, #0
 8007d7c:	4b9a      	ldr	r3, [pc, #616]	; (8007fe8 <_dtoa_r+0x370>)
 8007d7e:	f7fa fac5 	bl	800230c <__aeabi_dsub>
 8007d82:	4a9a      	ldr	r2, [pc, #616]	; (8007fec <_dtoa_r+0x374>)
 8007d84:	4b9a      	ldr	r3, [pc, #616]	; (8007ff0 <_dtoa_r+0x378>)
 8007d86:	f7fa f855 	bl	8001e34 <__aeabi_dmul>
 8007d8a:	4a9a      	ldr	r2, [pc, #616]	; (8007ff4 <_dtoa_r+0x37c>)
 8007d8c:	4b9a      	ldr	r3, [pc, #616]	; (8007ff8 <_dtoa_r+0x380>)
 8007d8e:	f7f9 f913 	bl	8000fb8 <__aeabi_dadd>
 8007d92:	0004      	movs	r4, r0
 8007d94:	0030      	movs	r0, r6
 8007d96:	000d      	movs	r5, r1
 8007d98:	f7fa fe9e 	bl	8002ad8 <__aeabi_i2d>
 8007d9c:	4a97      	ldr	r2, [pc, #604]	; (8007ffc <_dtoa_r+0x384>)
 8007d9e:	4b98      	ldr	r3, [pc, #608]	; (8008000 <_dtoa_r+0x388>)
 8007da0:	f7fa f848 	bl	8001e34 <__aeabi_dmul>
 8007da4:	0002      	movs	r2, r0
 8007da6:	000b      	movs	r3, r1
 8007da8:	0020      	movs	r0, r4
 8007daa:	0029      	movs	r1, r5
 8007dac:	f7f9 f904 	bl	8000fb8 <__aeabi_dadd>
 8007db0:	0004      	movs	r4, r0
 8007db2:	000d      	movs	r5, r1
 8007db4:	f7fa fe5a 	bl	8002a6c <__aeabi_d2iz>
 8007db8:	2200      	movs	r2, #0
 8007dba:	9002      	str	r0, [sp, #8]
 8007dbc:	2300      	movs	r3, #0
 8007dbe:	0020      	movs	r0, r4
 8007dc0:	0029      	movs	r1, r5
 8007dc2:	f7f8 fb47 	bl	8000454 <__aeabi_dcmplt>
 8007dc6:	2800      	cmp	r0, #0
 8007dc8:	d00b      	beq.n	8007de2 <_dtoa_r+0x16a>
 8007dca:	9802      	ldr	r0, [sp, #8]
 8007dcc:	f7fa fe84 	bl	8002ad8 <__aeabi_i2d>
 8007dd0:	002b      	movs	r3, r5
 8007dd2:	0022      	movs	r2, r4
 8007dd4:	f7f8 fb38 	bl	8000448 <__aeabi_dcmpeq>
 8007dd8:	4243      	negs	r3, r0
 8007dda:	4158      	adcs	r0, r3
 8007ddc:	9b02      	ldr	r3, [sp, #8]
 8007dde:	1a1b      	subs	r3, r3, r0
 8007de0:	9302      	str	r3, [sp, #8]
 8007de2:	2301      	movs	r3, #1
 8007de4:	9316      	str	r3, [sp, #88]	; 0x58
 8007de6:	9b02      	ldr	r3, [sp, #8]
 8007de8:	2b16      	cmp	r3, #22
 8007dea:	d80f      	bhi.n	8007e0c <_dtoa_r+0x194>
 8007dec:	9812      	ldr	r0, [sp, #72]	; 0x48
 8007dee:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8007df0:	00da      	lsls	r2, r3, #3
 8007df2:	4b84      	ldr	r3, [pc, #528]	; (8008004 <_dtoa_r+0x38c>)
 8007df4:	189b      	adds	r3, r3, r2
 8007df6:	681a      	ldr	r2, [r3, #0]
 8007df8:	685b      	ldr	r3, [r3, #4]
 8007dfa:	f7f8 fb2b 	bl	8000454 <__aeabi_dcmplt>
 8007dfe:	2800      	cmp	r0, #0
 8007e00:	d049      	beq.n	8007e96 <_dtoa_r+0x21e>
 8007e02:	9b02      	ldr	r3, [sp, #8]
 8007e04:	3b01      	subs	r3, #1
 8007e06:	9302      	str	r3, [sp, #8]
 8007e08:	2300      	movs	r3, #0
 8007e0a:	9316      	str	r3, [sp, #88]	; 0x58
 8007e0c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8007e0e:	1b9e      	subs	r6, r3, r6
 8007e10:	2300      	movs	r3, #0
 8007e12:	930a      	str	r3, [sp, #40]	; 0x28
 8007e14:	0033      	movs	r3, r6
 8007e16:	3b01      	subs	r3, #1
 8007e18:	930d      	str	r3, [sp, #52]	; 0x34
 8007e1a:	d504      	bpl.n	8007e26 <_dtoa_r+0x1ae>
 8007e1c:	2301      	movs	r3, #1
 8007e1e:	1b9b      	subs	r3, r3, r6
 8007e20:	930a      	str	r3, [sp, #40]	; 0x28
 8007e22:	2300      	movs	r3, #0
 8007e24:	930d      	str	r3, [sp, #52]	; 0x34
 8007e26:	9b02      	ldr	r3, [sp, #8]
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	db36      	blt.n	8007e9a <_dtoa_r+0x222>
 8007e2c:	9a02      	ldr	r2, [sp, #8]
 8007e2e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007e30:	4694      	mov	ip, r2
 8007e32:	4463      	add	r3, ip
 8007e34:	930d      	str	r3, [sp, #52]	; 0x34
 8007e36:	2300      	movs	r3, #0
 8007e38:	9215      	str	r2, [sp, #84]	; 0x54
 8007e3a:	930e      	str	r3, [sp, #56]	; 0x38
 8007e3c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007e3e:	2401      	movs	r4, #1
 8007e40:	2b09      	cmp	r3, #9
 8007e42:	d864      	bhi.n	8007f0e <_dtoa_r+0x296>
 8007e44:	2b05      	cmp	r3, #5
 8007e46:	dd02      	ble.n	8007e4e <_dtoa_r+0x1d6>
 8007e48:	2400      	movs	r4, #0
 8007e4a:	3b04      	subs	r3, #4
 8007e4c:	9322      	str	r3, [sp, #136]	; 0x88
 8007e4e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007e50:	1e98      	subs	r0, r3, #2
 8007e52:	2803      	cmp	r0, #3
 8007e54:	d864      	bhi.n	8007f20 <_dtoa_r+0x2a8>
 8007e56:	f7f8 f95d 	bl	8000114 <__gnu_thumb1_case_uqi>
 8007e5a:	3829      	.short	0x3829
 8007e5c:	5836      	.short	0x5836
 8007e5e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8007e60:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8007e62:	189e      	adds	r6, r3, r2
 8007e64:	4b68      	ldr	r3, [pc, #416]	; (8008008 <_dtoa_r+0x390>)
 8007e66:	18f2      	adds	r2, r6, r3
 8007e68:	2a20      	cmp	r2, #32
 8007e6a:	dd0f      	ble.n	8007e8c <_dtoa_r+0x214>
 8007e6c:	2340      	movs	r3, #64	; 0x40
 8007e6e:	1a9b      	subs	r3, r3, r2
 8007e70:	409d      	lsls	r5, r3
 8007e72:	4b66      	ldr	r3, [pc, #408]	; (800800c <_dtoa_r+0x394>)
 8007e74:	9802      	ldr	r0, [sp, #8]
 8007e76:	18f3      	adds	r3, r6, r3
 8007e78:	40d8      	lsrs	r0, r3
 8007e7a:	4328      	orrs	r0, r5
 8007e7c:	f7fa fe5c 	bl	8002b38 <__aeabi_ui2d>
 8007e80:	2301      	movs	r3, #1
 8007e82:	4c63      	ldr	r4, [pc, #396]	; (8008010 <_dtoa_r+0x398>)
 8007e84:	3e01      	subs	r6, #1
 8007e86:	1909      	adds	r1, r1, r4
 8007e88:	9318      	str	r3, [sp, #96]	; 0x60
 8007e8a:	e776      	b.n	8007d7a <_dtoa_r+0x102>
 8007e8c:	2320      	movs	r3, #32
 8007e8e:	9802      	ldr	r0, [sp, #8]
 8007e90:	1a9b      	subs	r3, r3, r2
 8007e92:	4098      	lsls	r0, r3
 8007e94:	e7f2      	b.n	8007e7c <_dtoa_r+0x204>
 8007e96:	9016      	str	r0, [sp, #88]	; 0x58
 8007e98:	e7b8      	b.n	8007e0c <_dtoa_r+0x194>
 8007e9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e9c:	9a02      	ldr	r2, [sp, #8]
 8007e9e:	1a9b      	subs	r3, r3, r2
 8007ea0:	930a      	str	r3, [sp, #40]	; 0x28
 8007ea2:	4253      	negs	r3, r2
 8007ea4:	930e      	str	r3, [sp, #56]	; 0x38
 8007ea6:	2300      	movs	r3, #0
 8007ea8:	9315      	str	r3, [sp, #84]	; 0x54
 8007eaa:	e7c7      	b.n	8007e3c <_dtoa_r+0x1c4>
 8007eac:	2300      	movs	r3, #0
 8007eae:	930f      	str	r3, [sp, #60]	; 0x3c
 8007eb0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007eb2:	930c      	str	r3, [sp, #48]	; 0x30
 8007eb4:	9307      	str	r3, [sp, #28]
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	dc13      	bgt.n	8007ee2 <_dtoa_r+0x26a>
 8007eba:	2301      	movs	r3, #1
 8007ebc:	001a      	movs	r2, r3
 8007ebe:	930c      	str	r3, [sp, #48]	; 0x30
 8007ec0:	9307      	str	r3, [sp, #28]
 8007ec2:	9223      	str	r2, [sp, #140]	; 0x8c
 8007ec4:	e00d      	b.n	8007ee2 <_dtoa_r+0x26a>
 8007ec6:	2301      	movs	r3, #1
 8007ec8:	e7f1      	b.n	8007eae <_dtoa_r+0x236>
 8007eca:	2300      	movs	r3, #0
 8007ecc:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8007ece:	930f      	str	r3, [sp, #60]	; 0x3c
 8007ed0:	4694      	mov	ip, r2
 8007ed2:	9b02      	ldr	r3, [sp, #8]
 8007ed4:	4463      	add	r3, ip
 8007ed6:	930c      	str	r3, [sp, #48]	; 0x30
 8007ed8:	3301      	adds	r3, #1
 8007eda:	9307      	str	r3, [sp, #28]
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	dc00      	bgt.n	8007ee2 <_dtoa_r+0x26a>
 8007ee0:	2301      	movs	r3, #1
 8007ee2:	2200      	movs	r2, #0
 8007ee4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007ee6:	6042      	str	r2, [r0, #4]
 8007ee8:	3204      	adds	r2, #4
 8007eea:	0015      	movs	r5, r2
 8007eec:	3514      	adds	r5, #20
 8007eee:	6841      	ldr	r1, [r0, #4]
 8007ef0:	429d      	cmp	r5, r3
 8007ef2:	d919      	bls.n	8007f28 <_dtoa_r+0x2b0>
 8007ef4:	0038      	movs	r0, r7
 8007ef6:	f001 f881 	bl	8008ffc <_Balloc>
 8007efa:	9006      	str	r0, [sp, #24]
 8007efc:	2800      	cmp	r0, #0
 8007efe:	d117      	bne.n	8007f30 <_dtoa_r+0x2b8>
 8007f00:	21d5      	movs	r1, #213	; 0xd5
 8007f02:	0002      	movs	r2, r0
 8007f04:	4b43      	ldr	r3, [pc, #268]	; (8008014 <_dtoa_r+0x39c>)
 8007f06:	0049      	lsls	r1, r1, #1
 8007f08:	e6cb      	b.n	8007ca2 <_dtoa_r+0x2a>
 8007f0a:	2301      	movs	r3, #1
 8007f0c:	e7de      	b.n	8007ecc <_dtoa_r+0x254>
 8007f0e:	2300      	movs	r3, #0
 8007f10:	940f      	str	r4, [sp, #60]	; 0x3c
 8007f12:	9322      	str	r3, [sp, #136]	; 0x88
 8007f14:	3b01      	subs	r3, #1
 8007f16:	930c      	str	r3, [sp, #48]	; 0x30
 8007f18:	9307      	str	r3, [sp, #28]
 8007f1a:	2200      	movs	r2, #0
 8007f1c:	3313      	adds	r3, #19
 8007f1e:	e7d0      	b.n	8007ec2 <_dtoa_r+0x24a>
 8007f20:	2301      	movs	r3, #1
 8007f22:	930f      	str	r3, [sp, #60]	; 0x3c
 8007f24:	3b02      	subs	r3, #2
 8007f26:	e7f6      	b.n	8007f16 <_dtoa_r+0x29e>
 8007f28:	3101      	adds	r1, #1
 8007f2a:	6041      	str	r1, [r0, #4]
 8007f2c:	0052      	lsls	r2, r2, #1
 8007f2e:	e7dc      	b.n	8007eea <_dtoa_r+0x272>
 8007f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f32:	9a06      	ldr	r2, [sp, #24]
 8007f34:	601a      	str	r2, [r3, #0]
 8007f36:	9b07      	ldr	r3, [sp, #28]
 8007f38:	2b0e      	cmp	r3, #14
 8007f3a:	d900      	bls.n	8007f3e <_dtoa_r+0x2c6>
 8007f3c:	e0eb      	b.n	8008116 <_dtoa_r+0x49e>
 8007f3e:	2c00      	cmp	r4, #0
 8007f40:	d100      	bne.n	8007f44 <_dtoa_r+0x2cc>
 8007f42:	e0e8      	b.n	8008116 <_dtoa_r+0x49e>
 8007f44:	9b02      	ldr	r3, [sp, #8]
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	dd68      	ble.n	800801c <_dtoa_r+0x3a4>
 8007f4a:	001a      	movs	r2, r3
 8007f4c:	210f      	movs	r1, #15
 8007f4e:	4b2d      	ldr	r3, [pc, #180]	; (8008004 <_dtoa_r+0x38c>)
 8007f50:	400a      	ands	r2, r1
 8007f52:	00d2      	lsls	r2, r2, #3
 8007f54:	189b      	adds	r3, r3, r2
 8007f56:	681d      	ldr	r5, [r3, #0]
 8007f58:	685e      	ldr	r6, [r3, #4]
 8007f5a:	9b02      	ldr	r3, [sp, #8]
 8007f5c:	111c      	asrs	r4, r3, #4
 8007f5e:	2302      	movs	r3, #2
 8007f60:	9310      	str	r3, [sp, #64]	; 0x40
 8007f62:	9b02      	ldr	r3, [sp, #8]
 8007f64:	05db      	lsls	r3, r3, #23
 8007f66:	d50b      	bpl.n	8007f80 <_dtoa_r+0x308>
 8007f68:	4b2b      	ldr	r3, [pc, #172]	; (8008018 <_dtoa_r+0x3a0>)
 8007f6a:	400c      	ands	r4, r1
 8007f6c:	6a1a      	ldr	r2, [r3, #32]
 8007f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f70:	9812      	ldr	r0, [sp, #72]	; 0x48
 8007f72:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8007f74:	f7f9 fb5c 	bl	8001630 <__aeabi_ddiv>
 8007f78:	2303      	movs	r3, #3
 8007f7a:	9008      	str	r0, [sp, #32]
 8007f7c:	9109      	str	r1, [sp, #36]	; 0x24
 8007f7e:	9310      	str	r3, [sp, #64]	; 0x40
 8007f80:	4b25      	ldr	r3, [pc, #148]	; (8008018 <_dtoa_r+0x3a0>)
 8007f82:	9314      	str	r3, [sp, #80]	; 0x50
 8007f84:	2c00      	cmp	r4, #0
 8007f86:	d108      	bne.n	8007f9a <_dtoa_r+0x322>
 8007f88:	9808      	ldr	r0, [sp, #32]
 8007f8a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007f8c:	002a      	movs	r2, r5
 8007f8e:	0033      	movs	r3, r6
 8007f90:	f7f9 fb4e 	bl	8001630 <__aeabi_ddiv>
 8007f94:	9008      	str	r0, [sp, #32]
 8007f96:	9109      	str	r1, [sp, #36]	; 0x24
 8007f98:	e05c      	b.n	8008054 <_dtoa_r+0x3dc>
 8007f9a:	2301      	movs	r3, #1
 8007f9c:	421c      	tst	r4, r3
 8007f9e:	d00b      	beq.n	8007fb8 <_dtoa_r+0x340>
 8007fa0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007fa2:	0028      	movs	r0, r5
 8007fa4:	3301      	adds	r3, #1
 8007fa6:	9310      	str	r3, [sp, #64]	; 0x40
 8007fa8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007faa:	0031      	movs	r1, r6
 8007fac:	681a      	ldr	r2, [r3, #0]
 8007fae:	685b      	ldr	r3, [r3, #4]
 8007fb0:	f7f9 ff40 	bl	8001e34 <__aeabi_dmul>
 8007fb4:	0005      	movs	r5, r0
 8007fb6:	000e      	movs	r6, r1
 8007fb8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007fba:	1064      	asrs	r4, r4, #1
 8007fbc:	3308      	adds	r3, #8
 8007fbe:	e7e0      	b.n	8007f82 <_dtoa_r+0x30a>
 8007fc0:	0800aea6 	.word	0x0800aea6
 8007fc4:	0800aebd 	.word	0x0800aebd
 8007fc8:	7ff00000 	.word	0x7ff00000
 8007fcc:	0000270f 	.word	0x0000270f
 8007fd0:	0800aea2 	.word	0x0800aea2
 8007fd4:	0800aea5 	.word	0x0800aea5
 8007fd8:	0800ad1c 	.word	0x0800ad1c
 8007fdc:	0800ad1d 	.word	0x0800ad1d
 8007fe0:	3ff00000 	.word	0x3ff00000
 8007fe4:	fffffc01 	.word	0xfffffc01
 8007fe8:	3ff80000 	.word	0x3ff80000
 8007fec:	636f4361 	.word	0x636f4361
 8007ff0:	3fd287a7 	.word	0x3fd287a7
 8007ff4:	8b60c8b3 	.word	0x8b60c8b3
 8007ff8:	3fc68a28 	.word	0x3fc68a28
 8007ffc:	509f79fb 	.word	0x509f79fb
 8008000:	3fd34413 	.word	0x3fd34413
 8008004:	0800b028 	.word	0x0800b028
 8008008:	00000432 	.word	0x00000432
 800800c:	00000412 	.word	0x00000412
 8008010:	fe100000 	.word	0xfe100000
 8008014:	0800af18 	.word	0x0800af18
 8008018:	0800b000 	.word	0x0800b000
 800801c:	2302      	movs	r3, #2
 800801e:	9310      	str	r3, [sp, #64]	; 0x40
 8008020:	9b02      	ldr	r3, [sp, #8]
 8008022:	2b00      	cmp	r3, #0
 8008024:	d016      	beq.n	8008054 <_dtoa_r+0x3dc>
 8008026:	9812      	ldr	r0, [sp, #72]	; 0x48
 8008028:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800802a:	425c      	negs	r4, r3
 800802c:	230f      	movs	r3, #15
 800802e:	4ab6      	ldr	r2, [pc, #728]	; (8008308 <_dtoa_r+0x690>)
 8008030:	4023      	ands	r3, r4
 8008032:	00db      	lsls	r3, r3, #3
 8008034:	18d3      	adds	r3, r2, r3
 8008036:	681a      	ldr	r2, [r3, #0]
 8008038:	685b      	ldr	r3, [r3, #4]
 800803a:	f7f9 fefb 	bl	8001e34 <__aeabi_dmul>
 800803e:	2601      	movs	r6, #1
 8008040:	2300      	movs	r3, #0
 8008042:	9008      	str	r0, [sp, #32]
 8008044:	9109      	str	r1, [sp, #36]	; 0x24
 8008046:	4db1      	ldr	r5, [pc, #708]	; (800830c <_dtoa_r+0x694>)
 8008048:	1124      	asrs	r4, r4, #4
 800804a:	2c00      	cmp	r4, #0
 800804c:	d000      	beq.n	8008050 <_dtoa_r+0x3d8>
 800804e:	e094      	b.n	800817a <_dtoa_r+0x502>
 8008050:	2b00      	cmp	r3, #0
 8008052:	d19f      	bne.n	8007f94 <_dtoa_r+0x31c>
 8008054:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8008056:	2b00      	cmp	r3, #0
 8008058:	d100      	bne.n	800805c <_dtoa_r+0x3e4>
 800805a:	e09b      	b.n	8008194 <_dtoa_r+0x51c>
 800805c:	9c08      	ldr	r4, [sp, #32]
 800805e:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008060:	2200      	movs	r2, #0
 8008062:	0020      	movs	r0, r4
 8008064:	0029      	movs	r1, r5
 8008066:	4baa      	ldr	r3, [pc, #680]	; (8008310 <_dtoa_r+0x698>)
 8008068:	f7f8 f9f4 	bl	8000454 <__aeabi_dcmplt>
 800806c:	2800      	cmp	r0, #0
 800806e:	d100      	bne.n	8008072 <_dtoa_r+0x3fa>
 8008070:	e090      	b.n	8008194 <_dtoa_r+0x51c>
 8008072:	9b07      	ldr	r3, [sp, #28]
 8008074:	2b00      	cmp	r3, #0
 8008076:	d100      	bne.n	800807a <_dtoa_r+0x402>
 8008078:	e08c      	b.n	8008194 <_dtoa_r+0x51c>
 800807a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800807c:	2b00      	cmp	r3, #0
 800807e:	dd46      	ble.n	800810e <_dtoa_r+0x496>
 8008080:	9b02      	ldr	r3, [sp, #8]
 8008082:	2200      	movs	r2, #0
 8008084:	0020      	movs	r0, r4
 8008086:	0029      	movs	r1, r5
 8008088:	1e5e      	subs	r6, r3, #1
 800808a:	4ba2      	ldr	r3, [pc, #648]	; (8008314 <_dtoa_r+0x69c>)
 800808c:	f7f9 fed2 	bl	8001e34 <__aeabi_dmul>
 8008090:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008092:	9008      	str	r0, [sp, #32]
 8008094:	9109      	str	r1, [sp, #36]	; 0x24
 8008096:	3301      	adds	r3, #1
 8008098:	9310      	str	r3, [sp, #64]	; 0x40
 800809a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800809c:	9810      	ldr	r0, [sp, #64]	; 0x40
 800809e:	9c08      	ldr	r4, [sp, #32]
 80080a0:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80080a2:	9314      	str	r3, [sp, #80]	; 0x50
 80080a4:	f7fa fd18 	bl	8002ad8 <__aeabi_i2d>
 80080a8:	0022      	movs	r2, r4
 80080aa:	002b      	movs	r3, r5
 80080ac:	f7f9 fec2 	bl	8001e34 <__aeabi_dmul>
 80080b0:	2200      	movs	r2, #0
 80080b2:	4b99      	ldr	r3, [pc, #612]	; (8008318 <_dtoa_r+0x6a0>)
 80080b4:	f7f8 ff80 	bl	8000fb8 <__aeabi_dadd>
 80080b8:	9010      	str	r0, [sp, #64]	; 0x40
 80080ba:	9111      	str	r1, [sp, #68]	; 0x44
 80080bc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80080be:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80080c0:	9208      	str	r2, [sp, #32]
 80080c2:	9309      	str	r3, [sp, #36]	; 0x24
 80080c4:	4a95      	ldr	r2, [pc, #596]	; (800831c <_dtoa_r+0x6a4>)
 80080c6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80080c8:	4694      	mov	ip, r2
 80080ca:	4463      	add	r3, ip
 80080cc:	9317      	str	r3, [sp, #92]	; 0x5c
 80080ce:	9309      	str	r3, [sp, #36]	; 0x24
 80080d0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d161      	bne.n	800819a <_dtoa_r+0x522>
 80080d6:	2200      	movs	r2, #0
 80080d8:	0020      	movs	r0, r4
 80080da:	0029      	movs	r1, r5
 80080dc:	4b90      	ldr	r3, [pc, #576]	; (8008320 <_dtoa_r+0x6a8>)
 80080de:	f7fa f915 	bl	800230c <__aeabi_dsub>
 80080e2:	9a08      	ldr	r2, [sp, #32]
 80080e4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80080e6:	0004      	movs	r4, r0
 80080e8:	000d      	movs	r5, r1
 80080ea:	f7f8 f9c7 	bl	800047c <__aeabi_dcmpgt>
 80080ee:	2800      	cmp	r0, #0
 80080f0:	d000      	beq.n	80080f4 <_dtoa_r+0x47c>
 80080f2:	e2af      	b.n	8008654 <_dtoa_r+0x9dc>
 80080f4:	488b      	ldr	r0, [pc, #556]	; (8008324 <_dtoa_r+0x6ac>)
 80080f6:	9911      	ldr	r1, [sp, #68]	; 0x44
 80080f8:	4684      	mov	ip, r0
 80080fa:	4461      	add	r1, ip
 80080fc:	000b      	movs	r3, r1
 80080fe:	0020      	movs	r0, r4
 8008100:	0029      	movs	r1, r5
 8008102:	9a08      	ldr	r2, [sp, #32]
 8008104:	f7f8 f9a6 	bl	8000454 <__aeabi_dcmplt>
 8008108:	2800      	cmp	r0, #0
 800810a:	d000      	beq.n	800810e <_dtoa_r+0x496>
 800810c:	e29f      	b.n	800864e <_dtoa_r+0x9d6>
 800810e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008110:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8008112:	9308      	str	r3, [sp, #32]
 8008114:	9409      	str	r4, [sp, #36]	; 0x24
 8008116:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008118:	2b00      	cmp	r3, #0
 800811a:	da00      	bge.n	800811e <_dtoa_r+0x4a6>
 800811c:	e172      	b.n	8008404 <_dtoa_r+0x78c>
 800811e:	9a02      	ldr	r2, [sp, #8]
 8008120:	2a0e      	cmp	r2, #14
 8008122:	dd00      	ble.n	8008126 <_dtoa_r+0x4ae>
 8008124:	e16e      	b.n	8008404 <_dtoa_r+0x78c>
 8008126:	4b78      	ldr	r3, [pc, #480]	; (8008308 <_dtoa_r+0x690>)
 8008128:	00d2      	lsls	r2, r2, #3
 800812a:	189b      	adds	r3, r3, r2
 800812c:	685c      	ldr	r4, [r3, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	930a      	str	r3, [sp, #40]	; 0x28
 8008132:	940b      	str	r4, [sp, #44]	; 0x2c
 8008134:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008136:	2b00      	cmp	r3, #0
 8008138:	db00      	blt.n	800813c <_dtoa_r+0x4c4>
 800813a:	e0f7      	b.n	800832c <_dtoa_r+0x6b4>
 800813c:	9b07      	ldr	r3, [sp, #28]
 800813e:	2b00      	cmp	r3, #0
 8008140:	dd00      	ble.n	8008144 <_dtoa_r+0x4cc>
 8008142:	e0f3      	b.n	800832c <_dtoa_r+0x6b4>
 8008144:	d000      	beq.n	8008148 <_dtoa_r+0x4d0>
 8008146:	e282      	b.n	800864e <_dtoa_r+0x9d6>
 8008148:	980a      	ldr	r0, [sp, #40]	; 0x28
 800814a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800814c:	2200      	movs	r2, #0
 800814e:	4b74      	ldr	r3, [pc, #464]	; (8008320 <_dtoa_r+0x6a8>)
 8008150:	f7f9 fe70 	bl	8001e34 <__aeabi_dmul>
 8008154:	9a08      	ldr	r2, [sp, #32]
 8008156:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008158:	f7f8 f99a 	bl	8000490 <__aeabi_dcmpge>
 800815c:	9e07      	ldr	r6, [sp, #28]
 800815e:	0035      	movs	r5, r6
 8008160:	2800      	cmp	r0, #0
 8008162:	d000      	beq.n	8008166 <_dtoa_r+0x4ee>
 8008164:	e259      	b.n	800861a <_dtoa_r+0x9a2>
 8008166:	9b06      	ldr	r3, [sp, #24]
 8008168:	9a06      	ldr	r2, [sp, #24]
 800816a:	3301      	adds	r3, #1
 800816c:	9308      	str	r3, [sp, #32]
 800816e:	2331      	movs	r3, #49	; 0x31
 8008170:	7013      	strb	r3, [r2, #0]
 8008172:	9b02      	ldr	r3, [sp, #8]
 8008174:	3301      	adds	r3, #1
 8008176:	9302      	str	r3, [sp, #8]
 8008178:	e254      	b.n	8008624 <_dtoa_r+0x9ac>
 800817a:	4234      	tst	r4, r6
 800817c:	d007      	beq.n	800818e <_dtoa_r+0x516>
 800817e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008180:	3301      	adds	r3, #1
 8008182:	9310      	str	r3, [sp, #64]	; 0x40
 8008184:	682a      	ldr	r2, [r5, #0]
 8008186:	686b      	ldr	r3, [r5, #4]
 8008188:	f7f9 fe54 	bl	8001e34 <__aeabi_dmul>
 800818c:	0033      	movs	r3, r6
 800818e:	1064      	asrs	r4, r4, #1
 8008190:	3508      	adds	r5, #8
 8008192:	e75a      	b.n	800804a <_dtoa_r+0x3d2>
 8008194:	9e02      	ldr	r6, [sp, #8]
 8008196:	9b07      	ldr	r3, [sp, #28]
 8008198:	e780      	b.n	800809c <_dtoa_r+0x424>
 800819a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800819c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800819e:	1e5a      	subs	r2, r3, #1
 80081a0:	4b59      	ldr	r3, [pc, #356]	; (8008308 <_dtoa_r+0x690>)
 80081a2:	00d2      	lsls	r2, r2, #3
 80081a4:	189b      	adds	r3, r3, r2
 80081a6:	681a      	ldr	r2, [r3, #0]
 80081a8:	685b      	ldr	r3, [r3, #4]
 80081aa:	2900      	cmp	r1, #0
 80081ac:	d051      	beq.n	8008252 <_dtoa_r+0x5da>
 80081ae:	2000      	movs	r0, #0
 80081b0:	495d      	ldr	r1, [pc, #372]	; (8008328 <_dtoa_r+0x6b0>)
 80081b2:	f7f9 fa3d 	bl	8001630 <__aeabi_ddiv>
 80081b6:	9a08      	ldr	r2, [sp, #32]
 80081b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80081ba:	f7fa f8a7 	bl	800230c <__aeabi_dsub>
 80081be:	9a06      	ldr	r2, [sp, #24]
 80081c0:	9b06      	ldr	r3, [sp, #24]
 80081c2:	4694      	mov	ip, r2
 80081c4:	9317      	str	r3, [sp, #92]	; 0x5c
 80081c6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80081c8:	9010      	str	r0, [sp, #64]	; 0x40
 80081ca:	9111      	str	r1, [sp, #68]	; 0x44
 80081cc:	4463      	add	r3, ip
 80081ce:	9319      	str	r3, [sp, #100]	; 0x64
 80081d0:	0029      	movs	r1, r5
 80081d2:	0020      	movs	r0, r4
 80081d4:	f7fa fc4a 	bl	8002a6c <__aeabi_d2iz>
 80081d8:	9014      	str	r0, [sp, #80]	; 0x50
 80081da:	f7fa fc7d 	bl	8002ad8 <__aeabi_i2d>
 80081de:	0002      	movs	r2, r0
 80081e0:	000b      	movs	r3, r1
 80081e2:	0020      	movs	r0, r4
 80081e4:	0029      	movs	r1, r5
 80081e6:	f7fa f891 	bl	800230c <__aeabi_dsub>
 80081ea:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80081ec:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80081ee:	3301      	adds	r3, #1
 80081f0:	9308      	str	r3, [sp, #32]
 80081f2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80081f4:	0004      	movs	r4, r0
 80081f6:	3330      	adds	r3, #48	; 0x30
 80081f8:	7013      	strb	r3, [r2, #0]
 80081fa:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80081fc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80081fe:	000d      	movs	r5, r1
 8008200:	f7f8 f928 	bl	8000454 <__aeabi_dcmplt>
 8008204:	2800      	cmp	r0, #0
 8008206:	d175      	bne.n	80082f4 <_dtoa_r+0x67c>
 8008208:	0022      	movs	r2, r4
 800820a:	002b      	movs	r3, r5
 800820c:	2000      	movs	r0, #0
 800820e:	4940      	ldr	r1, [pc, #256]	; (8008310 <_dtoa_r+0x698>)
 8008210:	f7fa f87c 	bl	800230c <__aeabi_dsub>
 8008214:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008216:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008218:	f7f8 f91c 	bl	8000454 <__aeabi_dcmplt>
 800821c:	2800      	cmp	r0, #0
 800821e:	d000      	beq.n	8008222 <_dtoa_r+0x5aa>
 8008220:	e0d2      	b.n	80083c8 <_dtoa_r+0x750>
 8008222:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008224:	9a08      	ldr	r2, [sp, #32]
 8008226:	4293      	cmp	r3, r2
 8008228:	d100      	bne.n	800822c <_dtoa_r+0x5b4>
 800822a:	e770      	b.n	800810e <_dtoa_r+0x496>
 800822c:	9810      	ldr	r0, [sp, #64]	; 0x40
 800822e:	9911      	ldr	r1, [sp, #68]	; 0x44
 8008230:	2200      	movs	r2, #0
 8008232:	4b38      	ldr	r3, [pc, #224]	; (8008314 <_dtoa_r+0x69c>)
 8008234:	f7f9 fdfe 	bl	8001e34 <__aeabi_dmul>
 8008238:	4b36      	ldr	r3, [pc, #216]	; (8008314 <_dtoa_r+0x69c>)
 800823a:	9010      	str	r0, [sp, #64]	; 0x40
 800823c:	9111      	str	r1, [sp, #68]	; 0x44
 800823e:	2200      	movs	r2, #0
 8008240:	0020      	movs	r0, r4
 8008242:	0029      	movs	r1, r5
 8008244:	f7f9 fdf6 	bl	8001e34 <__aeabi_dmul>
 8008248:	9b08      	ldr	r3, [sp, #32]
 800824a:	0004      	movs	r4, r0
 800824c:	000d      	movs	r5, r1
 800824e:	9317      	str	r3, [sp, #92]	; 0x5c
 8008250:	e7be      	b.n	80081d0 <_dtoa_r+0x558>
 8008252:	9808      	ldr	r0, [sp, #32]
 8008254:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008256:	f7f9 fded 	bl	8001e34 <__aeabi_dmul>
 800825a:	9a06      	ldr	r2, [sp, #24]
 800825c:	9b06      	ldr	r3, [sp, #24]
 800825e:	4694      	mov	ip, r2
 8008260:	9308      	str	r3, [sp, #32]
 8008262:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008264:	9010      	str	r0, [sp, #64]	; 0x40
 8008266:	9111      	str	r1, [sp, #68]	; 0x44
 8008268:	4463      	add	r3, ip
 800826a:	9319      	str	r3, [sp, #100]	; 0x64
 800826c:	0029      	movs	r1, r5
 800826e:	0020      	movs	r0, r4
 8008270:	f7fa fbfc 	bl	8002a6c <__aeabi_d2iz>
 8008274:	9017      	str	r0, [sp, #92]	; 0x5c
 8008276:	f7fa fc2f 	bl	8002ad8 <__aeabi_i2d>
 800827a:	0002      	movs	r2, r0
 800827c:	000b      	movs	r3, r1
 800827e:	0020      	movs	r0, r4
 8008280:	0029      	movs	r1, r5
 8008282:	f7fa f843 	bl	800230c <__aeabi_dsub>
 8008286:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008288:	9a08      	ldr	r2, [sp, #32]
 800828a:	3330      	adds	r3, #48	; 0x30
 800828c:	7013      	strb	r3, [r2, #0]
 800828e:	0013      	movs	r3, r2
 8008290:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008292:	3301      	adds	r3, #1
 8008294:	0004      	movs	r4, r0
 8008296:	000d      	movs	r5, r1
 8008298:	9308      	str	r3, [sp, #32]
 800829a:	4293      	cmp	r3, r2
 800829c:	d12c      	bne.n	80082f8 <_dtoa_r+0x680>
 800829e:	9810      	ldr	r0, [sp, #64]	; 0x40
 80082a0:	9911      	ldr	r1, [sp, #68]	; 0x44
 80082a2:	9a06      	ldr	r2, [sp, #24]
 80082a4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80082a6:	4694      	mov	ip, r2
 80082a8:	4463      	add	r3, ip
 80082aa:	2200      	movs	r2, #0
 80082ac:	9308      	str	r3, [sp, #32]
 80082ae:	4b1e      	ldr	r3, [pc, #120]	; (8008328 <_dtoa_r+0x6b0>)
 80082b0:	f7f8 fe82 	bl	8000fb8 <__aeabi_dadd>
 80082b4:	0002      	movs	r2, r0
 80082b6:	000b      	movs	r3, r1
 80082b8:	0020      	movs	r0, r4
 80082ba:	0029      	movs	r1, r5
 80082bc:	f7f8 f8de 	bl	800047c <__aeabi_dcmpgt>
 80082c0:	2800      	cmp	r0, #0
 80082c2:	d000      	beq.n	80082c6 <_dtoa_r+0x64e>
 80082c4:	e080      	b.n	80083c8 <_dtoa_r+0x750>
 80082c6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80082c8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80082ca:	2000      	movs	r0, #0
 80082cc:	4916      	ldr	r1, [pc, #88]	; (8008328 <_dtoa_r+0x6b0>)
 80082ce:	f7fa f81d 	bl	800230c <__aeabi_dsub>
 80082d2:	0002      	movs	r2, r0
 80082d4:	000b      	movs	r3, r1
 80082d6:	0020      	movs	r0, r4
 80082d8:	0029      	movs	r1, r5
 80082da:	f7f8 f8bb 	bl	8000454 <__aeabi_dcmplt>
 80082de:	2800      	cmp	r0, #0
 80082e0:	d100      	bne.n	80082e4 <_dtoa_r+0x66c>
 80082e2:	e714      	b.n	800810e <_dtoa_r+0x496>
 80082e4:	9b08      	ldr	r3, [sp, #32]
 80082e6:	001a      	movs	r2, r3
 80082e8:	3a01      	subs	r2, #1
 80082ea:	9208      	str	r2, [sp, #32]
 80082ec:	7812      	ldrb	r2, [r2, #0]
 80082ee:	2a30      	cmp	r2, #48	; 0x30
 80082f0:	d0f8      	beq.n	80082e4 <_dtoa_r+0x66c>
 80082f2:	9308      	str	r3, [sp, #32]
 80082f4:	9602      	str	r6, [sp, #8]
 80082f6:	e055      	b.n	80083a4 <_dtoa_r+0x72c>
 80082f8:	2200      	movs	r2, #0
 80082fa:	4b06      	ldr	r3, [pc, #24]	; (8008314 <_dtoa_r+0x69c>)
 80082fc:	f7f9 fd9a 	bl	8001e34 <__aeabi_dmul>
 8008300:	0004      	movs	r4, r0
 8008302:	000d      	movs	r5, r1
 8008304:	e7b2      	b.n	800826c <_dtoa_r+0x5f4>
 8008306:	46c0      	nop			; (mov r8, r8)
 8008308:	0800b028 	.word	0x0800b028
 800830c:	0800b000 	.word	0x0800b000
 8008310:	3ff00000 	.word	0x3ff00000
 8008314:	40240000 	.word	0x40240000
 8008318:	401c0000 	.word	0x401c0000
 800831c:	fcc00000 	.word	0xfcc00000
 8008320:	40140000 	.word	0x40140000
 8008324:	7cc00000 	.word	0x7cc00000
 8008328:	3fe00000 	.word	0x3fe00000
 800832c:	9b07      	ldr	r3, [sp, #28]
 800832e:	9e06      	ldr	r6, [sp, #24]
 8008330:	3b01      	subs	r3, #1
 8008332:	199b      	adds	r3, r3, r6
 8008334:	930c      	str	r3, [sp, #48]	; 0x30
 8008336:	9c08      	ldr	r4, [sp, #32]
 8008338:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800833a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800833c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800833e:	0020      	movs	r0, r4
 8008340:	0029      	movs	r1, r5
 8008342:	f7f9 f975 	bl	8001630 <__aeabi_ddiv>
 8008346:	f7fa fb91 	bl	8002a6c <__aeabi_d2iz>
 800834a:	9007      	str	r0, [sp, #28]
 800834c:	f7fa fbc4 	bl	8002ad8 <__aeabi_i2d>
 8008350:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008352:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008354:	f7f9 fd6e 	bl	8001e34 <__aeabi_dmul>
 8008358:	0002      	movs	r2, r0
 800835a:	000b      	movs	r3, r1
 800835c:	0020      	movs	r0, r4
 800835e:	0029      	movs	r1, r5
 8008360:	f7f9 ffd4 	bl	800230c <__aeabi_dsub>
 8008364:	0033      	movs	r3, r6
 8008366:	9a07      	ldr	r2, [sp, #28]
 8008368:	3601      	adds	r6, #1
 800836a:	3230      	adds	r2, #48	; 0x30
 800836c:	701a      	strb	r2, [r3, #0]
 800836e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008370:	9608      	str	r6, [sp, #32]
 8008372:	429a      	cmp	r2, r3
 8008374:	d139      	bne.n	80083ea <_dtoa_r+0x772>
 8008376:	0002      	movs	r2, r0
 8008378:	000b      	movs	r3, r1
 800837a:	f7f8 fe1d 	bl	8000fb8 <__aeabi_dadd>
 800837e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008380:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008382:	0004      	movs	r4, r0
 8008384:	000d      	movs	r5, r1
 8008386:	f7f8 f879 	bl	800047c <__aeabi_dcmpgt>
 800838a:	2800      	cmp	r0, #0
 800838c:	d11b      	bne.n	80083c6 <_dtoa_r+0x74e>
 800838e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008390:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008392:	0020      	movs	r0, r4
 8008394:	0029      	movs	r1, r5
 8008396:	f7f8 f857 	bl	8000448 <__aeabi_dcmpeq>
 800839a:	2800      	cmp	r0, #0
 800839c:	d002      	beq.n	80083a4 <_dtoa_r+0x72c>
 800839e:	9b07      	ldr	r3, [sp, #28]
 80083a0:	07db      	lsls	r3, r3, #31
 80083a2:	d410      	bmi.n	80083c6 <_dtoa_r+0x74e>
 80083a4:	0038      	movs	r0, r7
 80083a6:	9905      	ldr	r1, [sp, #20]
 80083a8:	f000 fe6c 	bl	8009084 <_Bfree>
 80083ac:	2300      	movs	r3, #0
 80083ae:	9a08      	ldr	r2, [sp, #32]
 80083b0:	9802      	ldr	r0, [sp, #8]
 80083b2:	7013      	strb	r3, [r2, #0]
 80083b4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80083b6:	3001      	adds	r0, #1
 80083b8:	6018      	str	r0, [r3, #0]
 80083ba:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d100      	bne.n	80083c2 <_dtoa_r+0x74a>
 80083c0:	e4a6      	b.n	8007d10 <_dtoa_r+0x98>
 80083c2:	601a      	str	r2, [r3, #0]
 80083c4:	e4a4      	b.n	8007d10 <_dtoa_r+0x98>
 80083c6:	9e02      	ldr	r6, [sp, #8]
 80083c8:	9b08      	ldr	r3, [sp, #32]
 80083ca:	9308      	str	r3, [sp, #32]
 80083cc:	3b01      	subs	r3, #1
 80083ce:	781a      	ldrb	r2, [r3, #0]
 80083d0:	2a39      	cmp	r2, #57	; 0x39
 80083d2:	d106      	bne.n	80083e2 <_dtoa_r+0x76a>
 80083d4:	9a06      	ldr	r2, [sp, #24]
 80083d6:	429a      	cmp	r2, r3
 80083d8:	d1f7      	bne.n	80083ca <_dtoa_r+0x752>
 80083da:	2230      	movs	r2, #48	; 0x30
 80083dc:	9906      	ldr	r1, [sp, #24]
 80083de:	3601      	adds	r6, #1
 80083e0:	700a      	strb	r2, [r1, #0]
 80083e2:	781a      	ldrb	r2, [r3, #0]
 80083e4:	3201      	adds	r2, #1
 80083e6:	701a      	strb	r2, [r3, #0]
 80083e8:	e784      	b.n	80082f4 <_dtoa_r+0x67c>
 80083ea:	2200      	movs	r2, #0
 80083ec:	4baa      	ldr	r3, [pc, #680]	; (8008698 <_dtoa_r+0xa20>)
 80083ee:	f7f9 fd21 	bl	8001e34 <__aeabi_dmul>
 80083f2:	2200      	movs	r2, #0
 80083f4:	2300      	movs	r3, #0
 80083f6:	0004      	movs	r4, r0
 80083f8:	000d      	movs	r5, r1
 80083fa:	f7f8 f825 	bl	8000448 <__aeabi_dcmpeq>
 80083fe:	2800      	cmp	r0, #0
 8008400:	d09b      	beq.n	800833a <_dtoa_r+0x6c2>
 8008402:	e7cf      	b.n	80083a4 <_dtoa_r+0x72c>
 8008404:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008406:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8008408:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800840a:	2d00      	cmp	r5, #0
 800840c:	d012      	beq.n	8008434 <_dtoa_r+0x7bc>
 800840e:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8008410:	2a01      	cmp	r2, #1
 8008412:	dc66      	bgt.n	80084e2 <_dtoa_r+0x86a>
 8008414:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8008416:	2a00      	cmp	r2, #0
 8008418:	d05d      	beq.n	80084d6 <_dtoa_r+0x85e>
 800841a:	4aa0      	ldr	r2, [pc, #640]	; (800869c <_dtoa_r+0xa24>)
 800841c:	189b      	adds	r3, r3, r2
 800841e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008420:	2101      	movs	r1, #1
 8008422:	18d2      	adds	r2, r2, r3
 8008424:	920a      	str	r2, [sp, #40]	; 0x28
 8008426:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008428:	0038      	movs	r0, r7
 800842a:	18d3      	adds	r3, r2, r3
 800842c:	930d      	str	r3, [sp, #52]	; 0x34
 800842e:	f000 ff25 	bl	800927c <__i2b>
 8008432:	0005      	movs	r5, r0
 8008434:	2c00      	cmp	r4, #0
 8008436:	dd0e      	ble.n	8008456 <_dtoa_r+0x7de>
 8008438:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800843a:	2b00      	cmp	r3, #0
 800843c:	dd0b      	ble.n	8008456 <_dtoa_r+0x7de>
 800843e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008440:	0023      	movs	r3, r4
 8008442:	4294      	cmp	r4, r2
 8008444:	dd00      	ble.n	8008448 <_dtoa_r+0x7d0>
 8008446:	0013      	movs	r3, r2
 8008448:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800844a:	1ae4      	subs	r4, r4, r3
 800844c:	1ad2      	subs	r2, r2, r3
 800844e:	920a      	str	r2, [sp, #40]	; 0x28
 8008450:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008452:	1ad3      	subs	r3, r2, r3
 8008454:	930d      	str	r3, [sp, #52]	; 0x34
 8008456:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008458:	2b00      	cmp	r3, #0
 800845a:	d01f      	beq.n	800849c <_dtoa_r+0x824>
 800845c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800845e:	2b00      	cmp	r3, #0
 8008460:	d054      	beq.n	800850c <_dtoa_r+0x894>
 8008462:	2e00      	cmp	r6, #0
 8008464:	dd11      	ble.n	800848a <_dtoa_r+0x812>
 8008466:	0029      	movs	r1, r5
 8008468:	0032      	movs	r2, r6
 800846a:	0038      	movs	r0, r7
 800846c:	f000 ffcc 	bl	8009408 <__pow5mult>
 8008470:	9a05      	ldr	r2, [sp, #20]
 8008472:	0001      	movs	r1, r0
 8008474:	0005      	movs	r5, r0
 8008476:	0038      	movs	r0, r7
 8008478:	f000 ff16 	bl	80092a8 <__multiply>
 800847c:	9905      	ldr	r1, [sp, #20]
 800847e:	9014      	str	r0, [sp, #80]	; 0x50
 8008480:	0038      	movs	r0, r7
 8008482:	f000 fdff 	bl	8009084 <_Bfree>
 8008486:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008488:	9305      	str	r3, [sp, #20]
 800848a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800848c:	1b9a      	subs	r2, r3, r6
 800848e:	42b3      	cmp	r3, r6
 8008490:	d004      	beq.n	800849c <_dtoa_r+0x824>
 8008492:	0038      	movs	r0, r7
 8008494:	9905      	ldr	r1, [sp, #20]
 8008496:	f000 ffb7 	bl	8009408 <__pow5mult>
 800849a:	9005      	str	r0, [sp, #20]
 800849c:	2101      	movs	r1, #1
 800849e:	0038      	movs	r0, r7
 80084a0:	f000 feec 	bl	800927c <__i2b>
 80084a4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80084a6:	0006      	movs	r6, r0
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	dd31      	ble.n	8008510 <_dtoa_r+0x898>
 80084ac:	001a      	movs	r2, r3
 80084ae:	0001      	movs	r1, r0
 80084b0:	0038      	movs	r0, r7
 80084b2:	f000 ffa9 	bl	8009408 <__pow5mult>
 80084b6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80084b8:	0006      	movs	r6, r0
 80084ba:	2b01      	cmp	r3, #1
 80084bc:	dd2d      	ble.n	800851a <_dtoa_r+0x8a2>
 80084be:	2300      	movs	r3, #0
 80084c0:	930e      	str	r3, [sp, #56]	; 0x38
 80084c2:	6933      	ldr	r3, [r6, #16]
 80084c4:	3303      	adds	r3, #3
 80084c6:	009b      	lsls	r3, r3, #2
 80084c8:	18f3      	adds	r3, r6, r3
 80084ca:	6858      	ldr	r0, [r3, #4]
 80084cc:	f000 fe8e 	bl	80091ec <__hi0bits>
 80084d0:	2320      	movs	r3, #32
 80084d2:	1a18      	subs	r0, r3, r0
 80084d4:	e039      	b.n	800854a <_dtoa_r+0x8d2>
 80084d6:	2336      	movs	r3, #54	; 0x36
 80084d8:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80084da:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 80084dc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80084de:	1a9b      	subs	r3, r3, r2
 80084e0:	e79d      	b.n	800841e <_dtoa_r+0x7a6>
 80084e2:	9b07      	ldr	r3, [sp, #28]
 80084e4:	1e5e      	subs	r6, r3, #1
 80084e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80084e8:	42b3      	cmp	r3, r6
 80084ea:	db07      	blt.n	80084fc <_dtoa_r+0x884>
 80084ec:	1b9e      	subs	r6, r3, r6
 80084ee:	9b07      	ldr	r3, [sp, #28]
 80084f0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	da93      	bge.n	800841e <_dtoa_r+0x7a6>
 80084f6:	1ae4      	subs	r4, r4, r3
 80084f8:	2300      	movs	r3, #0
 80084fa:	e790      	b.n	800841e <_dtoa_r+0x7a6>
 80084fc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80084fe:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008500:	1af3      	subs	r3, r6, r3
 8008502:	18d3      	adds	r3, r2, r3
 8008504:	960e      	str	r6, [sp, #56]	; 0x38
 8008506:	9315      	str	r3, [sp, #84]	; 0x54
 8008508:	2600      	movs	r6, #0
 800850a:	e7f0      	b.n	80084ee <_dtoa_r+0x876>
 800850c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800850e:	e7c0      	b.n	8008492 <_dtoa_r+0x81a>
 8008510:	2300      	movs	r3, #0
 8008512:	930e      	str	r3, [sp, #56]	; 0x38
 8008514:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008516:	2b01      	cmp	r3, #1
 8008518:	dc13      	bgt.n	8008542 <_dtoa_r+0x8ca>
 800851a:	2300      	movs	r3, #0
 800851c:	930e      	str	r3, [sp, #56]	; 0x38
 800851e:	9b08      	ldr	r3, [sp, #32]
 8008520:	2b00      	cmp	r3, #0
 8008522:	d10e      	bne.n	8008542 <_dtoa_r+0x8ca>
 8008524:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008526:	031b      	lsls	r3, r3, #12
 8008528:	d10b      	bne.n	8008542 <_dtoa_r+0x8ca>
 800852a:	4b5d      	ldr	r3, [pc, #372]	; (80086a0 <_dtoa_r+0xa28>)
 800852c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800852e:	4213      	tst	r3, r2
 8008530:	d007      	beq.n	8008542 <_dtoa_r+0x8ca>
 8008532:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008534:	3301      	adds	r3, #1
 8008536:	930a      	str	r3, [sp, #40]	; 0x28
 8008538:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800853a:	3301      	adds	r3, #1
 800853c:	930d      	str	r3, [sp, #52]	; 0x34
 800853e:	2301      	movs	r3, #1
 8008540:	930e      	str	r3, [sp, #56]	; 0x38
 8008542:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008544:	2001      	movs	r0, #1
 8008546:	2b00      	cmp	r3, #0
 8008548:	d1bb      	bne.n	80084c2 <_dtoa_r+0x84a>
 800854a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800854c:	221f      	movs	r2, #31
 800854e:	1818      	adds	r0, r3, r0
 8008550:	0003      	movs	r3, r0
 8008552:	4013      	ands	r3, r2
 8008554:	4210      	tst	r0, r2
 8008556:	d046      	beq.n	80085e6 <_dtoa_r+0x96e>
 8008558:	3201      	adds	r2, #1
 800855a:	1ad2      	subs	r2, r2, r3
 800855c:	2a04      	cmp	r2, #4
 800855e:	dd3f      	ble.n	80085e0 <_dtoa_r+0x968>
 8008560:	221c      	movs	r2, #28
 8008562:	1ad3      	subs	r3, r2, r3
 8008564:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008566:	18e4      	adds	r4, r4, r3
 8008568:	18d2      	adds	r2, r2, r3
 800856a:	920a      	str	r2, [sp, #40]	; 0x28
 800856c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800856e:	18d3      	adds	r3, r2, r3
 8008570:	930d      	str	r3, [sp, #52]	; 0x34
 8008572:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008574:	2b00      	cmp	r3, #0
 8008576:	dd05      	ble.n	8008584 <_dtoa_r+0x90c>
 8008578:	001a      	movs	r2, r3
 800857a:	0038      	movs	r0, r7
 800857c:	9905      	ldr	r1, [sp, #20]
 800857e:	f000 ff9f 	bl	80094c0 <__lshift>
 8008582:	9005      	str	r0, [sp, #20]
 8008584:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008586:	2b00      	cmp	r3, #0
 8008588:	dd05      	ble.n	8008596 <_dtoa_r+0x91e>
 800858a:	0031      	movs	r1, r6
 800858c:	001a      	movs	r2, r3
 800858e:	0038      	movs	r0, r7
 8008590:	f000 ff96 	bl	80094c0 <__lshift>
 8008594:	0006      	movs	r6, r0
 8008596:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8008598:	2b00      	cmp	r3, #0
 800859a:	d026      	beq.n	80085ea <_dtoa_r+0x972>
 800859c:	0031      	movs	r1, r6
 800859e:	9805      	ldr	r0, [sp, #20]
 80085a0:	f000 fffc 	bl	800959c <__mcmp>
 80085a4:	2800      	cmp	r0, #0
 80085a6:	da20      	bge.n	80085ea <_dtoa_r+0x972>
 80085a8:	9b02      	ldr	r3, [sp, #8]
 80085aa:	220a      	movs	r2, #10
 80085ac:	3b01      	subs	r3, #1
 80085ae:	9302      	str	r3, [sp, #8]
 80085b0:	0038      	movs	r0, r7
 80085b2:	2300      	movs	r3, #0
 80085b4:	9905      	ldr	r1, [sp, #20]
 80085b6:	f000 fd89 	bl	80090cc <__multadd>
 80085ba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80085bc:	9005      	str	r0, [sp, #20]
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d100      	bne.n	80085c4 <_dtoa_r+0x94c>
 80085c2:	e166      	b.n	8008892 <_dtoa_r+0xc1a>
 80085c4:	2300      	movs	r3, #0
 80085c6:	0029      	movs	r1, r5
 80085c8:	220a      	movs	r2, #10
 80085ca:	0038      	movs	r0, r7
 80085cc:	f000 fd7e 	bl	80090cc <__multadd>
 80085d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80085d2:	0005      	movs	r5, r0
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	dc47      	bgt.n	8008668 <_dtoa_r+0x9f0>
 80085d8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80085da:	2b02      	cmp	r3, #2
 80085dc:	dc0d      	bgt.n	80085fa <_dtoa_r+0x982>
 80085de:	e043      	b.n	8008668 <_dtoa_r+0x9f0>
 80085e0:	2a04      	cmp	r2, #4
 80085e2:	d0c6      	beq.n	8008572 <_dtoa_r+0x8fa>
 80085e4:	0013      	movs	r3, r2
 80085e6:	331c      	adds	r3, #28
 80085e8:	e7bc      	b.n	8008564 <_dtoa_r+0x8ec>
 80085ea:	9b07      	ldr	r3, [sp, #28]
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	dc35      	bgt.n	800865c <_dtoa_r+0x9e4>
 80085f0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80085f2:	2b02      	cmp	r3, #2
 80085f4:	dd32      	ble.n	800865c <_dtoa_r+0x9e4>
 80085f6:	9b07      	ldr	r3, [sp, #28]
 80085f8:	930c      	str	r3, [sp, #48]	; 0x30
 80085fa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d10c      	bne.n	800861a <_dtoa_r+0x9a2>
 8008600:	0031      	movs	r1, r6
 8008602:	2205      	movs	r2, #5
 8008604:	0038      	movs	r0, r7
 8008606:	f000 fd61 	bl	80090cc <__multadd>
 800860a:	0006      	movs	r6, r0
 800860c:	0001      	movs	r1, r0
 800860e:	9805      	ldr	r0, [sp, #20]
 8008610:	f000 ffc4 	bl	800959c <__mcmp>
 8008614:	2800      	cmp	r0, #0
 8008616:	dd00      	ble.n	800861a <_dtoa_r+0x9a2>
 8008618:	e5a5      	b.n	8008166 <_dtoa_r+0x4ee>
 800861a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800861c:	43db      	mvns	r3, r3
 800861e:	9302      	str	r3, [sp, #8]
 8008620:	9b06      	ldr	r3, [sp, #24]
 8008622:	9308      	str	r3, [sp, #32]
 8008624:	2400      	movs	r4, #0
 8008626:	0031      	movs	r1, r6
 8008628:	0038      	movs	r0, r7
 800862a:	f000 fd2b 	bl	8009084 <_Bfree>
 800862e:	2d00      	cmp	r5, #0
 8008630:	d100      	bne.n	8008634 <_dtoa_r+0x9bc>
 8008632:	e6b7      	b.n	80083a4 <_dtoa_r+0x72c>
 8008634:	2c00      	cmp	r4, #0
 8008636:	d005      	beq.n	8008644 <_dtoa_r+0x9cc>
 8008638:	42ac      	cmp	r4, r5
 800863a:	d003      	beq.n	8008644 <_dtoa_r+0x9cc>
 800863c:	0021      	movs	r1, r4
 800863e:	0038      	movs	r0, r7
 8008640:	f000 fd20 	bl	8009084 <_Bfree>
 8008644:	0029      	movs	r1, r5
 8008646:	0038      	movs	r0, r7
 8008648:	f000 fd1c 	bl	8009084 <_Bfree>
 800864c:	e6aa      	b.n	80083a4 <_dtoa_r+0x72c>
 800864e:	2600      	movs	r6, #0
 8008650:	0035      	movs	r5, r6
 8008652:	e7e2      	b.n	800861a <_dtoa_r+0x9a2>
 8008654:	9602      	str	r6, [sp, #8]
 8008656:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8008658:	0035      	movs	r5, r6
 800865a:	e584      	b.n	8008166 <_dtoa_r+0x4ee>
 800865c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800865e:	2b00      	cmp	r3, #0
 8008660:	d100      	bne.n	8008664 <_dtoa_r+0x9ec>
 8008662:	e0ce      	b.n	8008802 <_dtoa_r+0xb8a>
 8008664:	9b07      	ldr	r3, [sp, #28]
 8008666:	930c      	str	r3, [sp, #48]	; 0x30
 8008668:	2c00      	cmp	r4, #0
 800866a:	dd05      	ble.n	8008678 <_dtoa_r+0xa00>
 800866c:	0029      	movs	r1, r5
 800866e:	0022      	movs	r2, r4
 8008670:	0038      	movs	r0, r7
 8008672:	f000 ff25 	bl	80094c0 <__lshift>
 8008676:	0005      	movs	r5, r0
 8008678:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800867a:	0028      	movs	r0, r5
 800867c:	2b00      	cmp	r3, #0
 800867e:	d022      	beq.n	80086c6 <_dtoa_r+0xa4e>
 8008680:	0038      	movs	r0, r7
 8008682:	6869      	ldr	r1, [r5, #4]
 8008684:	f000 fcba 	bl	8008ffc <_Balloc>
 8008688:	1e04      	subs	r4, r0, #0
 800868a:	d10f      	bne.n	80086ac <_dtoa_r+0xa34>
 800868c:	0002      	movs	r2, r0
 800868e:	4b05      	ldr	r3, [pc, #20]	; (80086a4 <_dtoa_r+0xa2c>)
 8008690:	4905      	ldr	r1, [pc, #20]	; (80086a8 <_dtoa_r+0xa30>)
 8008692:	f7ff fb06 	bl	8007ca2 <_dtoa_r+0x2a>
 8008696:	46c0      	nop			; (mov r8, r8)
 8008698:	40240000 	.word	0x40240000
 800869c:	00000433 	.word	0x00000433
 80086a0:	7ff00000 	.word	0x7ff00000
 80086a4:	0800af18 	.word	0x0800af18
 80086a8:	000002ea 	.word	0x000002ea
 80086ac:	0029      	movs	r1, r5
 80086ae:	692b      	ldr	r3, [r5, #16]
 80086b0:	310c      	adds	r1, #12
 80086b2:	1c9a      	adds	r2, r3, #2
 80086b4:	0092      	lsls	r2, r2, #2
 80086b6:	300c      	adds	r0, #12
 80086b8:	f000 fc97 	bl	8008fea <memcpy>
 80086bc:	2201      	movs	r2, #1
 80086be:	0021      	movs	r1, r4
 80086c0:	0038      	movs	r0, r7
 80086c2:	f000 fefd 	bl	80094c0 <__lshift>
 80086c6:	9b06      	ldr	r3, [sp, #24]
 80086c8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80086ca:	930a      	str	r3, [sp, #40]	; 0x28
 80086cc:	3b01      	subs	r3, #1
 80086ce:	189b      	adds	r3, r3, r2
 80086d0:	2201      	movs	r2, #1
 80086d2:	002c      	movs	r4, r5
 80086d4:	0005      	movs	r5, r0
 80086d6:	9314      	str	r3, [sp, #80]	; 0x50
 80086d8:	9b08      	ldr	r3, [sp, #32]
 80086da:	4013      	ands	r3, r2
 80086dc:	930f      	str	r3, [sp, #60]	; 0x3c
 80086de:	0031      	movs	r1, r6
 80086e0:	9805      	ldr	r0, [sp, #20]
 80086e2:	f7ff fa3d 	bl	8007b60 <quorem>
 80086e6:	0003      	movs	r3, r0
 80086e8:	0021      	movs	r1, r4
 80086ea:	3330      	adds	r3, #48	; 0x30
 80086ec:	900d      	str	r0, [sp, #52]	; 0x34
 80086ee:	9805      	ldr	r0, [sp, #20]
 80086f0:	9307      	str	r3, [sp, #28]
 80086f2:	f000 ff53 	bl	800959c <__mcmp>
 80086f6:	002a      	movs	r2, r5
 80086f8:	900e      	str	r0, [sp, #56]	; 0x38
 80086fa:	0031      	movs	r1, r6
 80086fc:	0038      	movs	r0, r7
 80086fe:	f000 ff69 	bl	80095d4 <__mdiff>
 8008702:	68c3      	ldr	r3, [r0, #12]
 8008704:	9008      	str	r0, [sp, #32]
 8008706:	9310      	str	r3, [sp, #64]	; 0x40
 8008708:	2301      	movs	r3, #1
 800870a:	930c      	str	r3, [sp, #48]	; 0x30
 800870c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800870e:	2b00      	cmp	r3, #0
 8008710:	d104      	bne.n	800871c <_dtoa_r+0xaa4>
 8008712:	0001      	movs	r1, r0
 8008714:	9805      	ldr	r0, [sp, #20]
 8008716:	f000 ff41 	bl	800959c <__mcmp>
 800871a:	900c      	str	r0, [sp, #48]	; 0x30
 800871c:	0038      	movs	r0, r7
 800871e:	9908      	ldr	r1, [sp, #32]
 8008720:	f000 fcb0 	bl	8009084 <_Bfree>
 8008724:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008726:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008728:	3301      	adds	r3, #1
 800872a:	9308      	str	r3, [sp, #32]
 800872c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800872e:	4313      	orrs	r3, r2
 8008730:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008732:	4313      	orrs	r3, r2
 8008734:	d10c      	bne.n	8008750 <_dtoa_r+0xad8>
 8008736:	9b07      	ldr	r3, [sp, #28]
 8008738:	2b39      	cmp	r3, #57	; 0x39
 800873a:	d026      	beq.n	800878a <_dtoa_r+0xb12>
 800873c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800873e:	2b00      	cmp	r3, #0
 8008740:	dd02      	ble.n	8008748 <_dtoa_r+0xad0>
 8008742:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008744:	3331      	adds	r3, #49	; 0x31
 8008746:	9307      	str	r3, [sp, #28]
 8008748:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800874a:	9a07      	ldr	r2, [sp, #28]
 800874c:	701a      	strb	r2, [r3, #0]
 800874e:	e76a      	b.n	8008626 <_dtoa_r+0x9ae>
 8008750:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008752:	2b00      	cmp	r3, #0
 8008754:	db04      	blt.n	8008760 <_dtoa_r+0xae8>
 8008756:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8008758:	4313      	orrs	r3, r2
 800875a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800875c:	4313      	orrs	r3, r2
 800875e:	d11f      	bne.n	80087a0 <_dtoa_r+0xb28>
 8008760:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008762:	2b00      	cmp	r3, #0
 8008764:	ddf0      	ble.n	8008748 <_dtoa_r+0xad0>
 8008766:	9905      	ldr	r1, [sp, #20]
 8008768:	2201      	movs	r2, #1
 800876a:	0038      	movs	r0, r7
 800876c:	f000 fea8 	bl	80094c0 <__lshift>
 8008770:	0031      	movs	r1, r6
 8008772:	9005      	str	r0, [sp, #20]
 8008774:	f000 ff12 	bl	800959c <__mcmp>
 8008778:	2800      	cmp	r0, #0
 800877a:	dc03      	bgt.n	8008784 <_dtoa_r+0xb0c>
 800877c:	d1e4      	bne.n	8008748 <_dtoa_r+0xad0>
 800877e:	9b07      	ldr	r3, [sp, #28]
 8008780:	07db      	lsls	r3, r3, #31
 8008782:	d5e1      	bpl.n	8008748 <_dtoa_r+0xad0>
 8008784:	9b07      	ldr	r3, [sp, #28]
 8008786:	2b39      	cmp	r3, #57	; 0x39
 8008788:	d1db      	bne.n	8008742 <_dtoa_r+0xaca>
 800878a:	2339      	movs	r3, #57	; 0x39
 800878c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800878e:	7013      	strb	r3, [r2, #0]
 8008790:	9b08      	ldr	r3, [sp, #32]
 8008792:	9308      	str	r3, [sp, #32]
 8008794:	3b01      	subs	r3, #1
 8008796:	781a      	ldrb	r2, [r3, #0]
 8008798:	2a39      	cmp	r2, #57	; 0x39
 800879a:	d068      	beq.n	800886e <_dtoa_r+0xbf6>
 800879c:	3201      	adds	r2, #1
 800879e:	e7d5      	b.n	800874c <_dtoa_r+0xad4>
 80087a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	dd07      	ble.n	80087b6 <_dtoa_r+0xb3e>
 80087a6:	9b07      	ldr	r3, [sp, #28]
 80087a8:	2b39      	cmp	r3, #57	; 0x39
 80087aa:	d0ee      	beq.n	800878a <_dtoa_r+0xb12>
 80087ac:	9b07      	ldr	r3, [sp, #28]
 80087ae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80087b0:	3301      	adds	r3, #1
 80087b2:	7013      	strb	r3, [r2, #0]
 80087b4:	e737      	b.n	8008626 <_dtoa_r+0x9ae>
 80087b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80087b8:	9a07      	ldr	r2, [sp, #28]
 80087ba:	701a      	strb	r2, [r3, #0]
 80087bc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80087be:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80087c0:	4293      	cmp	r3, r2
 80087c2:	d03e      	beq.n	8008842 <_dtoa_r+0xbca>
 80087c4:	2300      	movs	r3, #0
 80087c6:	220a      	movs	r2, #10
 80087c8:	9905      	ldr	r1, [sp, #20]
 80087ca:	0038      	movs	r0, r7
 80087cc:	f000 fc7e 	bl	80090cc <__multadd>
 80087d0:	2300      	movs	r3, #0
 80087d2:	9005      	str	r0, [sp, #20]
 80087d4:	220a      	movs	r2, #10
 80087d6:	0021      	movs	r1, r4
 80087d8:	0038      	movs	r0, r7
 80087da:	42ac      	cmp	r4, r5
 80087dc:	d106      	bne.n	80087ec <_dtoa_r+0xb74>
 80087de:	f000 fc75 	bl	80090cc <__multadd>
 80087e2:	0004      	movs	r4, r0
 80087e4:	0005      	movs	r5, r0
 80087e6:	9b08      	ldr	r3, [sp, #32]
 80087e8:	930a      	str	r3, [sp, #40]	; 0x28
 80087ea:	e778      	b.n	80086de <_dtoa_r+0xa66>
 80087ec:	f000 fc6e 	bl	80090cc <__multadd>
 80087f0:	0029      	movs	r1, r5
 80087f2:	0004      	movs	r4, r0
 80087f4:	2300      	movs	r3, #0
 80087f6:	220a      	movs	r2, #10
 80087f8:	0038      	movs	r0, r7
 80087fa:	f000 fc67 	bl	80090cc <__multadd>
 80087fe:	0005      	movs	r5, r0
 8008800:	e7f1      	b.n	80087e6 <_dtoa_r+0xb6e>
 8008802:	9b07      	ldr	r3, [sp, #28]
 8008804:	930c      	str	r3, [sp, #48]	; 0x30
 8008806:	2400      	movs	r4, #0
 8008808:	0031      	movs	r1, r6
 800880a:	9805      	ldr	r0, [sp, #20]
 800880c:	f7ff f9a8 	bl	8007b60 <quorem>
 8008810:	9b06      	ldr	r3, [sp, #24]
 8008812:	3030      	adds	r0, #48	; 0x30
 8008814:	5518      	strb	r0, [r3, r4]
 8008816:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008818:	3401      	adds	r4, #1
 800881a:	9007      	str	r0, [sp, #28]
 800881c:	42a3      	cmp	r3, r4
 800881e:	dd07      	ble.n	8008830 <_dtoa_r+0xbb8>
 8008820:	2300      	movs	r3, #0
 8008822:	220a      	movs	r2, #10
 8008824:	0038      	movs	r0, r7
 8008826:	9905      	ldr	r1, [sp, #20]
 8008828:	f000 fc50 	bl	80090cc <__multadd>
 800882c:	9005      	str	r0, [sp, #20]
 800882e:	e7eb      	b.n	8008808 <_dtoa_r+0xb90>
 8008830:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008832:	2001      	movs	r0, #1
 8008834:	2b00      	cmp	r3, #0
 8008836:	dd00      	ble.n	800883a <_dtoa_r+0xbc2>
 8008838:	0018      	movs	r0, r3
 800883a:	2400      	movs	r4, #0
 800883c:	9b06      	ldr	r3, [sp, #24]
 800883e:	181b      	adds	r3, r3, r0
 8008840:	9308      	str	r3, [sp, #32]
 8008842:	9905      	ldr	r1, [sp, #20]
 8008844:	2201      	movs	r2, #1
 8008846:	0038      	movs	r0, r7
 8008848:	f000 fe3a 	bl	80094c0 <__lshift>
 800884c:	0031      	movs	r1, r6
 800884e:	9005      	str	r0, [sp, #20]
 8008850:	f000 fea4 	bl	800959c <__mcmp>
 8008854:	2800      	cmp	r0, #0
 8008856:	dc9b      	bgt.n	8008790 <_dtoa_r+0xb18>
 8008858:	d102      	bne.n	8008860 <_dtoa_r+0xbe8>
 800885a:	9b07      	ldr	r3, [sp, #28]
 800885c:	07db      	lsls	r3, r3, #31
 800885e:	d497      	bmi.n	8008790 <_dtoa_r+0xb18>
 8008860:	9b08      	ldr	r3, [sp, #32]
 8008862:	9308      	str	r3, [sp, #32]
 8008864:	3b01      	subs	r3, #1
 8008866:	781a      	ldrb	r2, [r3, #0]
 8008868:	2a30      	cmp	r2, #48	; 0x30
 800886a:	d0fa      	beq.n	8008862 <_dtoa_r+0xbea>
 800886c:	e6db      	b.n	8008626 <_dtoa_r+0x9ae>
 800886e:	9a06      	ldr	r2, [sp, #24]
 8008870:	429a      	cmp	r2, r3
 8008872:	d18e      	bne.n	8008792 <_dtoa_r+0xb1a>
 8008874:	9b02      	ldr	r3, [sp, #8]
 8008876:	3301      	adds	r3, #1
 8008878:	9302      	str	r3, [sp, #8]
 800887a:	2331      	movs	r3, #49	; 0x31
 800887c:	e799      	b.n	80087b2 <_dtoa_r+0xb3a>
 800887e:	4b09      	ldr	r3, [pc, #36]	; (80088a4 <_dtoa_r+0xc2c>)
 8008880:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8008882:	9306      	str	r3, [sp, #24]
 8008884:	4b08      	ldr	r3, [pc, #32]	; (80088a8 <_dtoa_r+0xc30>)
 8008886:	2a00      	cmp	r2, #0
 8008888:	d001      	beq.n	800888e <_dtoa_r+0xc16>
 800888a:	f7ff fa3f 	bl	8007d0c <_dtoa_r+0x94>
 800888e:	f7ff fa3f 	bl	8007d10 <_dtoa_r+0x98>
 8008892:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008894:	2b00      	cmp	r3, #0
 8008896:	dcb6      	bgt.n	8008806 <_dtoa_r+0xb8e>
 8008898:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800889a:	2b02      	cmp	r3, #2
 800889c:	dd00      	ble.n	80088a0 <_dtoa_r+0xc28>
 800889e:	e6ac      	b.n	80085fa <_dtoa_r+0x982>
 80088a0:	e7b1      	b.n	8008806 <_dtoa_r+0xb8e>
 80088a2:	46c0      	nop			; (mov r8, r8)
 80088a4:	0800ae99 	.word	0x0800ae99
 80088a8:	0800aea1 	.word	0x0800aea1

080088ac <rshift>:
 80088ac:	0002      	movs	r2, r0
 80088ae:	b5f0      	push	{r4, r5, r6, r7, lr}
 80088b0:	6904      	ldr	r4, [r0, #16]
 80088b2:	3214      	adds	r2, #20
 80088b4:	0013      	movs	r3, r2
 80088b6:	b085      	sub	sp, #20
 80088b8:	114f      	asrs	r7, r1, #5
 80088ba:	42bc      	cmp	r4, r7
 80088bc:	dd31      	ble.n	8008922 <rshift+0x76>
 80088be:	00bb      	lsls	r3, r7, #2
 80088c0:	18d3      	adds	r3, r2, r3
 80088c2:	261f      	movs	r6, #31
 80088c4:	9301      	str	r3, [sp, #4]
 80088c6:	000b      	movs	r3, r1
 80088c8:	00a5      	lsls	r5, r4, #2
 80088ca:	4033      	ands	r3, r6
 80088cc:	1955      	adds	r5, r2, r5
 80088ce:	9302      	str	r3, [sp, #8]
 80088d0:	4231      	tst	r1, r6
 80088d2:	d10c      	bne.n	80088ee <rshift+0x42>
 80088d4:	0016      	movs	r6, r2
 80088d6:	9901      	ldr	r1, [sp, #4]
 80088d8:	428d      	cmp	r5, r1
 80088da:	d838      	bhi.n	800894e <rshift+0xa2>
 80088dc:	9901      	ldr	r1, [sp, #4]
 80088de:	2300      	movs	r3, #0
 80088e0:	3903      	subs	r1, #3
 80088e2:	428d      	cmp	r5, r1
 80088e4:	d301      	bcc.n	80088ea <rshift+0x3e>
 80088e6:	1be3      	subs	r3, r4, r7
 80088e8:	009b      	lsls	r3, r3, #2
 80088ea:	18d3      	adds	r3, r2, r3
 80088ec:	e019      	b.n	8008922 <rshift+0x76>
 80088ee:	2120      	movs	r1, #32
 80088f0:	9b02      	ldr	r3, [sp, #8]
 80088f2:	9e01      	ldr	r6, [sp, #4]
 80088f4:	1acb      	subs	r3, r1, r3
 80088f6:	9303      	str	r3, [sp, #12]
 80088f8:	ce02      	ldmia	r6!, {r1}
 80088fa:	9b02      	ldr	r3, [sp, #8]
 80088fc:	4694      	mov	ip, r2
 80088fe:	40d9      	lsrs	r1, r3
 8008900:	9100      	str	r1, [sp, #0]
 8008902:	42b5      	cmp	r5, r6
 8008904:	d816      	bhi.n	8008934 <rshift+0x88>
 8008906:	9e01      	ldr	r6, [sp, #4]
 8008908:	2300      	movs	r3, #0
 800890a:	3601      	adds	r6, #1
 800890c:	42b5      	cmp	r5, r6
 800890e:	d302      	bcc.n	8008916 <rshift+0x6a>
 8008910:	1be3      	subs	r3, r4, r7
 8008912:	009b      	lsls	r3, r3, #2
 8008914:	3b04      	subs	r3, #4
 8008916:	9900      	ldr	r1, [sp, #0]
 8008918:	18d3      	adds	r3, r2, r3
 800891a:	6019      	str	r1, [r3, #0]
 800891c:	2900      	cmp	r1, #0
 800891e:	d000      	beq.n	8008922 <rshift+0x76>
 8008920:	3304      	adds	r3, #4
 8008922:	1a99      	subs	r1, r3, r2
 8008924:	1089      	asrs	r1, r1, #2
 8008926:	6101      	str	r1, [r0, #16]
 8008928:	4293      	cmp	r3, r2
 800892a:	d101      	bne.n	8008930 <rshift+0x84>
 800892c:	2300      	movs	r3, #0
 800892e:	6143      	str	r3, [r0, #20]
 8008930:	b005      	add	sp, #20
 8008932:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008934:	6833      	ldr	r3, [r6, #0]
 8008936:	9903      	ldr	r1, [sp, #12]
 8008938:	408b      	lsls	r3, r1
 800893a:	9900      	ldr	r1, [sp, #0]
 800893c:	4319      	orrs	r1, r3
 800893e:	4663      	mov	r3, ip
 8008940:	c302      	stmia	r3!, {r1}
 8008942:	469c      	mov	ip, r3
 8008944:	ce02      	ldmia	r6!, {r1}
 8008946:	9b02      	ldr	r3, [sp, #8]
 8008948:	40d9      	lsrs	r1, r3
 800894a:	9100      	str	r1, [sp, #0]
 800894c:	e7d9      	b.n	8008902 <rshift+0x56>
 800894e:	c908      	ldmia	r1!, {r3}
 8008950:	c608      	stmia	r6!, {r3}
 8008952:	e7c1      	b.n	80088d8 <rshift+0x2c>

08008954 <__hexdig_fun>:
 8008954:	0002      	movs	r2, r0
 8008956:	3a30      	subs	r2, #48	; 0x30
 8008958:	0003      	movs	r3, r0
 800895a:	2a09      	cmp	r2, #9
 800895c:	d802      	bhi.n	8008964 <__hexdig_fun+0x10>
 800895e:	3b20      	subs	r3, #32
 8008960:	b2d8      	uxtb	r0, r3
 8008962:	4770      	bx	lr
 8008964:	0002      	movs	r2, r0
 8008966:	3a61      	subs	r2, #97	; 0x61
 8008968:	2a05      	cmp	r2, #5
 800896a:	d801      	bhi.n	8008970 <__hexdig_fun+0x1c>
 800896c:	3b47      	subs	r3, #71	; 0x47
 800896e:	e7f7      	b.n	8008960 <__hexdig_fun+0xc>
 8008970:	001a      	movs	r2, r3
 8008972:	3a41      	subs	r2, #65	; 0x41
 8008974:	2000      	movs	r0, #0
 8008976:	2a05      	cmp	r2, #5
 8008978:	d8f3      	bhi.n	8008962 <__hexdig_fun+0xe>
 800897a:	3b27      	subs	r3, #39	; 0x27
 800897c:	e7f0      	b.n	8008960 <__hexdig_fun+0xc>
	...

08008980 <__gethex>:
 8008980:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008982:	b08d      	sub	sp, #52	; 0x34
 8008984:	930a      	str	r3, [sp, #40]	; 0x28
 8008986:	4bbf      	ldr	r3, [pc, #764]	; (8008c84 <__gethex+0x304>)
 8008988:	9005      	str	r0, [sp, #20]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	9109      	str	r1, [sp, #36]	; 0x24
 800898e:	0018      	movs	r0, r3
 8008990:	9202      	str	r2, [sp, #8]
 8008992:	9307      	str	r3, [sp, #28]
 8008994:	f7f7 fbb6 	bl	8000104 <strlen>
 8008998:	2202      	movs	r2, #2
 800899a:	9b07      	ldr	r3, [sp, #28]
 800899c:	4252      	negs	r2, r2
 800899e:	181b      	adds	r3, r3, r0
 80089a0:	3b01      	subs	r3, #1
 80089a2:	781b      	ldrb	r3, [r3, #0]
 80089a4:	9003      	str	r0, [sp, #12]
 80089a6:	930b      	str	r3, [sp, #44]	; 0x2c
 80089a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80089aa:	6819      	ldr	r1, [r3, #0]
 80089ac:	1c8b      	adds	r3, r1, #2
 80089ae:	1a52      	subs	r2, r2, r1
 80089b0:	18d1      	adds	r1, r2, r3
 80089b2:	9301      	str	r3, [sp, #4]
 80089b4:	9108      	str	r1, [sp, #32]
 80089b6:	9901      	ldr	r1, [sp, #4]
 80089b8:	3301      	adds	r3, #1
 80089ba:	7808      	ldrb	r0, [r1, #0]
 80089bc:	2830      	cmp	r0, #48	; 0x30
 80089be:	d0f7      	beq.n	80089b0 <__gethex+0x30>
 80089c0:	f7ff ffc8 	bl	8008954 <__hexdig_fun>
 80089c4:	2300      	movs	r3, #0
 80089c6:	001c      	movs	r4, r3
 80089c8:	9304      	str	r3, [sp, #16]
 80089ca:	4298      	cmp	r0, r3
 80089cc:	d11f      	bne.n	8008a0e <__gethex+0x8e>
 80089ce:	9a03      	ldr	r2, [sp, #12]
 80089d0:	9907      	ldr	r1, [sp, #28]
 80089d2:	9801      	ldr	r0, [sp, #4]
 80089d4:	f001 fa64 	bl	8009ea0 <strncmp>
 80089d8:	0007      	movs	r7, r0
 80089da:	42a0      	cmp	r0, r4
 80089dc:	d000      	beq.n	80089e0 <__gethex+0x60>
 80089de:	e06b      	b.n	8008ab8 <__gethex+0x138>
 80089e0:	9b01      	ldr	r3, [sp, #4]
 80089e2:	9a03      	ldr	r2, [sp, #12]
 80089e4:	5c98      	ldrb	r0, [r3, r2]
 80089e6:	189d      	adds	r5, r3, r2
 80089e8:	f7ff ffb4 	bl	8008954 <__hexdig_fun>
 80089ec:	2301      	movs	r3, #1
 80089ee:	9304      	str	r3, [sp, #16]
 80089f0:	42a0      	cmp	r0, r4
 80089f2:	d030      	beq.n	8008a56 <__gethex+0xd6>
 80089f4:	9501      	str	r5, [sp, #4]
 80089f6:	9b01      	ldr	r3, [sp, #4]
 80089f8:	7818      	ldrb	r0, [r3, #0]
 80089fa:	2830      	cmp	r0, #48	; 0x30
 80089fc:	d009      	beq.n	8008a12 <__gethex+0x92>
 80089fe:	f7ff ffa9 	bl	8008954 <__hexdig_fun>
 8008a02:	4242      	negs	r2, r0
 8008a04:	4142      	adcs	r2, r0
 8008a06:	2301      	movs	r3, #1
 8008a08:	002c      	movs	r4, r5
 8008a0a:	9204      	str	r2, [sp, #16]
 8008a0c:	9308      	str	r3, [sp, #32]
 8008a0e:	9d01      	ldr	r5, [sp, #4]
 8008a10:	e004      	b.n	8008a1c <__gethex+0x9c>
 8008a12:	9b01      	ldr	r3, [sp, #4]
 8008a14:	3301      	adds	r3, #1
 8008a16:	9301      	str	r3, [sp, #4]
 8008a18:	e7ed      	b.n	80089f6 <__gethex+0x76>
 8008a1a:	3501      	adds	r5, #1
 8008a1c:	7828      	ldrb	r0, [r5, #0]
 8008a1e:	f7ff ff99 	bl	8008954 <__hexdig_fun>
 8008a22:	1e07      	subs	r7, r0, #0
 8008a24:	d1f9      	bne.n	8008a1a <__gethex+0x9a>
 8008a26:	0028      	movs	r0, r5
 8008a28:	9a03      	ldr	r2, [sp, #12]
 8008a2a:	9907      	ldr	r1, [sp, #28]
 8008a2c:	f001 fa38 	bl	8009ea0 <strncmp>
 8008a30:	2800      	cmp	r0, #0
 8008a32:	d10e      	bne.n	8008a52 <__gethex+0xd2>
 8008a34:	2c00      	cmp	r4, #0
 8008a36:	d107      	bne.n	8008a48 <__gethex+0xc8>
 8008a38:	9b03      	ldr	r3, [sp, #12]
 8008a3a:	18ed      	adds	r5, r5, r3
 8008a3c:	002c      	movs	r4, r5
 8008a3e:	7828      	ldrb	r0, [r5, #0]
 8008a40:	f7ff ff88 	bl	8008954 <__hexdig_fun>
 8008a44:	2800      	cmp	r0, #0
 8008a46:	d102      	bne.n	8008a4e <__gethex+0xce>
 8008a48:	1b64      	subs	r4, r4, r5
 8008a4a:	00a7      	lsls	r7, r4, #2
 8008a4c:	e003      	b.n	8008a56 <__gethex+0xd6>
 8008a4e:	3501      	adds	r5, #1
 8008a50:	e7f5      	b.n	8008a3e <__gethex+0xbe>
 8008a52:	2c00      	cmp	r4, #0
 8008a54:	d1f8      	bne.n	8008a48 <__gethex+0xc8>
 8008a56:	2220      	movs	r2, #32
 8008a58:	782b      	ldrb	r3, [r5, #0]
 8008a5a:	002e      	movs	r6, r5
 8008a5c:	4393      	bics	r3, r2
 8008a5e:	2b50      	cmp	r3, #80	; 0x50
 8008a60:	d11d      	bne.n	8008a9e <__gethex+0x11e>
 8008a62:	786b      	ldrb	r3, [r5, #1]
 8008a64:	2b2b      	cmp	r3, #43	; 0x2b
 8008a66:	d02c      	beq.n	8008ac2 <__gethex+0x142>
 8008a68:	2b2d      	cmp	r3, #45	; 0x2d
 8008a6a:	d02e      	beq.n	8008aca <__gethex+0x14a>
 8008a6c:	2300      	movs	r3, #0
 8008a6e:	1c6e      	adds	r6, r5, #1
 8008a70:	9306      	str	r3, [sp, #24]
 8008a72:	7830      	ldrb	r0, [r6, #0]
 8008a74:	f7ff ff6e 	bl	8008954 <__hexdig_fun>
 8008a78:	1e43      	subs	r3, r0, #1
 8008a7a:	b2db      	uxtb	r3, r3
 8008a7c:	2b18      	cmp	r3, #24
 8008a7e:	d82b      	bhi.n	8008ad8 <__gethex+0x158>
 8008a80:	3810      	subs	r0, #16
 8008a82:	0004      	movs	r4, r0
 8008a84:	7870      	ldrb	r0, [r6, #1]
 8008a86:	f7ff ff65 	bl	8008954 <__hexdig_fun>
 8008a8a:	1e43      	subs	r3, r0, #1
 8008a8c:	b2db      	uxtb	r3, r3
 8008a8e:	3601      	adds	r6, #1
 8008a90:	2b18      	cmp	r3, #24
 8008a92:	d91c      	bls.n	8008ace <__gethex+0x14e>
 8008a94:	9b06      	ldr	r3, [sp, #24]
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d000      	beq.n	8008a9c <__gethex+0x11c>
 8008a9a:	4264      	negs	r4, r4
 8008a9c:	193f      	adds	r7, r7, r4
 8008a9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008aa0:	601e      	str	r6, [r3, #0]
 8008aa2:	9b04      	ldr	r3, [sp, #16]
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d019      	beq.n	8008adc <__gethex+0x15c>
 8008aa8:	2600      	movs	r6, #0
 8008aaa:	9b08      	ldr	r3, [sp, #32]
 8008aac:	42b3      	cmp	r3, r6
 8008aae:	d100      	bne.n	8008ab2 <__gethex+0x132>
 8008ab0:	3606      	adds	r6, #6
 8008ab2:	0030      	movs	r0, r6
 8008ab4:	b00d      	add	sp, #52	; 0x34
 8008ab6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008ab8:	2301      	movs	r3, #1
 8008aba:	2700      	movs	r7, #0
 8008abc:	9d01      	ldr	r5, [sp, #4]
 8008abe:	9304      	str	r3, [sp, #16]
 8008ac0:	e7c9      	b.n	8008a56 <__gethex+0xd6>
 8008ac2:	2300      	movs	r3, #0
 8008ac4:	9306      	str	r3, [sp, #24]
 8008ac6:	1cae      	adds	r6, r5, #2
 8008ac8:	e7d3      	b.n	8008a72 <__gethex+0xf2>
 8008aca:	2301      	movs	r3, #1
 8008acc:	e7fa      	b.n	8008ac4 <__gethex+0x144>
 8008ace:	230a      	movs	r3, #10
 8008ad0:	435c      	muls	r4, r3
 8008ad2:	1824      	adds	r4, r4, r0
 8008ad4:	3c10      	subs	r4, #16
 8008ad6:	e7d5      	b.n	8008a84 <__gethex+0x104>
 8008ad8:	002e      	movs	r6, r5
 8008ada:	e7e0      	b.n	8008a9e <__gethex+0x11e>
 8008adc:	9b01      	ldr	r3, [sp, #4]
 8008ade:	9904      	ldr	r1, [sp, #16]
 8008ae0:	1aeb      	subs	r3, r5, r3
 8008ae2:	3b01      	subs	r3, #1
 8008ae4:	2b07      	cmp	r3, #7
 8008ae6:	dc0a      	bgt.n	8008afe <__gethex+0x17e>
 8008ae8:	9805      	ldr	r0, [sp, #20]
 8008aea:	f000 fa87 	bl	8008ffc <_Balloc>
 8008aee:	1e04      	subs	r4, r0, #0
 8008af0:	d108      	bne.n	8008b04 <__gethex+0x184>
 8008af2:	0002      	movs	r2, r0
 8008af4:	21de      	movs	r1, #222	; 0xde
 8008af6:	4b64      	ldr	r3, [pc, #400]	; (8008c88 <__gethex+0x308>)
 8008af8:	4864      	ldr	r0, [pc, #400]	; (8008c8c <__gethex+0x30c>)
 8008afa:	f001 f9f1 	bl	8009ee0 <__assert_func>
 8008afe:	3101      	adds	r1, #1
 8008b00:	105b      	asrs	r3, r3, #1
 8008b02:	e7ef      	b.n	8008ae4 <__gethex+0x164>
 8008b04:	0003      	movs	r3, r0
 8008b06:	3314      	adds	r3, #20
 8008b08:	9304      	str	r3, [sp, #16]
 8008b0a:	9309      	str	r3, [sp, #36]	; 0x24
 8008b0c:	2300      	movs	r3, #0
 8008b0e:	001e      	movs	r6, r3
 8008b10:	9306      	str	r3, [sp, #24]
 8008b12:	9b01      	ldr	r3, [sp, #4]
 8008b14:	42ab      	cmp	r3, r5
 8008b16:	d340      	bcc.n	8008b9a <__gethex+0x21a>
 8008b18:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008b1a:	9b04      	ldr	r3, [sp, #16]
 8008b1c:	c540      	stmia	r5!, {r6}
 8008b1e:	1aed      	subs	r5, r5, r3
 8008b20:	10ad      	asrs	r5, r5, #2
 8008b22:	0030      	movs	r0, r6
 8008b24:	6125      	str	r5, [r4, #16]
 8008b26:	f000 fb61 	bl	80091ec <__hi0bits>
 8008b2a:	9b02      	ldr	r3, [sp, #8]
 8008b2c:	016d      	lsls	r5, r5, #5
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	1a2e      	subs	r6, r5, r0
 8008b32:	9301      	str	r3, [sp, #4]
 8008b34:	429e      	cmp	r6, r3
 8008b36:	dd5a      	ble.n	8008bee <__gethex+0x26e>
 8008b38:	1af6      	subs	r6, r6, r3
 8008b3a:	0031      	movs	r1, r6
 8008b3c:	0020      	movs	r0, r4
 8008b3e:	f000 ff03 	bl	8009948 <__any_on>
 8008b42:	1e05      	subs	r5, r0, #0
 8008b44:	d016      	beq.n	8008b74 <__gethex+0x1f4>
 8008b46:	2501      	movs	r5, #1
 8008b48:	211f      	movs	r1, #31
 8008b4a:	0028      	movs	r0, r5
 8008b4c:	1e73      	subs	r3, r6, #1
 8008b4e:	4019      	ands	r1, r3
 8008b50:	4088      	lsls	r0, r1
 8008b52:	0001      	movs	r1, r0
 8008b54:	115a      	asrs	r2, r3, #5
 8008b56:	9804      	ldr	r0, [sp, #16]
 8008b58:	0092      	lsls	r2, r2, #2
 8008b5a:	5812      	ldr	r2, [r2, r0]
 8008b5c:	420a      	tst	r2, r1
 8008b5e:	d009      	beq.n	8008b74 <__gethex+0x1f4>
 8008b60:	42ab      	cmp	r3, r5
 8008b62:	dd06      	ble.n	8008b72 <__gethex+0x1f2>
 8008b64:	0020      	movs	r0, r4
 8008b66:	1eb1      	subs	r1, r6, #2
 8008b68:	f000 feee 	bl	8009948 <__any_on>
 8008b6c:	3502      	adds	r5, #2
 8008b6e:	2800      	cmp	r0, #0
 8008b70:	d100      	bne.n	8008b74 <__gethex+0x1f4>
 8008b72:	2502      	movs	r5, #2
 8008b74:	0031      	movs	r1, r6
 8008b76:	0020      	movs	r0, r4
 8008b78:	f7ff fe98 	bl	80088ac <rshift>
 8008b7c:	19bf      	adds	r7, r7, r6
 8008b7e:	9b02      	ldr	r3, [sp, #8]
 8008b80:	689b      	ldr	r3, [r3, #8]
 8008b82:	9303      	str	r3, [sp, #12]
 8008b84:	42bb      	cmp	r3, r7
 8008b86:	da42      	bge.n	8008c0e <__gethex+0x28e>
 8008b88:	0021      	movs	r1, r4
 8008b8a:	9805      	ldr	r0, [sp, #20]
 8008b8c:	f000 fa7a 	bl	8009084 <_Bfree>
 8008b90:	2300      	movs	r3, #0
 8008b92:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008b94:	26a3      	movs	r6, #163	; 0xa3
 8008b96:	6013      	str	r3, [r2, #0]
 8008b98:	e78b      	b.n	8008ab2 <__gethex+0x132>
 8008b9a:	1e6b      	subs	r3, r5, #1
 8008b9c:	9308      	str	r3, [sp, #32]
 8008b9e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008ba0:	781b      	ldrb	r3, [r3, #0]
 8008ba2:	4293      	cmp	r3, r2
 8008ba4:	d014      	beq.n	8008bd0 <__gethex+0x250>
 8008ba6:	9b06      	ldr	r3, [sp, #24]
 8008ba8:	2b20      	cmp	r3, #32
 8008baa:	d104      	bne.n	8008bb6 <__gethex+0x236>
 8008bac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008bae:	c340      	stmia	r3!, {r6}
 8008bb0:	2600      	movs	r6, #0
 8008bb2:	9309      	str	r3, [sp, #36]	; 0x24
 8008bb4:	9606      	str	r6, [sp, #24]
 8008bb6:	9b08      	ldr	r3, [sp, #32]
 8008bb8:	7818      	ldrb	r0, [r3, #0]
 8008bba:	f7ff fecb 	bl	8008954 <__hexdig_fun>
 8008bbe:	230f      	movs	r3, #15
 8008bc0:	4018      	ands	r0, r3
 8008bc2:	9b06      	ldr	r3, [sp, #24]
 8008bc4:	9d08      	ldr	r5, [sp, #32]
 8008bc6:	4098      	lsls	r0, r3
 8008bc8:	3304      	adds	r3, #4
 8008bca:	4306      	orrs	r6, r0
 8008bcc:	9306      	str	r3, [sp, #24]
 8008bce:	e7a0      	b.n	8008b12 <__gethex+0x192>
 8008bd0:	2301      	movs	r3, #1
 8008bd2:	9a03      	ldr	r2, [sp, #12]
 8008bd4:	1a9d      	subs	r5, r3, r2
 8008bd6:	9b08      	ldr	r3, [sp, #32]
 8008bd8:	195d      	adds	r5, r3, r5
 8008bda:	9b01      	ldr	r3, [sp, #4]
 8008bdc:	429d      	cmp	r5, r3
 8008bde:	d3e2      	bcc.n	8008ba6 <__gethex+0x226>
 8008be0:	0028      	movs	r0, r5
 8008be2:	9907      	ldr	r1, [sp, #28]
 8008be4:	f001 f95c 	bl	8009ea0 <strncmp>
 8008be8:	2800      	cmp	r0, #0
 8008bea:	d1dc      	bne.n	8008ba6 <__gethex+0x226>
 8008bec:	e791      	b.n	8008b12 <__gethex+0x192>
 8008bee:	9b01      	ldr	r3, [sp, #4]
 8008bf0:	2500      	movs	r5, #0
 8008bf2:	429e      	cmp	r6, r3
 8008bf4:	dac3      	bge.n	8008b7e <__gethex+0x1fe>
 8008bf6:	1b9e      	subs	r6, r3, r6
 8008bf8:	0021      	movs	r1, r4
 8008bfa:	0032      	movs	r2, r6
 8008bfc:	9805      	ldr	r0, [sp, #20]
 8008bfe:	f000 fc5f 	bl	80094c0 <__lshift>
 8008c02:	0003      	movs	r3, r0
 8008c04:	3314      	adds	r3, #20
 8008c06:	0004      	movs	r4, r0
 8008c08:	1bbf      	subs	r7, r7, r6
 8008c0a:	9304      	str	r3, [sp, #16]
 8008c0c:	e7b7      	b.n	8008b7e <__gethex+0x1fe>
 8008c0e:	9b02      	ldr	r3, [sp, #8]
 8008c10:	685e      	ldr	r6, [r3, #4]
 8008c12:	42be      	cmp	r6, r7
 8008c14:	dd71      	ble.n	8008cfa <__gethex+0x37a>
 8008c16:	9b01      	ldr	r3, [sp, #4]
 8008c18:	1bf6      	subs	r6, r6, r7
 8008c1a:	42b3      	cmp	r3, r6
 8008c1c:	dc38      	bgt.n	8008c90 <__gethex+0x310>
 8008c1e:	9b02      	ldr	r3, [sp, #8]
 8008c20:	68db      	ldr	r3, [r3, #12]
 8008c22:	2b02      	cmp	r3, #2
 8008c24:	d026      	beq.n	8008c74 <__gethex+0x2f4>
 8008c26:	2b03      	cmp	r3, #3
 8008c28:	d028      	beq.n	8008c7c <__gethex+0x2fc>
 8008c2a:	2b01      	cmp	r3, #1
 8008c2c:	d119      	bne.n	8008c62 <__gethex+0x2e2>
 8008c2e:	9b01      	ldr	r3, [sp, #4]
 8008c30:	42b3      	cmp	r3, r6
 8008c32:	d116      	bne.n	8008c62 <__gethex+0x2e2>
 8008c34:	2b01      	cmp	r3, #1
 8008c36:	d10d      	bne.n	8008c54 <__gethex+0x2d4>
 8008c38:	9b02      	ldr	r3, [sp, #8]
 8008c3a:	2662      	movs	r6, #98	; 0x62
 8008c3c:	685b      	ldr	r3, [r3, #4]
 8008c3e:	9301      	str	r3, [sp, #4]
 8008c40:	9a01      	ldr	r2, [sp, #4]
 8008c42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c44:	601a      	str	r2, [r3, #0]
 8008c46:	2301      	movs	r3, #1
 8008c48:	9a04      	ldr	r2, [sp, #16]
 8008c4a:	6123      	str	r3, [r4, #16]
 8008c4c:	6013      	str	r3, [r2, #0]
 8008c4e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008c50:	601c      	str	r4, [r3, #0]
 8008c52:	e72e      	b.n	8008ab2 <__gethex+0x132>
 8008c54:	9901      	ldr	r1, [sp, #4]
 8008c56:	0020      	movs	r0, r4
 8008c58:	3901      	subs	r1, #1
 8008c5a:	f000 fe75 	bl	8009948 <__any_on>
 8008c5e:	2800      	cmp	r0, #0
 8008c60:	d1ea      	bne.n	8008c38 <__gethex+0x2b8>
 8008c62:	0021      	movs	r1, r4
 8008c64:	9805      	ldr	r0, [sp, #20]
 8008c66:	f000 fa0d 	bl	8009084 <_Bfree>
 8008c6a:	2300      	movs	r3, #0
 8008c6c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008c6e:	2650      	movs	r6, #80	; 0x50
 8008c70:	6013      	str	r3, [r2, #0]
 8008c72:	e71e      	b.n	8008ab2 <__gethex+0x132>
 8008c74:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d1f3      	bne.n	8008c62 <__gethex+0x2e2>
 8008c7a:	e7dd      	b.n	8008c38 <__gethex+0x2b8>
 8008c7c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d1da      	bne.n	8008c38 <__gethex+0x2b8>
 8008c82:	e7ee      	b.n	8008c62 <__gethex+0x2e2>
 8008c84:	0800af90 	.word	0x0800af90
 8008c88:	0800af18 	.word	0x0800af18
 8008c8c:	0800af29 	.word	0x0800af29
 8008c90:	1e77      	subs	r7, r6, #1
 8008c92:	2d00      	cmp	r5, #0
 8008c94:	d12f      	bne.n	8008cf6 <__gethex+0x376>
 8008c96:	2f00      	cmp	r7, #0
 8008c98:	d004      	beq.n	8008ca4 <__gethex+0x324>
 8008c9a:	0039      	movs	r1, r7
 8008c9c:	0020      	movs	r0, r4
 8008c9e:	f000 fe53 	bl	8009948 <__any_on>
 8008ca2:	0005      	movs	r5, r0
 8008ca4:	231f      	movs	r3, #31
 8008ca6:	117a      	asrs	r2, r7, #5
 8008ca8:	401f      	ands	r7, r3
 8008caa:	3b1e      	subs	r3, #30
 8008cac:	40bb      	lsls	r3, r7
 8008cae:	9904      	ldr	r1, [sp, #16]
 8008cb0:	0092      	lsls	r2, r2, #2
 8008cb2:	5852      	ldr	r2, [r2, r1]
 8008cb4:	421a      	tst	r2, r3
 8008cb6:	d001      	beq.n	8008cbc <__gethex+0x33c>
 8008cb8:	2302      	movs	r3, #2
 8008cba:	431d      	orrs	r5, r3
 8008cbc:	9b01      	ldr	r3, [sp, #4]
 8008cbe:	0031      	movs	r1, r6
 8008cc0:	1b9b      	subs	r3, r3, r6
 8008cc2:	2602      	movs	r6, #2
 8008cc4:	0020      	movs	r0, r4
 8008cc6:	9301      	str	r3, [sp, #4]
 8008cc8:	f7ff fdf0 	bl	80088ac <rshift>
 8008ccc:	9b02      	ldr	r3, [sp, #8]
 8008cce:	685f      	ldr	r7, [r3, #4]
 8008cd0:	2d00      	cmp	r5, #0
 8008cd2:	d041      	beq.n	8008d58 <__gethex+0x3d8>
 8008cd4:	9b02      	ldr	r3, [sp, #8]
 8008cd6:	68db      	ldr	r3, [r3, #12]
 8008cd8:	2b02      	cmp	r3, #2
 8008cda:	d010      	beq.n	8008cfe <__gethex+0x37e>
 8008cdc:	2b03      	cmp	r3, #3
 8008cde:	d012      	beq.n	8008d06 <__gethex+0x386>
 8008ce0:	2b01      	cmp	r3, #1
 8008ce2:	d106      	bne.n	8008cf2 <__gethex+0x372>
 8008ce4:	07aa      	lsls	r2, r5, #30
 8008ce6:	d504      	bpl.n	8008cf2 <__gethex+0x372>
 8008ce8:	9a04      	ldr	r2, [sp, #16]
 8008cea:	6810      	ldr	r0, [r2, #0]
 8008cec:	4305      	orrs	r5, r0
 8008cee:	421d      	tst	r5, r3
 8008cf0:	d10c      	bne.n	8008d0c <__gethex+0x38c>
 8008cf2:	2310      	movs	r3, #16
 8008cf4:	e02f      	b.n	8008d56 <__gethex+0x3d6>
 8008cf6:	2501      	movs	r5, #1
 8008cf8:	e7d4      	b.n	8008ca4 <__gethex+0x324>
 8008cfa:	2601      	movs	r6, #1
 8008cfc:	e7e8      	b.n	8008cd0 <__gethex+0x350>
 8008cfe:	2301      	movs	r3, #1
 8008d00:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008d02:	1a9b      	subs	r3, r3, r2
 8008d04:	9313      	str	r3, [sp, #76]	; 0x4c
 8008d06:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d0f2      	beq.n	8008cf2 <__gethex+0x372>
 8008d0c:	6923      	ldr	r3, [r4, #16]
 8008d0e:	2000      	movs	r0, #0
 8008d10:	9303      	str	r3, [sp, #12]
 8008d12:	009b      	lsls	r3, r3, #2
 8008d14:	9304      	str	r3, [sp, #16]
 8008d16:	0023      	movs	r3, r4
 8008d18:	9a04      	ldr	r2, [sp, #16]
 8008d1a:	3314      	adds	r3, #20
 8008d1c:	1899      	adds	r1, r3, r2
 8008d1e:	681a      	ldr	r2, [r3, #0]
 8008d20:	1c55      	adds	r5, r2, #1
 8008d22:	d01e      	beq.n	8008d62 <__gethex+0x3e2>
 8008d24:	3201      	adds	r2, #1
 8008d26:	601a      	str	r2, [r3, #0]
 8008d28:	0023      	movs	r3, r4
 8008d2a:	3314      	adds	r3, #20
 8008d2c:	2e02      	cmp	r6, #2
 8008d2e:	d140      	bne.n	8008db2 <__gethex+0x432>
 8008d30:	9a02      	ldr	r2, [sp, #8]
 8008d32:	9901      	ldr	r1, [sp, #4]
 8008d34:	6812      	ldr	r2, [r2, #0]
 8008d36:	3a01      	subs	r2, #1
 8008d38:	428a      	cmp	r2, r1
 8008d3a:	d10b      	bne.n	8008d54 <__gethex+0x3d4>
 8008d3c:	114a      	asrs	r2, r1, #5
 8008d3e:	211f      	movs	r1, #31
 8008d40:	9801      	ldr	r0, [sp, #4]
 8008d42:	0092      	lsls	r2, r2, #2
 8008d44:	4001      	ands	r1, r0
 8008d46:	2001      	movs	r0, #1
 8008d48:	0005      	movs	r5, r0
 8008d4a:	408d      	lsls	r5, r1
 8008d4c:	58d3      	ldr	r3, [r2, r3]
 8008d4e:	422b      	tst	r3, r5
 8008d50:	d000      	beq.n	8008d54 <__gethex+0x3d4>
 8008d52:	2601      	movs	r6, #1
 8008d54:	2320      	movs	r3, #32
 8008d56:	431e      	orrs	r6, r3
 8008d58:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008d5a:	601c      	str	r4, [r3, #0]
 8008d5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008d5e:	601f      	str	r7, [r3, #0]
 8008d60:	e6a7      	b.n	8008ab2 <__gethex+0x132>
 8008d62:	c301      	stmia	r3!, {r0}
 8008d64:	4299      	cmp	r1, r3
 8008d66:	d8da      	bhi.n	8008d1e <__gethex+0x39e>
 8008d68:	9b03      	ldr	r3, [sp, #12]
 8008d6a:	68a2      	ldr	r2, [r4, #8]
 8008d6c:	4293      	cmp	r3, r2
 8008d6e:	db17      	blt.n	8008da0 <__gethex+0x420>
 8008d70:	6863      	ldr	r3, [r4, #4]
 8008d72:	9805      	ldr	r0, [sp, #20]
 8008d74:	1c59      	adds	r1, r3, #1
 8008d76:	f000 f941 	bl	8008ffc <_Balloc>
 8008d7a:	1e05      	subs	r5, r0, #0
 8008d7c:	d103      	bne.n	8008d86 <__gethex+0x406>
 8008d7e:	0002      	movs	r2, r0
 8008d80:	2184      	movs	r1, #132	; 0x84
 8008d82:	4b1c      	ldr	r3, [pc, #112]	; (8008df4 <__gethex+0x474>)
 8008d84:	e6b8      	b.n	8008af8 <__gethex+0x178>
 8008d86:	0021      	movs	r1, r4
 8008d88:	6923      	ldr	r3, [r4, #16]
 8008d8a:	310c      	adds	r1, #12
 8008d8c:	1c9a      	adds	r2, r3, #2
 8008d8e:	0092      	lsls	r2, r2, #2
 8008d90:	300c      	adds	r0, #12
 8008d92:	f000 f92a 	bl	8008fea <memcpy>
 8008d96:	0021      	movs	r1, r4
 8008d98:	9805      	ldr	r0, [sp, #20]
 8008d9a:	f000 f973 	bl	8009084 <_Bfree>
 8008d9e:	002c      	movs	r4, r5
 8008da0:	6923      	ldr	r3, [r4, #16]
 8008da2:	1c5a      	adds	r2, r3, #1
 8008da4:	6122      	str	r2, [r4, #16]
 8008da6:	2201      	movs	r2, #1
 8008da8:	3304      	adds	r3, #4
 8008daa:	009b      	lsls	r3, r3, #2
 8008dac:	18e3      	adds	r3, r4, r3
 8008dae:	605a      	str	r2, [r3, #4]
 8008db0:	e7ba      	b.n	8008d28 <__gethex+0x3a8>
 8008db2:	6922      	ldr	r2, [r4, #16]
 8008db4:	9903      	ldr	r1, [sp, #12]
 8008db6:	428a      	cmp	r2, r1
 8008db8:	dd09      	ble.n	8008dce <__gethex+0x44e>
 8008dba:	2101      	movs	r1, #1
 8008dbc:	0020      	movs	r0, r4
 8008dbe:	f7ff fd75 	bl	80088ac <rshift>
 8008dc2:	9b02      	ldr	r3, [sp, #8]
 8008dc4:	3701      	adds	r7, #1
 8008dc6:	689b      	ldr	r3, [r3, #8]
 8008dc8:	42bb      	cmp	r3, r7
 8008dca:	dac2      	bge.n	8008d52 <__gethex+0x3d2>
 8008dcc:	e6dc      	b.n	8008b88 <__gethex+0x208>
 8008dce:	221f      	movs	r2, #31
 8008dd0:	9d01      	ldr	r5, [sp, #4]
 8008dd2:	9901      	ldr	r1, [sp, #4]
 8008dd4:	2601      	movs	r6, #1
 8008dd6:	4015      	ands	r5, r2
 8008dd8:	4211      	tst	r1, r2
 8008dda:	d0bb      	beq.n	8008d54 <__gethex+0x3d4>
 8008ddc:	9a04      	ldr	r2, [sp, #16]
 8008dde:	189b      	adds	r3, r3, r2
 8008de0:	3b04      	subs	r3, #4
 8008de2:	6818      	ldr	r0, [r3, #0]
 8008de4:	f000 fa02 	bl	80091ec <__hi0bits>
 8008de8:	2320      	movs	r3, #32
 8008dea:	1b5d      	subs	r5, r3, r5
 8008dec:	42a8      	cmp	r0, r5
 8008dee:	dbe4      	blt.n	8008dba <__gethex+0x43a>
 8008df0:	e7b0      	b.n	8008d54 <__gethex+0x3d4>
 8008df2:	46c0      	nop			; (mov r8, r8)
 8008df4:	0800af18 	.word	0x0800af18

08008df8 <L_shift>:
 8008df8:	2308      	movs	r3, #8
 8008dfa:	b570      	push	{r4, r5, r6, lr}
 8008dfc:	2520      	movs	r5, #32
 8008dfe:	1a9a      	subs	r2, r3, r2
 8008e00:	0092      	lsls	r2, r2, #2
 8008e02:	1aad      	subs	r5, r5, r2
 8008e04:	6843      	ldr	r3, [r0, #4]
 8008e06:	6806      	ldr	r6, [r0, #0]
 8008e08:	001c      	movs	r4, r3
 8008e0a:	40ac      	lsls	r4, r5
 8008e0c:	40d3      	lsrs	r3, r2
 8008e0e:	4334      	orrs	r4, r6
 8008e10:	6004      	str	r4, [r0, #0]
 8008e12:	6043      	str	r3, [r0, #4]
 8008e14:	3004      	adds	r0, #4
 8008e16:	4288      	cmp	r0, r1
 8008e18:	d3f4      	bcc.n	8008e04 <L_shift+0xc>
 8008e1a:	bd70      	pop	{r4, r5, r6, pc}

08008e1c <__match>:
 8008e1c:	b530      	push	{r4, r5, lr}
 8008e1e:	6803      	ldr	r3, [r0, #0]
 8008e20:	780c      	ldrb	r4, [r1, #0]
 8008e22:	3301      	adds	r3, #1
 8008e24:	2c00      	cmp	r4, #0
 8008e26:	d102      	bne.n	8008e2e <__match+0x12>
 8008e28:	6003      	str	r3, [r0, #0]
 8008e2a:	2001      	movs	r0, #1
 8008e2c:	bd30      	pop	{r4, r5, pc}
 8008e2e:	781a      	ldrb	r2, [r3, #0]
 8008e30:	0015      	movs	r5, r2
 8008e32:	3d41      	subs	r5, #65	; 0x41
 8008e34:	2d19      	cmp	r5, #25
 8008e36:	d800      	bhi.n	8008e3a <__match+0x1e>
 8008e38:	3220      	adds	r2, #32
 8008e3a:	3101      	adds	r1, #1
 8008e3c:	42a2      	cmp	r2, r4
 8008e3e:	d0ef      	beq.n	8008e20 <__match+0x4>
 8008e40:	2000      	movs	r0, #0
 8008e42:	e7f3      	b.n	8008e2c <__match+0x10>

08008e44 <__hexnan>:
 8008e44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008e46:	680b      	ldr	r3, [r1, #0]
 8008e48:	b08b      	sub	sp, #44	; 0x2c
 8008e4a:	9201      	str	r2, [sp, #4]
 8008e4c:	9901      	ldr	r1, [sp, #4]
 8008e4e:	115a      	asrs	r2, r3, #5
 8008e50:	0092      	lsls	r2, r2, #2
 8008e52:	188a      	adds	r2, r1, r2
 8008e54:	9202      	str	r2, [sp, #8]
 8008e56:	0019      	movs	r1, r3
 8008e58:	221f      	movs	r2, #31
 8008e5a:	4011      	ands	r1, r2
 8008e5c:	9008      	str	r0, [sp, #32]
 8008e5e:	9106      	str	r1, [sp, #24]
 8008e60:	4213      	tst	r3, r2
 8008e62:	d002      	beq.n	8008e6a <__hexnan+0x26>
 8008e64:	9b02      	ldr	r3, [sp, #8]
 8008e66:	3304      	adds	r3, #4
 8008e68:	9302      	str	r3, [sp, #8]
 8008e6a:	9b02      	ldr	r3, [sp, #8]
 8008e6c:	2500      	movs	r5, #0
 8008e6e:	1f1e      	subs	r6, r3, #4
 8008e70:	0037      	movs	r7, r6
 8008e72:	0034      	movs	r4, r6
 8008e74:	9b08      	ldr	r3, [sp, #32]
 8008e76:	6035      	str	r5, [r6, #0]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	9507      	str	r5, [sp, #28]
 8008e7c:	9305      	str	r3, [sp, #20]
 8008e7e:	9503      	str	r5, [sp, #12]
 8008e80:	9b05      	ldr	r3, [sp, #20]
 8008e82:	3301      	adds	r3, #1
 8008e84:	9309      	str	r3, [sp, #36]	; 0x24
 8008e86:	9b05      	ldr	r3, [sp, #20]
 8008e88:	785b      	ldrb	r3, [r3, #1]
 8008e8a:	9304      	str	r3, [sp, #16]
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d028      	beq.n	8008ee2 <__hexnan+0x9e>
 8008e90:	9804      	ldr	r0, [sp, #16]
 8008e92:	f7ff fd5f 	bl	8008954 <__hexdig_fun>
 8008e96:	2800      	cmp	r0, #0
 8008e98:	d154      	bne.n	8008f44 <__hexnan+0x100>
 8008e9a:	9b04      	ldr	r3, [sp, #16]
 8008e9c:	2b20      	cmp	r3, #32
 8008e9e:	d819      	bhi.n	8008ed4 <__hexnan+0x90>
 8008ea0:	9b03      	ldr	r3, [sp, #12]
 8008ea2:	9a07      	ldr	r2, [sp, #28]
 8008ea4:	4293      	cmp	r3, r2
 8008ea6:	dd12      	ble.n	8008ece <__hexnan+0x8a>
 8008ea8:	42bc      	cmp	r4, r7
 8008eaa:	d206      	bcs.n	8008eba <__hexnan+0x76>
 8008eac:	2d07      	cmp	r5, #7
 8008eae:	dc04      	bgt.n	8008eba <__hexnan+0x76>
 8008eb0:	002a      	movs	r2, r5
 8008eb2:	0039      	movs	r1, r7
 8008eb4:	0020      	movs	r0, r4
 8008eb6:	f7ff ff9f 	bl	8008df8 <L_shift>
 8008eba:	9b01      	ldr	r3, [sp, #4]
 8008ebc:	2508      	movs	r5, #8
 8008ebe:	429c      	cmp	r4, r3
 8008ec0:	d905      	bls.n	8008ece <__hexnan+0x8a>
 8008ec2:	1f27      	subs	r7, r4, #4
 8008ec4:	2500      	movs	r5, #0
 8008ec6:	003c      	movs	r4, r7
 8008ec8:	9b03      	ldr	r3, [sp, #12]
 8008eca:	603d      	str	r5, [r7, #0]
 8008ecc:	9307      	str	r3, [sp, #28]
 8008ece:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ed0:	9305      	str	r3, [sp, #20]
 8008ed2:	e7d5      	b.n	8008e80 <__hexnan+0x3c>
 8008ed4:	9b04      	ldr	r3, [sp, #16]
 8008ed6:	2b29      	cmp	r3, #41	; 0x29
 8008ed8:	d159      	bne.n	8008f8e <__hexnan+0x14a>
 8008eda:	9b05      	ldr	r3, [sp, #20]
 8008edc:	9a08      	ldr	r2, [sp, #32]
 8008ede:	3302      	adds	r3, #2
 8008ee0:	6013      	str	r3, [r2, #0]
 8008ee2:	9b03      	ldr	r3, [sp, #12]
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d052      	beq.n	8008f8e <__hexnan+0x14a>
 8008ee8:	42bc      	cmp	r4, r7
 8008eea:	d206      	bcs.n	8008efa <__hexnan+0xb6>
 8008eec:	2d07      	cmp	r5, #7
 8008eee:	dc04      	bgt.n	8008efa <__hexnan+0xb6>
 8008ef0:	002a      	movs	r2, r5
 8008ef2:	0039      	movs	r1, r7
 8008ef4:	0020      	movs	r0, r4
 8008ef6:	f7ff ff7f 	bl	8008df8 <L_shift>
 8008efa:	9b01      	ldr	r3, [sp, #4]
 8008efc:	429c      	cmp	r4, r3
 8008efe:	d935      	bls.n	8008f6c <__hexnan+0x128>
 8008f00:	001a      	movs	r2, r3
 8008f02:	0023      	movs	r3, r4
 8008f04:	cb02      	ldmia	r3!, {r1}
 8008f06:	c202      	stmia	r2!, {r1}
 8008f08:	429e      	cmp	r6, r3
 8008f0a:	d2fb      	bcs.n	8008f04 <__hexnan+0xc0>
 8008f0c:	9b02      	ldr	r3, [sp, #8]
 8008f0e:	1c61      	adds	r1, r4, #1
 8008f10:	1eda      	subs	r2, r3, #3
 8008f12:	2304      	movs	r3, #4
 8008f14:	4291      	cmp	r1, r2
 8008f16:	d805      	bhi.n	8008f24 <__hexnan+0xe0>
 8008f18:	9b02      	ldr	r3, [sp, #8]
 8008f1a:	3b04      	subs	r3, #4
 8008f1c:	1b1b      	subs	r3, r3, r4
 8008f1e:	089b      	lsrs	r3, r3, #2
 8008f20:	3301      	adds	r3, #1
 8008f22:	009b      	lsls	r3, r3, #2
 8008f24:	9a01      	ldr	r2, [sp, #4]
 8008f26:	18d3      	adds	r3, r2, r3
 8008f28:	2200      	movs	r2, #0
 8008f2a:	c304      	stmia	r3!, {r2}
 8008f2c:	429e      	cmp	r6, r3
 8008f2e:	d2fc      	bcs.n	8008f2a <__hexnan+0xe6>
 8008f30:	6833      	ldr	r3, [r6, #0]
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d104      	bne.n	8008f40 <__hexnan+0xfc>
 8008f36:	9b01      	ldr	r3, [sp, #4]
 8008f38:	429e      	cmp	r6, r3
 8008f3a:	d126      	bne.n	8008f8a <__hexnan+0x146>
 8008f3c:	2301      	movs	r3, #1
 8008f3e:	6033      	str	r3, [r6, #0]
 8008f40:	2005      	movs	r0, #5
 8008f42:	e025      	b.n	8008f90 <__hexnan+0x14c>
 8008f44:	9b03      	ldr	r3, [sp, #12]
 8008f46:	3501      	adds	r5, #1
 8008f48:	3301      	adds	r3, #1
 8008f4a:	9303      	str	r3, [sp, #12]
 8008f4c:	2d08      	cmp	r5, #8
 8008f4e:	dd06      	ble.n	8008f5e <__hexnan+0x11a>
 8008f50:	9b01      	ldr	r3, [sp, #4]
 8008f52:	429c      	cmp	r4, r3
 8008f54:	d9bb      	bls.n	8008ece <__hexnan+0x8a>
 8008f56:	2300      	movs	r3, #0
 8008f58:	2501      	movs	r5, #1
 8008f5a:	3c04      	subs	r4, #4
 8008f5c:	6023      	str	r3, [r4, #0]
 8008f5e:	220f      	movs	r2, #15
 8008f60:	6823      	ldr	r3, [r4, #0]
 8008f62:	4010      	ands	r0, r2
 8008f64:	011b      	lsls	r3, r3, #4
 8008f66:	4318      	orrs	r0, r3
 8008f68:	6020      	str	r0, [r4, #0]
 8008f6a:	e7b0      	b.n	8008ece <__hexnan+0x8a>
 8008f6c:	9b06      	ldr	r3, [sp, #24]
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d0de      	beq.n	8008f30 <__hexnan+0xec>
 8008f72:	2120      	movs	r1, #32
 8008f74:	9a06      	ldr	r2, [sp, #24]
 8008f76:	9b02      	ldr	r3, [sp, #8]
 8008f78:	1a89      	subs	r1, r1, r2
 8008f7a:	2201      	movs	r2, #1
 8008f7c:	4252      	negs	r2, r2
 8008f7e:	40ca      	lsrs	r2, r1
 8008f80:	3b04      	subs	r3, #4
 8008f82:	6819      	ldr	r1, [r3, #0]
 8008f84:	400a      	ands	r2, r1
 8008f86:	601a      	str	r2, [r3, #0]
 8008f88:	e7d2      	b.n	8008f30 <__hexnan+0xec>
 8008f8a:	3e04      	subs	r6, #4
 8008f8c:	e7d0      	b.n	8008f30 <__hexnan+0xec>
 8008f8e:	2004      	movs	r0, #4
 8008f90:	b00b      	add	sp, #44	; 0x2c
 8008f92:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008f94 <_localeconv_r>:
 8008f94:	4800      	ldr	r0, [pc, #0]	; (8008f98 <_localeconv_r+0x4>)
 8008f96:	4770      	bx	lr
 8008f98:	20000164 	.word	0x20000164

08008f9c <malloc>:
 8008f9c:	b510      	push	{r4, lr}
 8008f9e:	4b03      	ldr	r3, [pc, #12]	; (8008fac <malloc+0x10>)
 8008fa0:	0001      	movs	r1, r0
 8008fa2:	6818      	ldr	r0, [r3, #0]
 8008fa4:	f000 fd8c 	bl	8009ac0 <_malloc_r>
 8008fa8:	bd10      	pop	{r4, pc}
 8008faa:	46c0      	nop			; (mov r8, r8)
 8008fac:	2000000c 	.word	0x2000000c

08008fb0 <__ascii_mbtowc>:
 8008fb0:	b082      	sub	sp, #8
 8008fb2:	2900      	cmp	r1, #0
 8008fb4:	d100      	bne.n	8008fb8 <__ascii_mbtowc+0x8>
 8008fb6:	a901      	add	r1, sp, #4
 8008fb8:	1e10      	subs	r0, r2, #0
 8008fba:	d006      	beq.n	8008fca <__ascii_mbtowc+0x1a>
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d006      	beq.n	8008fce <__ascii_mbtowc+0x1e>
 8008fc0:	7813      	ldrb	r3, [r2, #0]
 8008fc2:	600b      	str	r3, [r1, #0]
 8008fc4:	7810      	ldrb	r0, [r2, #0]
 8008fc6:	1e43      	subs	r3, r0, #1
 8008fc8:	4198      	sbcs	r0, r3
 8008fca:	b002      	add	sp, #8
 8008fcc:	4770      	bx	lr
 8008fce:	2002      	movs	r0, #2
 8008fd0:	4240      	negs	r0, r0
 8008fd2:	e7fa      	b.n	8008fca <__ascii_mbtowc+0x1a>

08008fd4 <memchr>:
 8008fd4:	b2c9      	uxtb	r1, r1
 8008fd6:	1882      	adds	r2, r0, r2
 8008fd8:	4290      	cmp	r0, r2
 8008fda:	d101      	bne.n	8008fe0 <memchr+0xc>
 8008fdc:	2000      	movs	r0, #0
 8008fde:	4770      	bx	lr
 8008fe0:	7803      	ldrb	r3, [r0, #0]
 8008fe2:	428b      	cmp	r3, r1
 8008fe4:	d0fb      	beq.n	8008fde <memchr+0xa>
 8008fe6:	3001      	adds	r0, #1
 8008fe8:	e7f6      	b.n	8008fd8 <memchr+0x4>

08008fea <memcpy>:
 8008fea:	2300      	movs	r3, #0
 8008fec:	b510      	push	{r4, lr}
 8008fee:	429a      	cmp	r2, r3
 8008ff0:	d100      	bne.n	8008ff4 <memcpy+0xa>
 8008ff2:	bd10      	pop	{r4, pc}
 8008ff4:	5ccc      	ldrb	r4, [r1, r3]
 8008ff6:	54c4      	strb	r4, [r0, r3]
 8008ff8:	3301      	adds	r3, #1
 8008ffa:	e7f8      	b.n	8008fee <memcpy+0x4>

08008ffc <_Balloc>:
 8008ffc:	b570      	push	{r4, r5, r6, lr}
 8008ffe:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009000:	0006      	movs	r6, r0
 8009002:	000c      	movs	r4, r1
 8009004:	2d00      	cmp	r5, #0
 8009006:	d10e      	bne.n	8009026 <_Balloc+0x2a>
 8009008:	2010      	movs	r0, #16
 800900a:	f7ff ffc7 	bl	8008f9c <malloc>
 800900e:	1e02      	subs	r2, r0, #0
 8009010:	6270      	str	r0, [r6, #36]	; 0x24
 8009012:	d104      	bne.n	800901e <_Balloc+0x22>
 8009014:	2166      	movs	r1, #102	; 0x66
 8009016:	4b19      	ldr	r3, [pc, #100]	; (800907c <_Balloc+0x80>)
 8009018:	4819      	ldr	r0, [pc, #100]	; (8009080 <_Balloc+0x84>)
 800901a:	f000 ff61 	bl	8009ee0 <__assert_func>
 800901e:	6045      	str	r5, [r0, #4]
 8009020:	6085      	str	r5, [r0, #8]
 8009022:	6005      	str	r5, [r0, #0]
 8009024:	60c5      	str	r5, [r0, #12]
 8009026:	6a75      	ldr	r5, [r6, #36]	; 0x24
 8009028:	68eb      	ldr	r3, [r5, #12]
 800902a:	2b00      	cmp	r3, #0
 800902c:	d013      	beq.n	8009056 <_Balloc+0x5a>
 800902e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8009030:	00a2      	lsls	r2, r4, #2
 8009032:	68db      	ldr	r3, [r3, #12]
 8009034:	189b      	adds	r3, r3, r2
 8009036:	6818      	ldr	r0, [r3, #0]
 8009038:	2800      	cmp	r0, #0
 800903a:	d118      	bne.n	800906e <_Balloc+0x72>
 800903c:	2101      	movs	r1, #1
 800903e:	000d      	movs	r5, r1
 8009040:	40a5      	lsls	r5, r4
 8009042:	1d6a      	adds	r2, r5, #5
 8009044:	0030      	movs	r0, r6
 8009046:	0092      	lsls	r2, r2, #2
 8009048:	f000 fca1 	bl	800998e <_calloc_r>
 800904c:	2800      	cmp	r0, #0
 800904e:	d00c      	beq.n	800906a <_Balloc+0x6e>
 8009050:	6044      	str	r4, [r0, #4]
 8009052:	6085      	str	r5, [r0, #8]
 8009054:	e00d      	b.n	8009072 <_Balloc+0x76>
 8009056:	2221      	movs	r2, #33	; 0x21
 8009058:	2104      	movs	r1, #4
 800905a:	0030      	movs	r0, r6
 800905c:	f000 fc97 	bl	800998e <_calloc_r>
 8009060:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8009062:	60e8      	str	r0, [r5, #12]
 8009064:	68db      	ldr	r3, [r3, #12]
 8009066:	2b00      	cmp	r3, #0
 8009068:	d1e1      	bne.n	800902e <_Balloc+0x32>
 800906a:	2000      	movs	r0, #0
 800906c:	bd70      	pop	{r4, r5, r6, pc}
 800906e:	6802      	ldr	r2, [r0, #0]
 8009070:	601a      	str	r2, [r3, #0]
 8009072:	2300      	movs	r3, #0
 8009074:	6103      	str	r3, [r0, #16]
 8009076:	60c3      	str	r3, [r0, #12]
 8009078:	e7f8      	b.n	800906c <_Balloc+0x70>
 800907a:	46c0      	nop			; (mov r8, r8)
 800907c:	0800aea6 	.word	0x0800aea6
 8009080:	0800afa4 	.word	0x0800afa4

08009084 <_Bfree>:
 8009084:	b570      	push	{r4, r5, r6, lr}
 8009086:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009088:	0005      	movs	r5, r0
 800908a:	000c      	movs	r4, r1
 800908c:	2e00      	cmp	r6, #0
 800908e:	d10e      	bne.n	80090ae <_Bfree+0x2a>
 8009090:	2010      	movs	r0, #16
 8009092:	f7ff ff83 	bl	8008f9c <malloc>
 8009096:	1e02      	subs	r2, r0, #0
 8009098:	6268      	str	r0, [r5, #36]	; 0x24
 800909a:	d104      	bne.n	80090a6 <_Bfree+0x22>
 800909c:	218a      	movs	r1, #138	; 0x8a
 800909e:	4b09      	ldr	r3, [pc, #36]	; (80090c4 <_Bfree+0x40>)
 80090a0:	4809      	ldr	r0, [pc, #36]	; (80090c8 <_Bfree+0x44>)
 80090a2:	f000 ff1d 	bl	8009ee0 <__assert_func>
 80090a6:	6046      	str	r6, [r0, #4]
 80090a8:	6086      	str	r6, [r0, #8]
 80090aa:	6006      	str	r6, [r0, #0]
 80090ac:	60c6      	str	r6, [r0, #12]
 80090ae:	2c00      	cmp	r4, #0
 80090b0:	d007      	beq.n	80090c2 <_Bfree+0x3e>
 80090b2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80090b4:	6862      	ldr	r2, [r4, #4]
 80090b6:	68db      	ldr	r3, [r3, #12]
 80090b8:	0092      	lsls	r2, r2, #2
 80090ba:	189b      	adds	r3, r3, r2
 80090bc:	681a      	ldr	r2, [r3, #0]
 80090be:	6022      	str	r2, [r4, #0]
 80090c0:	601c      	str	r4, [r3, #0]
 80090c2:	bd70      	pop	{r4, r5, r6, pc}
 80090c4:	0800aea6 	.word	0x0800aea6
 80090c8:	0800afa4 	.word	0x0800afa4

080090cc <__multadd>:
 80090cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80090ce:	000e      	movs	r6, r1
 80090d0:	9001      	str	r0, [sp, #4]
 80090d2:	000c      	movs	r4, r1
 80090d4:	001d      	movs	r5, r3
 80090d6:	2000      	movs	r0, #0
 80090d8:	690f      	ldr	r7, [r1, #16]
 80090da:	3614      	adds	r6, #20
 80090dc:	6833      	ldr	r3, [r6, #0]
 80090de:	3001      	adds	r0, #1
 80090e0:	b299      	uxth	r1, r3
 80090e2:	4351      	muls	r1, r2
 80090e4:	0c1b      	lsrs	r3, r3, #16
 80090e6:	4353      	muls	r3, r2
 80090e8:	1949      	adds	r1, r1, r5
 80090ea:	0c0d      	lsrs	r5, r1, #16
 80090ec:	195b      	adds	r3, r3, r5
 80090ee:	0c1d      	lsrs	r5, r3, #16
 80090f0:	b289      	uxth	r1, r1
 80090f2:	041b      	lsls	r3, r3, #16
 80090f4:	185b      	adds	r3, r3, r1
 80090f6:	c608      	stmia	r6!, {r3}
 80090f8:	4287      	cmp	r7, r0
 80090fa:	dcef      	bgt.n	80090dc <__multadd+0x10>
 80090fc:	2d00      	cmp	r5, #0
 80090fe:	d022      	beq.n	8009146 <__multadd+0x7a>
 8009100:	68a3      	ldr	r3, [r4, #8]
 8009102:	42bb      	cmp	r3, r7
 8009104:	dc19      	bgt.n	800913a <__multadd+0x6e>
 8009106:	6863      	ldr	r3, [r4, #4]
 8009108:	9801      	ldr	r0, [sp, #4]
 800910a:	1c59      	adds	r1, r3, #1
 800910c:	f7ff ff76 	bl	8008ffc <_Balloc>
 8009110:	1e06      	subs	r6, r0, #0
 8009112:	d105      	bne.n	8009120 <__multadd+0x54>
 8009114:	0002      	movs	r2, r0
 8009116:	21b5      	movs	r1, #181	; 0xb5
 8009118:	4b0c      	ldr	r3, [pc, #48]	; (800914c <__multadd+0x80>)
 800911a:	480d      	ldr	r0, [pc, #52]	; (8009150 <__multadd+0x84>)
 800911c:	f000 fee0 	bl	8009ee0 <__assert_func>
 8009120:	0021      	movs	r1, r4
 8009122:	6923      	ldr	r3, [r4, #16]
 8009124:	310c      	adds	r1, #12
 8009126:	1c9a      	adds	r2, r3, #2
 8009128:	0092      	lsls	r2, r2, #2
 800912a:	300c      	adds	r0, #12
 800912c:	f7ff ff5d 	bl	8008fea <memcpy>
 8009130:	0021      	movs	r1, r4
 8009132:	9801      	ldr	r0, [sp, #4]
 8009134:	f7ff ffa6 	bl	8009084 <_Bfree>
 8009138:	0034      	movs	r4, r6
 800913a:	1d3b      	adds	r3, r7, #4
 800913c:	009b      	lsls	r3, r3, #2
 800913e:	18e3      	adds	r3, r4, r3
 8009140:	605d      	str	r5, [r3, #4]
 8009142:	1c7b      	adds	r3, r7, #1
 8009144:	6123      	str	r3, [r4, #16]
 8009146:	0020      	movs	r0, r4
 8009148:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800914a:	46c0      	nop			; (mov r8, r8)
 800914c:	0800af18 	.word	0x0800af18
 8009150:	0800afa4 	.word	0x0800afa4

08009154 <__s2b>:
 8009154:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009156:	0006      	movs	r6, r0
 8009158:	0018      	movs	r0, r3
 800915a:	000c      	movs	r4, r1
 800915c:	3008      	adds	r0, #8
 800915e:	2109      	movs	r1, #9
 8009160:	9301      	str	r3, [sp, #4]
 8009162:	0015      	movs	r5, r2
 8009164:	f7f7 f874 	bl	8000250 <__divsi3>
 8009168:	2301      	movs	r3, #1
 800916a:	2100      	movs	r1, #0
 800916c:	4283      	cmp	r3, r0
 800916e:	db0a      	blt.n	8009186 <__s2b+0x32>
 8009170:	0030      	movs	r0, r6
 8009172:	f7ff ff43 	bl	8008ffc <_Balloc>
 8009176:	1e01      	subs	r1, r0, #0
 8009178:	d108      	bne.n	800918c <__s2b+0x38>
 800917a:	0002      	movs	r2, r0
 800917c:	4b19      	ldr	r3, [pc, #100]	; (80091e4 <__s2b+0x90>)
 800917e:	481a      	ldr	r0, [pc, #104]	; (80091e8 <__s2b+0x94>)
 8009180:	31ce      	adds	r1, #206	; 0xce
 8009182:	f000 fead 	bl	8009ee0 <__assert_func>
 8009186:	005b      	lsls	r3, r3, #1
 8009188:	3101      	adds	r1, #1
 800918a:	e7ef      	b.n	800916c <__s2b+0x18>
 800918c:	9b08      	ldr	r3, [sp, #32]
 800918e:	6143      	str	r3, [r0, #20]
 8009190:	2301      	movs	r3, #1
 8009192:	6103      	str	r3, [r0, #16]
 8009194:	2d09      	cmp	r5, #9
 8009196:	dd18      	ble.n	80091ca <__s2b+0x76>
 8009198:	0023      	movs	r3, r4
 800919a:	3309      	adds	r3, #9
 800919c:	001f      	movs	r7, r3
 800919e:	9300      	str	r3, [sp, #0]
 80091a0:	1964      	adds	r4, r4, r5
 80091a2:	783b      	ldrb	r3, [r7, #0]
 80091a4:	220a      	movs	r2, #10
 80091a6:	0030      	movs	r0, r6
 80091a8:	3b30      	subs	r3, #48	; 0x30
 80091aa:	f7ff ff8f 	bl	80090cc <__multadd>
 80091ae:	3701      	adds	r7, #1
 80091b0:	0001      	movs	r1, r0
 80091b2:	42a7      	cmp	r7, r4
 80091b4:	d1f5      	bne.n	80091a2 <__s2b+0x4e>
 80091b6:	002c      	movs	r4, r5
 80091b8:	9b00      	ldr	r3, [sp, #0]
 80091ba:	3c08      	subs	r4, #8
 80091bc:	191c      	adds	r4, r3, r4
 80091be:	002f      	movs	r7, r5
 80091c0:	9b01      	ldr	r3, [sp, #4]
 80091c2:	429f      	cmp	r7, r3
 80091c4:	db04      	blt.n	80091d0 <__s2b+0x7c>
 80091c6:	0008      	movs	r0, r1
 80091c8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80091ca:	2509      	movs	r5, #9
 80091cc:	340a      	adds	r4, #10
 80091ce:	e7f6      	b.n	80091be <__s2b+0x6a>
 80091d0:	1b63      	subs	r3, r4, r5
 80091d2:	5ddb      	ldrb	r3, [r3, r7]
 80091d4:	220a      	movs	r2, #10
 80091d6:	0030      	movs	r0, r6
 80091d8:	3b30      	subs	r3, #48	; 0x30
 80091da:	f7ff ff77 	bl	80090cc <__multadd>
 80091de:	3701      	adds	r7, #1
 80091e0:	0001      	movs	r1, r0
 80091e2:	e7ed      	b.n	80091c0 <__s2b+0x6c>
 80091e4:	0800af18 	.word	0x0800af18
 80091e8:	0800afa4 	.word	0x0800afa4

080091ec <__hi0bits>:
 80091ec:	0003      	movs	r3, r0
 80091ee:	0c02      	lsrs	r2, r0, #16
 80091f0:	2000      	movs	r0, #0
 80091f2:	4282      	cmp	r2, r0
 80091f4:	d101      	bne.n	80091fa <__hi0bits+0xe>
 80091f6:	041b      	lsls	r3, r3, #16
 80091f8:	3010      	adds	r0, #16
 80091fa:	0e1a      	lsrs	r2, r3, #24
 80091fc:	d101      	bne.n	8009202 <__hi0bits+0x16>
 80091fe:	3008      	adds	r0, #8
 8009200:	021b      	lsls	r3, r3, #8
 8009202:	0f1a      	lsrs	r2, r3, #28
 8009204:	d101      	bne.n	800920a <__hi0bits+0x1e>
 8009206:	3004      	adds	r0, #4
 8009208:	011b      	lsls	r3, r3, #4
 800920a:	0f9a      	lsrs	r2, r3, #30
 800920c:	d101      	bne.n	8009212 <__hi0bits+0x26>
 800920e:	3002      	adds	r0, #2
 8009210:	009b      	lsls	r3, r3, #2
 8009212:	2b00      	cmp	r3, #0
 8009214:	db03      	blt.n	800921e <__hi0bits+0x32>
 8009216:	3001      	adds	r0, #1
 8009218:	005b      	lsls	r3, r3, #1
 800921a:	d400      	bmi.n	800921e <__hi0bits+0x32>
 800921c:	2020      	movs	r0, #32
 800921e:	4770      	bx	lr

08009220 <__lo0bits>:
 8009220:	6803      	ldr	r3, [r0, #0]
 8009222:	0002      	movs	r2, r0
 8009224:	2107      	movs	r1, #7
 8009226:	0018      	movs	r0, r3
 8009228:	4008      	ands	r0, r1
 800922a:	420b      	tst	r3, r1
 800922c:	d00d      	beq.n	800924a <__lo0bits+0x2a>
 800922e:	3906      	subs	r1, #6
 8009230:	2000      	movs	r0, #0
 8009232:	420b      	tst	r3, r1
 8009234:	d105      	bne.n	8009242 <__lo0bits+0x22>
 8009236:	3002      	adds	r0, #2
 8009238:	4203      	tst	r3, r0
 800923a:	d003      	beq.n	8009244 <__lo0bits+0x24>
 800923c:	40cb      	lsrs	r3, r1
 800923e:	0008      	movs	r0, r1
 8009240:	6013      	str	r3, [r2, #0]
 8009242:	4770      	bx	lr
 8009244:	089b      	lsrs	r3, r3, #2
 8009246:	6013      	str	r3, [r2, #0]
 8009248:	e7fb      	b.n	8009242 <__lo0bits+0x22>
 800924a:	b299      	uxth	r1, r3
 800924c:	2900      	cmp	r1, #0
 800924e:	d101      	bne.n	8009254 <__lo0bits+0x34>
 8009250:	2010      	movs	r0, #16
 8009252:	0c1b      	lsrs	r3, r3, #16
 8009254:	b2d9      	uxtb	r1, r3
 8009256:	2900      	cmp	r1, #0
 8009258:	d101      	bne.n	800925e <__lo0bits+0x3e>
 800925a:	3008      	adds	r0, #8
 800925c:	0a1b      	lsrs	r3, r3, #8
 800925e:	0719      	lsls	r1, r3, #28
 8009260:	d101      	bne.n	8009266 <__lo0bits+0x46>
 8009262:	3004      	adds	r0, #4
 8009264:	091b      	lsrs	r3, r3, #4
 8009266:	0799      	lsls	r1, r3, #30
 8009268:	d101      	bne.n	800926e <__lo0bits+0x4e>
 800926a:	3002      	adds	r0, #2
 800926c:	089b      	lsrs	r3, r3, #2
 800926e:	07d9      	lsls	r1, r3, #31
 8009270:	d4e9      	bmi.n	8009246 <__lo0bits+0x26>
 8009272:	3001      	adds	r0, #1
 8009274:	085b      	lsrs	r3, r3, #1
 8009276:	d1e6      	bne.n	8009246 <__lo0bits+0x26>
 8009278:	2020      	movs	r0, #32
 800927a:	e7e2      	b.n	8009242 <__lo0bits+0x22>

0800927c <__i2b>:
 800927c:	b510      	push	{r4, lr}
 800927e:	000c      	movs	r4, r1
 8009280:	2101      	movs	r1, #1
 8009282:	f7ff febb 	bl	8008ffc <_Balloc>
 8009286:	2800      	cmp	r0, #0
 8009288:	d106      	bne.n	8009298 <__i2b+0x1c>
 800928a:	21a0      	movs	r1, #160	; 0xa0
 800928c:	0002      	movs	r2, r0
 800928e:	4b04      	ldr	r3, [pc, #16]	; (80092a0 <__i2b+0x24>)
 8009290:	4804      	ldr	r0, [pc, #16]	; (80092a4 <__i2b+0x28>)
 8009292:	0049      	lsls	r1, r1, #1
 8009294:	f000 fe24 	bl	8009ee0 <__assert_func>
 8009298:	2301      	movs	r3, #1
 800929a:	6144      	str	r4, [r0, #20]
 800929c:	6103      	str	r3, [r0, #16]
 800929e:	bd10      	pop	{r4, pc}
 80092a0:	0800af18 	.word	0x0800af18
 80092a4:	0800afa4 	.word	0x0800afa4

080092a8 <__multiply>:
 80092a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80092aa:	690b      	ldr	r3, [r1, #16]
 80092ac:	0014      	movs	r4, r2
 80092ae:	6912      	ldr	r2, [r2, #16]
 80092b0:	000d      	movs	r5, r1
 80092b2:	b089      	sub	sp, #36	; 0x24
 80092b4:	4293      	cmp	r3, r2
 80092b6:	da01      	bge.n	80092bc <__multiply+0x14>
 80092b8:	0025      	movs	r5, r4
 80092ba:	000c      	movs	r4, r1
 80092bc:	692f      	ldr	r7, [r5, #16]
 80092be:	6926      	ldr	r6, [r4, #16]
 80092c0:	6869      	ldr	r1, [r5, #4]
 80092c2:	19bb      	adds	r3, r7, r6
 80092c4:	9302      	str	r3, [sp, #8]
 80092c6:	68ab      	ldr	r3, [r5, #8]
 80092c8:	19ba      	adds	r2, r7, r6
 80092ca:	4293      	cmp	r3, r2
 80092cc:	da00      	bge.n	80092d0 <__multiply+0x28>
 80092ce:	3101      	adds	r1, #1
 80092d0:	f7ff fe94 	bl	8008ffc <_Balloc>
 80092d4:	9001      	str	r0, [sp, #4]
 80092d6:	2800      	cmp	r0, #0
 80092d8:	d106      	bne.n	80092e8 <__multiply+0x40>
 80092da:	215e      	movs	r1, #94	; 0x5e
 80092dc:	0002      	movs	r2, r0
 80092de:	4b48      	ldr	r3, [pc, #288]	; (8009400 <__multiply+0x158>)
 80092e0:	4848      	ldr	r0, [pc, #288]	; (8009404 <__multiply+0x15c>)
 80092e2:	31ff      	adds	r1, #255	; 0xff
 80092e4:	f000 fdfc 	bl	8009ee0 <__assert_func>
 80092e8:	9b01      	ldr	r3, [sp, #4]
 80092ea:	2200      	movs	r2, #0
 80092ec:	3314      	adds	r3, #20
 80092ee:	469c      	mov	ip, r3
 80092f0:	19bb      	adds	r3, r7, r6
 80092f2:	009b      	lsls	r3, r3, #2
 80092f4:	4463      	add	r3, ip
 80092f6:	9303      	str	r3, [sp, #12]
 80092f8:	4663      	mov	r3, ip
 80092fa:	9903      	ldr	r1, [sp, #12]
 80092fc:	428b      	cmp	r3, r1
 80092fe:	d32c      	bcc.n	800935a <__multiply+0xb2>
 8009300:	002b      	movs	r3, r5
 8009302:	0022      	movs	r2, r4
 8009304:	3314      	adds	r3, #20
 8009306:	00bf      	lsls	r7, r7, #2
 8009308:	3214      	adds	r2, #20
 800930a:	9306      	str	r3, [sp, #24]
 800930c:	00b6      	lsls	r6, r6, #2
 800930e:	19db      	adds	r3, r3, r7
 8009310:	9304      	str	r3, [sp, #16]
 8009312:	1993      	adds	r3, r2, r6
 8009314:	9307      	str	r3, [sp, #28]
 8009316:	2304      	movs	r3, #4
 8009318:	9305      	str	r3, [sp, #20]
 800931a:	002b      	movs	r3, r5
 800931c:	9904      	ldr	r1, [sp, #16]
 800931e:	3315      	adds	r3, #21
 8009320:	9200      	str	r2, [sp, #0]
 8009322:	4299      	cmp	r1, r3
 8009324:	d305      	bcc.n	8009332 <__multiply+0x8a>
 8009326:	1b4b      	subs	r3, r1, r5
 8009328:	3b15      	subs	r3, #21
 800932a:	089b      	lsrs	r3, r3, #2
 800932c:	3301      	adds	r3, #1
 800932e:	009b      	lsls	r3, r3, #2
 8009330:	9305      	str	r3, [sp, #20]
 8009332:	9b07      	ldr	r3, [sp, #28]
 8009334:	9a00      	ldr	r2, [sp, #0]
 8009336:	429a      	cmp	r2, r3
 8009338:	d311      	bcc.n	800935e <__multiply+0xb6>
 800933a:	9b02      	ldr	r3, [sp, #8]
 800933c:	2b00      	cmp	r3, #0
 800933e:	dd06      	ble.n	800934e <__multiply+0xa6>
 8009340:	9b03      	ldr	r3, [sp, #12]
 8009342:	3b04      	subs	r3, #4
 8009344:	9303      	str	r3, [sp, #12]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	9300      	str	r3, [sp, #0]
 800934a:	2b00      	cmp	r3, #0
 800934c:	d053      	beq.n	80093f6 <__multiply+0x14e>
 800934e:	9b01      	ldr	r3, [sp, #4]
 8009350:	9a02      	ldr	r2, [sp, #8]
 8009352:	0018      	movs	r0, r3
 8009354:	611a      	str	r2, [r3, #16]
 8009356:	b009      	add	sp, #36	; 0x24
 8009358:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800935a:	c304      	stmia	r3!, {r2}
 800935c:	e7cd      	b.n	80092fa <__multiply+0x52>
 800935e:	9b00      	ldr	r3, [sp, #0]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	b298      	uxth	r0, r3
 8009364:	2800      	cmp	r0, #0
 8009366:	d01b      	beq.n	80093a0 <__multiply+0xf8>
 8009368:	4667      	mov	r7, ip
 800936a:	2400      	movs	r4, #0
 800936c:	9e06      	ldr	r6, [sp, #24]
 800936e:	ce02      	ldmia	r6!, {r1}
 8009370:	683a      	ldr	r2, [r7, #0]
 8009372:	b28b      	uxth	r3, r1
 8009374:	4343      	muls	r3, r0
 8009376:	b292      	uxth	r2, r2
 8009378:	189b      	adds	r3, r3, r2
 800937a:	191b      	adds	r3, r3, r4
 800937c:	0c0c      	lsrs	r4, r1, #16
 800937e:	4344      	muls	r4, r0
 8009380:	683a      	ldr	r2, [r7, #0]
 8009382:	0c11      	lsrs	r1, r2, #16
 8009384:	1861      	adds	r1, r4, r1
 8009386:	0c1c      	lsrs	r4, r3, #16
 8009388:	1909      	adds	r1, r1, r4
 800938a:	0c0c      	lsrs	r4, r1, #16
 800938c:	b29b      	uxth	r3, r3
 800938e:	0409      	lsls	r1, r1, #16
 8009390:	430b      	orrs	r3, r1
 8009392:	c708      	stmia	r7!, {r3}
 8009394:	9b04      	ldr	r3, [sp, #16]
 8009396:	42b3      	cmp	r3, r6
 8009398:	d8e9      	bhi.n	800936e <__multiply+0xc6>
 800939a:	4663      	mov	r3, ip
 800939c:	9a05      	ldr	r2, [sp, #20]
 800939e:	509c      	str	r4, [r3, r2]
 80093a0:	9b00      	ldr	r3, [sp, #0]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	0c1e      	lsrs	r6, r3, #16
 80093a6:	d020      	beq.n	80093ea <__multiply+0x142>
 80093a8:	4663      	mov	r3, ip
 80093aa:	002c      	movs	r4, r5
 80093ac:	4660      	mov	r0, ip
 80093ae:	2700      	movs	r7, #0
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	3414      	adds	r4, #20
 80093b4:	6822      	ldr	r2, [r4, #0]
 80093b6:	b29b      	uxth	r3, r3
 80093b8:	b291      	uxth	r1, r2
 80093ba:	4371      	muls	r1, r6
 80093bc:	6802      	ldr	r2, [r0, #0]
 80093be:	0c12      	lsrs	r2, r2, #16
 80093c0:	1889      	adds	r1, r1, r2
 80093c2:	19cf      	adds	r7, r1, r7
 80093c4:	0439      	lsls	r1, r7, #16
 80093c6:	430b      	orrs	r3, r1
 80093c8:	6003      	str	r3, [r0, #0]
 80093ca:	cc02      	ldmia	r4!, {r1}
 80093cc:	6843      	ldr	r3, [r0, #4]
 80093ce:	0c09      	lsrs	r1, r1, #16
 80093d0:	4371      	muls	r1, r6
 80093d2:	b29b      	uxth	r3, r3
 80093d4:	0c3f      	lsrs	r7, r7, #16
 80093d6:	18cb      	adds	r3, r1, r3
 80093d8:	9a04      	ldr	r2, [sp, #16]
 80093da:	19db      	adds	r3, r3, r7
 80093dc:	0c1f      	lsrs	r7, r3, #16
 80093de:	3004      	adds	r0, #4
 80093e0:	42a2      	cmp	r2, r4
 80093e2:	d8e7      	bhi.n	80093b4 <__multiply+0x10c>
 80093e4:	4662      	mov	r2, ip
 80093e6:	9905      	ldr	r1, [sp, #20]
 80093e8:	5053      	str	r3, [r2, r1]
 80093ea:	9b00      	ldr	r3, [sp, #0]
 80093ec:	3304      	adds	r3, #4
 80093ee:	9300      	str	r3, [sp, #0]
 80093f0:	2304      	movs	r3, #4
 80093f2:	449c      	add	ip, r3
 80093f4:	e79d      	b.n	8009332 <__multiply+0x8a>
 80093f6:	9b02      	ldr	r3, [sp, #8]
 80093f8:	3b01      	subs	r3, #1
 80093fa:	9302      	str	r3, [sp, #8]
 80093fc:	e79d      	b.n	800933a <__multiply+0x92>
 80093fe:	46c0      	nop			; (mov r8, r8)
 8009400:	0800af18 	.word	0x0800af18
 8009404:	0800afa4 	.word	0x0800afa4

08009408 <__pow5mult>:
 8009408:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800940a:	2303      	movs	r3, #3
 800940c:	0015      	movs	r5, r2
 800940e:	0007      	movs	r7, r0
 8009410:	000e      	movs	r6, r1
 8009412:	401a      	ands	r2, r3
 8009414:	421d      	tst	r5, r3
 8009416:	d008      	beq.n	800942a <__pow5mult+0x22>
 8009418:	4925      	ldr	r1, [pc, #148]	; (80094b0 <__pow5mult+0xa8>)
 800941a:	3a01      	subs	r2, #1
 800941c:	0092      	lsls	r2, r2, #2
 800941e:	5852      	ldr	r2, [r2, r1]
 8009420:	2300      	movs	r3, #0
 8009422:	0031      	movs	r1, r6
 8009424:	f7ff fe52 	bl	80090cc <__multadd>
 8009428:	0006      	movs	r6, r0
 800942a:	10ad      	asrs	r5, r5, #2
 800942c:	d03d      	beq.n	80094aa <__pow5mult+0xa2>
 800942e:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8009430:	2c00      	cmp	r4, #0
 8009432:	d10f      	bne.n	8009454 <__pow5mult+0x4c>
 8009434:	2010      	movs	r0, #16
 8009436:	f7ff fdb1 	bl	8008f9c <malloc>
 800943a:	1e02      	subs	r2, r0, #0
 800943c:	6278      	str	r0, [r7, #36]	; 0x24
 800943e:	d105      	bne.n	800944c <__pow5mult+0x44>
 8009440:	21d7      	movs	r1, #215	; 0xd7
 8009442:	4b1c      	ldr	r3, [pc, #112]	; (80094b4 <__pow5mult+0xac>)
 8009444:	481c      	ldr	r0, [pc, #112]	; (80094b8 <__pow5mult+0xb0>)
 8009446:	0049      	lsls	r1, r1, #1
 8009448:	f000 fd4a 	bl	8009ee0 <__assert_func>
 800944c:	6044      	str	r4, [r0, #4]
 800944e:	6084      	str	r4, [r0, #8]
 8009450:	6004      	str	r4, [r0, #0]
 8009452:	60c4      	str	r4, [r0, #12]
 8009454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009456:	689c      	ldr	r4, [r3, #8]
 8009458:	9301      	str	r3, [sp, #4]
 800945a:	2c00      	cmp	r4, #0
 800945c:	d108      	bne.n	8009470 <__pow5mult+0x68>
 800945e:	0038      	movs	r0, r7
 8009460:	4916      	ldr	r1, [pc, #88]	; (80094bc <__pow5mult+0xb4>)
 8009462:	f7ff ff0b 	bl	800927c <__i2b>
 8009466:	9b01      	ldr	r3, [sp, #4]
 8009468:	0004      	movs	r4, r0
 800946a:	6098      	str	r0, [r3, #8]
 800946c:	2300      	movs	r3, #0
 800946e:	6003      	str	r3, [r0, #0]
 8009470:	2301      	movs	r3, #1
 8009472:	421d      	tst	r5, r3
 8009474:	d00a      	beq.n	800948c <__pow5mult+0x84>
 8009476:	0031      	movs	r1, r6
 8009478:	0022      	movs	r2, r4
 800947a:	0038      	movs	r0, r7
 800947c:	f7ff ff14 	bl	80092a8 <__multiply>
 8009480:	0031      	movs	r1, r6
 8009482:	9001      	str	r0, [sp, #4]
 8009484:	0038      	movs	r0, r7
 8009486:	f7ff fdfd 	bl	8009084 <_Bfree>
 800948a:	9e01      	ldr	r6, [sp, #4]
 800948c:	106d      	asrs	r5, r5, #1
 800948e:	d00c      	beq.n	80094aa <__pow5mult+0xa2>
 8009490:	6820      	ldr	r0, [r4, #0]
 8009492:	2800      	cmp	r0, #0
 8009494:	d107      	bne.n	80094a6 <__pow5mult+0x9e>
 8009496:	0022      	movs	r2, r4
 8009498:	0021      	movs	r1, r4
 800949a:	0038      	movs	r0, r7
 800949c:	f7ff ff04 	bl	80092a8 <__multiply>
 80094a0:	2300      	movs	r3, #0
 80094a2:	6020      	str	r0, [r4, #0]
 80094a4:	6003      	str	r3, [r0, #0]
 80094a6:	0004      	movs	r4, r0
 80094a8:	e7e2      	b.n	8009470 <__pow5mult+0x68>
 80094aa:	0030      	movs	r0, r6
 80094ac:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80094ae:	46c0      	nop			; (mov r8, r8)
 80094b0:	0800b0f0 	.word	0x0800b0f0
 80094b4:	0800aea6 	.word	0x0800aea6
 80094b8:	0800afa4 	.word	0x0800afa4
 80094bc:	00000271 	.word	0x00000271

080094c0 <__lshift>:
 80094c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80094c2:	000c      	movs	r4, r1
 80094c4:	0017      	movs	r7, r2
 80094c6:	6923      	ldr	r3, [r4, #16]
 80094c8:	1155      	asrs	r5, r2, #5
 80094ca:	b087      	sub	sp, #28
 80094cc:	18eb      	adds	r3, r5, r3
 80094ce:	9302      	str	r3, [sp, #8]
 80094d0:	3301      	adds	r3, #1
 80094d2:	9301      	str	r3, [sp, #4]
 80094d4:	6849      	ldr	r1, [r1, #4]
 80094d6:	68a3      	ldr	r3, [r4, #8]
 80094d8:	9004      	str	r0, [sp, #16]
 80094da:	9a01      	ldr	r2, [sp, #4]
 80094dc:	4293      	cmp	r3, r2
 80094de:	db10      	blt.n	8009502 <__lshift+0x42>
 80094e0:	9804      	ldr	r0, [sp, #16]
 80094e2:	f7ff fd8b 	bl	8008ffc <_Balloc>
 80094e6:	2300      	movs	r3, #0
 80094e8:	0002      	movs	r2, r0
 80094ea:	0006      	movs	r6, r0
 80094ec:	0019      	movs	r1, r3
 80094ee:	3214      	adds	r2, #20
 80094f0:	4298      	cmp	r0, r3
 80094f2:	d10c      	bne.n	800950e <__lshift+0x4e>
 80094f4:	21da      	movs	r1, #218	; 0xda
 80094f6:	0002      	movs	r2, r0
 80094f8:	4b26      	ldr	r3, [pc, #152]	; (8009594 <__lshift+0xd4>)
 80094fa:	4827      	ldr	r0, [pc, #156]	; (8009598 <__lshift+0xd8>)
 80094fc:	31ff      	adds	r1, #255	; 0xff
 80094fe:	f000 fcef 	bl	8009ee0 <__assert_func>
 8009502:	3101      	adds	r1, #1
 8009504:	005b      	lsls	r3, r3, #1
 8009506:	e7e8      	b.n	80094da <__lshift+0x1a>
 8009508:	0098      	lsls	r0, r3, #2
 800950a:	5011      	str	r1, [r2, r0]
 800950c:	3301      	adds	r3, #1
 800950e:	42ab      	cmp	r3, r5
 8009510:	dbfa      	blt.n	8009508 <__lshift+0x48>
 8009512:	43eb      	mvns	r3, r5
 8009514:	17db      	asrs	r3, r3, #31
 8009516:	401d      	ands	r5, r3
 8009518:	211f      	movs	r1, #31
 800951a:	0023      	movs	r3, r4
 800951c:	0038      	movs	r0, r7
 800951e:	00ad      	lsls	r5, r5, #2
 8009520:	1955      	adds	r5, r2, r5
 8009522:	6922      	ldr	r2, [r4, #16]
 8009524:	3314      	adds	r3, #20
 8009526:	0092      	lsls	r2, r2, #2
 8009528:	4008      	ands	r0, r1
 800952a:	4684      	mov	ip, r0
 800952c:	189a      	adds	r2, r3, r2
 800952e:	420f      	tst	r7, r1
 8009530:	d02a      	beq.n	8009588 <__lshift+0xc8>
 8009532:	3101      	adds	r1, #1
 8009534:	1a09      	subs	r1, r1, r0
 8009536:	9105      	str	r1, [sp, #20]
 8009538:	2100      	movs	r1, #0
 800953a:	9503      	str	r5, [sp, #12]
 800953c:	4667      	mov	r7, ip
 800953e:	6818      	ldr	r0, [r3, #0]
 8009540:	40b8      	lsls	r0, r7
 8009542:	4301      	orrs	r1, r0
 8009544:	9803      	ldr	r0, [sp, #12]
 8009546:	c002      	stmia	r0!, {r1}
 8009548:	cb02      	ldmia	r3!, {r1}
 800954a:	9003      	str	r0, [sp, #12]
 800954c:	9805      	ldr	r0, [sp, #20]
 800954e:	40c1      	lsrs	r1, r0
 8009550:	429a      	cmp	r2, r3
 8009552:	d8f3      	bhi.n	800953c <__lshift+0x7c>
 8009554:	0020      	movs	r0, r4
 8009556:	3015      	adds	r0, #21
 8009558:	2304      	movs	r3, #4
 800955a:	4282      	cmp	r2, r0
 800955c:	d304      	bcc.n	8009568 <__lshift+0xa8>
 800955e:	1b13      	subs	r3, r2, r4
 8009560:	3b15      	subs	r3, #21
 8009562:	089b      	lsrs	r3, r3, #2
 8009564:	3301      	adds	r3, #1
 8009566:	009b      	lsls	r3, r3, #2
 8009568:	50e9      	str	r1, [r5, r3]
 800956a:	2900      	cmp	r1, #0
 800956c:	d002      	beq.n	8009574 <__lshift+0xb4>
 800956e:	9b02      	ldr	r3, [sp, #8]
 8009570:	3302      	adds	r3, #2
 8009572:	9301      	str	r3, [sp, #4]
 8009574:	9b01      	ldr	r3, [sp, #4]
 8009576:	9804      	ldr	r0, [sp, #16]
 8009578:	3b01      	subs	r3, #1
 800957a:	0021      	movs	r1, r4
 800957c:	6133      	str	r3, [r6, #16]
 800957e:	f7ff fd81 	bl	8009084 <_Bfree>
 8009582:	0030      	movs	r0, r6
 8009584:	b007      	add	sp, #28
 8009586:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009588:	cb02      	ldmia	r3!, {r1}
 800958a:	c502      	stmia	r5!, {r1}
 800958c:	429a      	cmp	r2, r3
 800958e:	d8fb      	bhi.n	8009588 <__lshift+0xc8>
 8009590:	e7f0      	b.n	8009574 <__lshift+0xb4>
 8009592:	46c0      	nop			; (mov r8, r8)
 8009594:	0800af18 	.word	0x0800af18
 8009598:	0800afa4 	.word	0x0800afa4

0800959c <__mcmp>:
 800959c:	6902      	ldr	r2, [r0, #16]
 800959e:	690b      	ldr	r3, [r1, #16]
 80095a0:	b530      	push	{r4, r5, lr}
 80095a2:	0004      	movs	r4, r0
 80095a4:	1ad0      	subs	r0, r2, r3
 80095a6:	429a      	cmp	r2, r3
 80095a8:	d10d      	bne.n	80095c6 <__mcmp+0x2a>
 80095aa:	009b      	lsls	r3, r3, #2
 80095ac:	3414      	adds	r4, #20
 80095ae:	3114      	adds	r1, #20
 80095b0:	18e2      	adds	r2, r4, r3
 80095b2:	18c9      	adds	r1, r1, r3
 80095b4:	3a04      	subs	r2, #4
 80095b6:	3904      	subs	r1, #4
 80095b8:	6815      	ldr	r5, [r2, #0]
 80095ba:	680b      	ldr	r3, [r1, #0]
 80095bc:	429d      	cmp	r5, r3
 80095be:	d003      	beq.n	80095c8 <__mcmp+0x2c>
 80095c0:	2001      	movs	r0, #1
 80095c2:	429d      	cmp	r5, r3
 80095c4:	d303      	bcc.n	80095ce <__mcmp+0x32>
 80095c6:	bd30      	pop	{r4, r5, pc}
 80095c8:	4294      	cmp	r4, r2
 80095ca:	d3f3      	bcc.n	80095b4 <__mcmp+0x18>
 80095cc:	e7fb      	b.n	80095c6 <__mcmp+0x2a>
 80095ce:	4240      	negs	r0, r0
 80095d0:	e7f9      	b.n	80095c6 <__mcmp+0x2a>
	...

080095d4 <__mdiff>:
 80095d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80095d6:	000e      	movs	r6, r1
 80095d8:	0007      	movs	r7, r0
 80095da:	0011      	movs	r1, r2
 80095dc:	0030      	movs	r0, r6
 80095de:	b087      	sub	sp, #28
 80095e0:	0014      	movs	r4, r2
 80095e2:	f7ff ffdb 	bl	800959c <__mcmp>
 80095e6:	1e05      	subs	r5, r0, #0
 80095e8:	d110      	bne.n	800960c <__mdiff+0x38>
 80095ea:	0001      	movs	r1, r0
 80095ec:	0038      	movs	r0, r7
 80095ee:	f7ff fd05 	bl	8008ffc <_Balloc>
 80095f2:	1e02      	subs	r2, r0, #0
 80095f4:	d104      	bne.n	8009600 <__mdiff+0x2c>
 80095f6:	4b40      	ldr	r3, [pc, #256]	; (80096f8 <__mdiff+0x124>)
 80095f8:	4940      	ldr	r1, [pc, #256]	; (80096fc <__mdiff+0x128>)
 80095fa:	4841      	ldr	r0, [pc, #260]	; (8009700 <__mdiff+0x12c>)
 80095fc:	f000 fc70 	bl	8009ee0 <__assert_func>
 8009600:	2301      	movs	r3, #1
 8009602:	6145      	str	r5, [r0, #20]
 8009604:	6103      	str	r3, [r0, #16]
 8009606:	0010      	movs	r0, r2
 8009608:	b007      	add	sp, #28
 800960a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800960c:	2301      	movs	r3, #1
 800960e:	9301      	str	r3, [sp, #4]
 8009610:	2800      	cmp	r0, #0
 8009612:	db04      	blt.n	800961e <__mdiff+0x4a>
 8009614:	0023      	movs	r3, r4
 8009616:	0034      	movs	r4, r6
 8009618:	001e      	movs	r6, r3
 800961a:	2300      	movs	r3, #0
 800961c:	9301      	str	r3, [sp, #4]
 800961e:	0038      	movs	r0, r7
 8009620:	6861      	ldr	r1, [r4, #4]
 8009622:	f7ff fceb 	bl	8008ffc <_Balloc>
 8009626:	1e02      	subs	r2, r0, #0
 8009628:	d103      	bne.n	8009632 <__mdiff+0x5e>
 800962a:	2190      	movs	r1, #144	; 0x90
 800962c:	4b32      	ldr	r3, [pc, #200]	; (80096f8 <__mdiff+0x124>)
 800962e:	0089      	lsls	r1, r1, #2
 8009630:	e7e3      	b.n	80095fa <__mdiff+0x26>
 8009632:	9b01      	ldr	r3, [sp, #4]
 8009634:	2700      	movs	r7, #0
 8009636:	60c3      	str	r3, [r0, #12]
 8009638:	6920      	ldr	r0, [r4, #16]
 800963a:	3414      	adds	r4, #20
 800963c:	9401      	str	r4, [sp, #4]
 800963e:	9b01      	ldr	r3, [sp, #4]
 8009640:	0084      	lsls	r4, r0, #2
 8009642:	191b      	adds	r3, r3, r4
 8009644:	0034      	movs	r4, r6
 8009646:	9302      	str	r3, [sp, #8]
 8009648:	6933      	ldr	r3, [r6, #16]
 800964a:	3414      	adds	r4, #20
 800964c:	0099      	lsls	r1, r3, #2
 800964e:	1863      	adds	r3, r4, r1
 8009650:	9303      	str	r3, [sp, #12]
 8009652:	0013      	movs	r3, r2
 8009654:	3314      	adds	r3, #20
 8009656:	469c      	mov	ip, r3
 8009658:	9305      	str	r3, [sp, #20]
 800965a:	9b01      	ldr	r3, [sp, #4]
 800965c:	9304      	str	r3, [sp, #16]
 800965e:	9b04      	ldr	r3, [sp, #16]
 8009660:	cc02      	ldmia	r4!, {r1}
 8009662:	cb20      	ldmia	r3!, {r5}
 8009664:	9304      	str	r3, [sp, #16]
 8009666:	b2ab      	uxth	r3, r5
 8009668:	19df      	adds	r7, r3, r7
 800966a:	b28b      	uxth	r3, r1
 800966c:	1afb      	subs	r3, r7, r3
 800966e:	0c09      	lsrs	r1, r1, #16
 8009670:	0c2d      	lsrs	r5, r5, #16
 8009672:	1a6d      	subs	r5, r5, r1
 8009674:	1419      	asrs	r1, r3, #16
 8009676:	186d      	adds	r5, r5, r1
 8009678:	4661      	mov	r1, ip
 800967a:	142f      	asrs	r7, r5, #16
 800967c:	b29b      	uxth	r3, r3
 800967e:	042d      	lsls	r5, r5, #16
 8009680:	432b      	orrs	r3, r5
 8009682:	c108      	stmia	r1!, {r3}
 8009684:	9b03      	ldr	r3, [sp, #12]
 8009686:	468c      	mov	ip, r1
 8009688:	42a3      	cmp	r3, r4
 800968a:	d8e8      	bhi.n	800965e <__mdiff+0x8a>
 800968c:	0031      	movs	r1, r6
 800968e:	9c03      	ldr	r4, [sp, #12]
 8009690:	3115      	adds	r1, #21
 8009692:	2304      	movs	r3, #4
 8009694:	428c      	cmp	r4, r1
 8009696:	d304      	bcc.n	80096a2 <__mdiff+0xce>
 8009698:	1ba3      	subs	r3, r4, r6
 800969a:	3b15      	subs	r3, #21
 800969c:	089b      	lsrs	r3, r3, #2
 800969e:	3301      	adds	r3, #1
 80096a0:	009b      	lsls	r3, r3, #2
 80096a2:	9901      	ldr	r1, [sp, #4]
 80096a4:	18cc      	adds	r4, r1, r3
 80096a6:	9905      	ldr	r1, [sp, #20]
 80096a8:	0026      	movs	r6, r4
 80096aa:	18cb      	adds	r3, r1, r3
 80096ac:	469c      	mov	ip, r3
 80096ae:	9902      	ldr	r1, [sp, #8]
 80096b0:	428e      	cmp	r6, r1
 80096b2:	d310      	bcc.n	80096d6 <__mdiff+0x102>
 80096b4:	9e02      	ldr	r6, [sp, #8]
 80096b6:	1ee1      	subs	r1, r4, #3
 80096b8:	2500      	movs	r5, #0
 80096ba:	428e      	cmp	r6, r1
 80096bc:	d304      	bcc.n	80096c8 <__mdiff+0xf4>
 80096be:	0031      	movs	r1, r6
 80096c0:	3103      	adds	r1, #3
 80096c2:	1b0c      	subs	r4, r1, r4
 80096c4:	08a4      	lsrs	r4, r4, #2
 80096c6:	00a5      	lsls	r5, r4, #2
 80096c8:	195b      	adds	r3, r3, r5
 80096ca:	3b04      	subs	r3, #4
 80096cc:	6819      	ldr	r1, [r3, #0]
 80096ce:	2900      	cmp	r1, #0
 80096d0:	d00f      	beq.n	80096f2 <__mdiff+0x11e>
 80096d2:	6110      	str	r0, [r2, #16]
 80096d4:	e797      	b.n	8009606 <__mdiff+0x32>
 80096d6:	ce02      	ldmia	r6!, {r1}
 80096d8:	b28d      	uxth	r5, r1
 80096da:	19ed      	adds	r5, r5, r7
 80096dc:	0c0f      	lsrs	r7, r1, #16
 80096de:	1429      	asrs	r1, r5, #16
 80096e0:	1879      	adds	r1, r7, r1
 80096e2:	140f      	asrs	r7, r1, #16
 80096e4:	b2ad      	uxth	r5, r5
 80096e6:	0409      	lsls	r1, r1, #16
 80096e8:	430d      	orrs	r5, r1
 80096ea:	4661      	mov	r1, ip
 80096ec:	c120      	stmia	r1!, {r5}
 80096ee:	468c      	mov	ip, r1
 80096f0:	e7dd      	b.n	80096ae <__mdiff+0xda>
 80096f2:	3801      	subs	r0, #1
 80096f4:	e7e9      	b.n	80096ca <__mdiff+0xf6>
 80096f6:	46c0      	nop			; (mov r8, r8)
 80096f8:	0800af18 	.word	0x0800af18
 80096fc:	00000232 	.word	0x00000232
 8009700:	0800afa4 	.word	0x0800afa4

08009704 <__ulp>:
 8009704:	4b0f      	ldr	r3, [pc, #60]	; (8009744 <__ulp+0x40>)
 8009706:	4019      	ands	r1, r3
 8009708:	4b0f      	ldr	r3, [pc, #60]	; (8009748 <__ulp+0x44>)
 800970a:	18c9      	adds	r1, r1, r3
 800970c:	2900      	cmp	r1, #0
 800970e:	dd04      	ble.n	800971a <__ulp+0x16>
 8009710:	2200      	movs	r2, #0
 8009712:	000b      	movs	r3, r1
 8009714:	0010      	movs	r0, r2
 8009716:	0019      	movs	r1, r3
 8009718:	4770      	bx	lr
 800971a:	4249      	negs	r1, r1
 800971c:	2200      	movs	r2, #0
 800971e:	2300      	movs	r3, #0
 8009720:	1509      	asrs	r1, r1, #20
 8009722:	2913      	cmp	r1, #19
 8009724:	dc04      	bgt.n	8009730 <__ulp+0x2c>
 8009726:	2080      	movs	r0, #128	; 0x80
 8009728:	0300      	lsls	r0, r0, #12
 800972a:	4108      	asrs	r0, r1
 800972c:	0003      	movs	r3, r0
 800972e:	e7f1      	b.n	8009714 <__ulp+0x10>
 8009730:	3914      	subs	r1, #20
 8009732:	2001      	movs	r0, #1
 8009734:	291e      	cmp	r1, #30
 8009736:	dc02      	bgt.n	800973e <__ulp+0x3a>
 8009738:	2080      	movs	r0, #128	; 0x80
 800973a:	0600      	lsls	r0, r0, #24
 800973c:	40c8      	lsrs	r0, r1
 800973e:	0002      	movs	r2, r0
 8009740:	e7e8      	b.n	8009714 <__ulp+0x10>
 8009742:	46c0      	nop			; (mov r8, r8)
 8009744:	7ff00000 	.word	0x7ff00000
 8009748:	fcc00000 	.word	0xfcc00000

0800974c <__b2d>:
 800974c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800974e:	0006      	movs	r6, r0
 8009750:	6903      	ldr	r3, [r0, #16]
 8009752:	3614      	adds	r6, #20
 8009754:	009b      	lsls	r3, r3, #2
 8009756:	18f3      	adds	r3, r6, r3
 8009758:	1f1d      	subs	r5, r3, #4
 800975a:	682c      	ldr	r4, [r5, #0]
 800975c:	000f      	movs	r7, r1
 800975e:	0020      	movs	r0, r4
 8009760:	9301      	str	r3, [sp, #4]
 8009762:	f7ff fd43 	bl	80091ec <__hi0bits>
 8009766:	2320      	movs	r3, #32
 8009768:	1a1b      	subs	r3, r3, r0
 800976a:	491f      	ldr	r1, [pc, #124]	; (80097e8 <__b2d+0x9c>)
 800976c:	603b      	str	r3, [r7, #0]
 800976e:	280a      	cmp	r0, #10
 8009770:	dc16      	bgt.n	80097a0 <__b2d+0x54>
 8009772:	230b      	movs	r3, #11
 8009774:	0027      	movs	r7, r4
 8009776:	1a1b      	subs	r3, r3, r0
 8009778:	40df      	lsrs	r7, r3
 800977a:	4339      	orrs	r1, r7
 800977c:	469c      	mov	ip, r3
 800977e:	000b      	movs	r3, r1
 8009780:	2100      	movs	r1, #0
 8009782:	42ae      	cmp	r6, r5
 8009784:	d202      	bcs.n	800978c <__b2d+0x40>
 8009786:	9901      	ldr	r1, [sp, #4]
 8009788:	3908      	subs	r1, #8
 800978a:	6809      	ldr	r1, [r1, #0]
 800978c:	3015      	adds	r0, #21
 800978e:	4084      	lsls	r4, r0
 8009790:	4660      	mov	r0, ip
 8009792:	40c1      	lsrs	r1, r0
 8009794:	430c      	orrs	r4, r1
 8009796:	0022      	movs	r2, r4
 8009798:	0010      	movs	r0, r2
 800979a:	0019      	movs	r1, r3
 800979c:	b003      	add	sp, #12
 800979e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80097a0:	2700      	movs	r7, #0
 80097a2:	42ae      	cmp	r6, r5
 80097a4:	d202      	bcs.n	80097ac <__b2d+0x60>
 80097a6:	9d01      	ldr	r5, [sp, #4]
 80097a8:	3d08      	subs	r5, #8
 80097aa:	682f      	ldr	r7, [r5, #0]
 80097ac:	230b      	movs	r3, #11
 80097ae:	425b      	negs	r3, r3
 80097b0:	469c      	mov	ip, r3
 80097b2:	4484      	add	ip, r0
 80097b4:	280b      	cmp	r0, #11
 80097b6:	d013      	beq.n	80097e0 <__b2d+0x94>
 80097b8:	4663      	mov	r3, ip
 80097ba:	2020      	movs	r0, #32
 80097bc:	409c      	lsls	r4, r3
 80097be:	1ac0      	subs	r0, r0, r3
 80097c0:	003b      	movs	r3, r7
 80097c2:	40c3      	lsrs	r3, r0
 80097c4:	431c      	orrs	r4, r3
 80097c6:	4321      	orrs	r1, r4
 80097c8:	000b      	movs	r3, r1
 80097ca:	2100      	movs	r1, #0
 80097cc:	42b5      	cmp	r5, r6
 80097ce:	d901      	bls.n	80097d4 <__b2d+0x88>
 80097d0:	3d04      	subs	r5, #4
 80097d2:	6829      	ldr	r1, [r5, #0]
 80097d4:	4664      	mov	r4, ip
 80097d6:	40c1      	lsrs	r1, r0
 80097d8:	40a7      	lsls	r7, r4
 80097da:	430f      	orrs	r7, r1
 80097dc:	003a      	movs	r2, r7
 80097de:	e7db      	b.n	8009798 <__b2d+0x4c>
 80097e0:	4321      	orrs	r1, r4
 80097e2:	000b      	movs	r3, r1
 80097e4:	e7fa      	b.n	80097dc <__b2d+0x90>
 80097e6:	46c0      	nop			; (mov r8, r8)
 80097e8:	3ff00000 	.word	0x3ff00000

080097ec <__d2b>:
 80097ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80097ee:	2101      	movs	r1, #1
 80097f0:	0014      	movs	r4, r2
 80097f2:	001e      	movs	r6, r3
 80097f4:	9f08      	ldr	r7, [sp, #32]
 80097f6:	f7ff fc01 	bl	8008ffc <_Balloc>
 80097fa:	1e05      	subs	r5, r0, #0
 80097fc:	d105      	bne.n	800980a <__d2b+0x1e>
 80097fe:	0002      	movs	r2, r0
 8009800:	4b26      	ldr	r3, [pc, #152]	; (800989c <__d2b+0xb0>)
 8009802:	4927      	ldr	r1, [pc, #156]	; (80098a0 <__d2b+0xb4>)
 8009804:	4827      	ldr	r0, [pc, #156]	; (80098a4 <__d2b+0xb8>)
 8009806:	f000 fb6b 	bl	8009ee0 <__assert_func>
 800980a:	0333      	lsls	r3, r6, #12
 800980c:	0076      	lsls	r6, r6, #1
 800980e:	0b1b      	lsrs	r3, r3, #12
 8009810:	0d76      	lsrs	r6, r6, #21
 8009812:	d124      	bne.n	800985e <__d2b+0x72>
 8009814:	9301      	str	r3, [sp, #4]
 8009816:	2c00      	cmp	r4, #0
 8009818:	d027      	beq.n	800986a <__d2b+0x7e>
 800981a:	4668      	mov	r0, sp
 800981c:	9400      	str	r4, [sp, #0]
 800981e:	f7ff fcff 	bl	8009220 <__lo0bits>
 8009822:	9c00      	ldr	r4, [sp, #0]
 8009824:	2800      	cmp	r0, #0
 8009826:	d01e      	beq.n	8009866 <__d2b+0x7a>
 8009828:	9b01      	ldr	r3, [sp, #4]
 800982a:	2120      	movs	r1, #32
 800982c:	001a      	movs	r2, r3
 800982e:	1a09      	subs	r1, r1, r0
 8009830:	408a      	lsls	r2, r1
 8009832:	40c3      	lsrs	r3, r0
 8009834:	4322      	orrs	r2, r4
 8009836:	616a      	str	r2, [r5, #20]
 8009838:	9301      	str	r3, [sp, #4]
 800983a:	9c01      	ldr	r4, [sp, #4]
 800983c:	61ac      	str	r4, [r5, #24]
 800983e:	1e63      	subs	r3, r4, #1
 8009840:	419c      	sbcs	r4, r3
 8009842:	3401      	adds	r4, #1
 8009844:	612c      	str	r4, [r5, #16]
 8009846:	2e00      	cmp	r6, #0
 8009848:	d018      	beq.n	800987c <__d2b+0x90>
 800984a:	4b17      	ldr	r3, [pc, #92]	; (80098a8 <__d2b+0xbc>)
 800984c:	18f6      	adds	r6, r6, r3
 800984e:	2335      	movs	r3, #53	; 0x35
 8009850:	1836      	adds	r6, r6, r0
 8009852:	1a18      	subs	r0, r3, r0
 8009854:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009856:	603e      	str	r6, [r7, #0]
 8009858:	6018      	str	r0, [r3, #0]
 800985a:	0028      	movs	r0, r5
 800985c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800985e:	2280      	movs	r2, #128	; 0x80
 8009860:	0352      	lsls	r2, r2, #13
 8009862:	4313      	orrs	r3, r2
 8009864:	e7d6      	b.n	8009814 <__d2b+0x28>
 8009866:	616c      	str	r4, [r5, #20]
 8009868:	e7e7      	b.n	800983a <__d2b+0x4e>
 800986a:	a801      	add	r0, sp, #4
 800986c:	f7ff fcd8 	bl	8009220 <__lo0bits>
 8009870:	2401      	movs	r4, #1
 8009872:	9b01      	ldr	r3, [sp, #4]
 8009874:	612c      	str	r4, [r5, #16]
 8009876:	616b      	str	r3, [r5, #20]
 8009878:	3020      	adds	r0, #32
 800987a:	e7e4      	b.n	8009846 <__d2b+0x5a>
 800987c:	4b0b      	ldr	r3, [pc, #44]	; (80098ac <__d2b+0xc0>)
 800987e:	18c0      	adds	r0, r0, r3
 8009880:	4b0b      	ldr	r3, [pc, #44]	; (80098b0 <__d2b+0xc4>)
 8009882:	6038      	str	r0, [r7, #0]
 8009884:	18e3      	adds	r3, r4, r3
 8009886:	009b      	lsls	r3, r3, #2
 8009888:	18eb      	adds	r3, r5, r3
 800988a:	6958      	ldr	r0, [r3, #20]
 800988c:	f7ff fcae 	bl	80091ec <__hi0bits>
 8009890:	0164      	lsls	r4, r4, #5
 8009892:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009894:	1a24      	subs	r4, r4, r0
 8009896:	601c      	str	r4, [r3, #0]
 8009898:	e7df      	b.n	800985a <__d2b+0x6e>
 800989a:	46c0      	nop			; (mov r8, r8)
 800989c:	0800af18 	.word	0x0800af18
 80098a0:	0000030a 	.word	0x0000030a
 80098a4:	0800afa4 	.word	0x0800afa4
 80098a8:	fffffbcd 	.word	0xfffffbcd
 80098ac:	fffffbce 	.word	0xfffffbce
 80098b0:	3fffffff 	.word	0x3fffffff

080098b4 <__ratio>:
 80098b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80098b6:	b087      	sub	sp, #28
 80098b8:	000f      	movs	r7, r1
 80098ba:	a904      	add	r1, sp, #16
 80098bc:	0006      	movs	r6, r0
 80098be:	f7ff ff45 	bl	800974c <__b2d>
 80098c2:	9000      	str	r0, [sp, #0]
 80098c4:	9101      	str	r1, [sp, #4]
 80098c6:	9c00      	ldr	r4, [sp, #0]
 80098c8:	9d01      	ldr	r5, [sp, #4]
 80098ca:	0038      	movs	r0, r7
 80098cc:	a905      	add	r1, sp, #20
 80098ce:	f7ff ff3d 	bl	800974c <__b2d>
 80098d2:	9002      	str	r0, [sp, #8]
 80098d4:	9103      	str	r1, [sp, #12]
 80098d6:	9a02      	ldr	r2, [sp, #8]
 80098d8:	9b03      	ldr	r3, [sp, #12]
 80098da:	6931      	ldr	r1, [r6, #16]
 80098dc:	6938      	ldr	r0, [r7, #16]
 80098de:	9e05      	ldr	r6, [sp, #20]
 80098e0:	1a08      	subs	r0, r1, r0
 80098e2:	9904      	ldr	r1, [sp, #16]
 80098e4:	0140      	lsls	r0, r0, #5
 80098e6:	1b89      	subs	r1, r1, r6
 80098e8:	1841      	adds	r1, r0, r1
 80098ea:	0508      	lsls	r0, r1, #20
 80098ec:	2900      	cmp	r1, #0
 80098ee:	dd07      	ble.n	8009900 <__ratio+0x4c>
 80098f0:	9901      	ldr	r1, [sp, #4]
 80098f2:	1845      	adds	r5, r0, r1
 80098f4:	0020      	movs	r0, r4
 80098f6:	0029      	movs	r1, r5
 80098f8:	f7f7 fe9a 	bl	8001630 <__aeabi_ddiv>
 80098fc:	b007      	add	sp, #28
 80098fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009900:	9903      	ldr	r1, [sp, #12]
 8009902:	1a0b      	subs	r3, r1, r0
 8009904:	e7f6      	b.n	80098f4 <__ratio+0x40>

08009906 <__copybits>:
 8009906:	b570      	push	{r4, r5, r6, lr}
 8009908:	0014      	movs	r4, r2
 800990a:	0005      	movs	r5, r0
 800990c:	3901      	subs	r1, #1
 800990e:	6913      	ldr	r3, [r2, #16]
 8009910:	1149      	asrs	r1, r1, #5
 8009912:	3101      	adds	r1, #1
 8009914:	0089      	lsls	r1, r1, #2
 8009916:	3414      	adds	r4, #20
 8009918:	009b      	lsls	r3, r3, #2
 800991a:	1841      	adds	r1, r0, r1
 800991c:	18e3      	adds	r3, r4, r3
 800991e:	42a3      	cmp	r3, r4
 8009920:	d80d      	bhi.n	800993e <__copybits+0x38>
 8009922:	0014      	movs	r4, r2
 8009924:	3411      	adds	r4, #17
 8009926:	2500      	movs	r5, #0
 8009928:	429c      	cmp	r4, r3
 800992a:	d803      	bhi.n	8009934 <__copybits+0x2e>
 800992c:	1a9b      	subs	r3, r3, r2
 800992e:	3b11      	subs	r3, #17
 8009930:	089b      	lsrs	r3, r3, #2
 8009932:	009d      	lsls	r5, r3, #2
 8009934:	2300      	movs	r3, #0
 8009936:	1940      	adds	r0, r0, r5
 8009938:	4281      	cmp	r1, r0
 800993a:	d803      	bhi.n	8009944 <__copybits+0x3e>
 800993c:	bd70      	pop	{r4, r5, r6, pc}
 800993e:	cc40      	ldmia	r4!, {r6}
 8009940:	c540      	stmia	r5!, {r6}
 8009942:	e7ec      	b.n	800991e <__copybits+0x18>
 8009944:	c008      	stmia	r0!, {r3}
 8009946:	e7f7      	b.n	8009938 <__copybits+0x32>

08009948 <__any_on>:
 8009948:	0002      	movs	r2, r0
 800994a:	6900      	ldr	r0, [r0, #16]
 800994c:	b510      	push	{r4, lr}
 800994e:	3214      	adds	r2, #20
 8009950:	114b      	asrs	r3, r1, #5
 8009952:	4298      	cmp	r0, r3
 8009954:	db13      	blt.n	800997e <__any_on+0x36>
 8009956:	dd0c      	ble.n	8009972 <__any_on+0x2a>
 8009958:	241f      	movs	r4, #31
 800995a:	0008      	movs	r0, r1
 800995c:	4020      	ands	r0, r4
 800995e:	4221      	tst	r1, r4
 8009960:	d007      	beq.n	8009972 <__any_on+0x2a>
 8009962:	0099      	lsls	r1, r3, #2
 8009964:	588c      	ldr	r4, [r1, r2]
 8009966:	0021      	movs	r1, r4
 8009968:	40c1      	lsrs	r1, r0
 800996a:	4081      	lsls	r1, r0
 800996c:	2001      	movs	r0, #1
 800996e:	428c      	cmp	r4, r1
 8009970:	d104      	bne.n	800997c <__any_on+0x34>
 8009972:	009b      	lsls	r3, r3, #2
 8009974:	18d3      	adds	r3, r2, r3
 8009976:	4293      	cmp	r3, r2
 8009978:	d803      	bhi.n	8009982 <__any_on+0x3a>
 800997a:	2000      	movs	r0, #0
 800997c:	bd10      	pop	{r4, pc}
 800997e:	0003      	movs	r3, r0
 8009980:	e7f7      	b.n	8009972 <__any_on+0x2a>
 8009982:	3b04      	subs	r3, #4
 8009984:	6819      	ldr	r1, [r3, #0]
 8009986:	2900      	cmp	r1, #0
 8009988:	d0f5      	beq.n	8009976 <__any_on+0x2e>
 800998a:	2001      	movs	r0, #1
 800998c:	e7f6      	b.n	800997c <__any_on+0x34>

0800998e <_calloc_r>:
 800998e:	b570      	push	{r4, r5, r6, lr}
 8009990:	0c13      	lsrs	r3, r2, #16
 8009992:	0c0d      	lsrs	r5, r1, #16
 8009994:	d11e      	bne.n	80099d4 <_calloc_r+0x46>
 8009996:	2b00      	cmp	r3, #0
 8009998:	d10c      	bne.n	80099b4 <_calloc_r+0x26>
 800999a:	b289      	uxth	r1, r1
 800999c:	b294      	uxth	r4, r2
 800999e:	434c      	muls	r4, r1
 80099a0:	0021      	movs	r1, r4
 80099a2:	f000 f88d 	bl	8009ac0 <_malloc_r>
 80099a6:	1e05      	subs	r5, r0, #0
 80099a8:	d01b      	beq.n	80099e2 <_calloc_r+0x54>
 80099aa:	0022      	movs	r2, r4
 80099ac:	2100      	movs	r1, #0
 80099ae:	f7fc fb6f 	bl	8006090 <memset>
 80099b2:	e016      	b.n	80099e2 <_calloc_r+0x54>
 80099b4:	1c1d      	adds	r5, r3, #0
 80099b6:	1c0b      	adds	r3, r1, #0
 80099b8:	b292      	uxth	r2, r2
 80099ba:	b289      	uxth	r1, r1
 80099bc:	b29c      	uxth	r4, r3
 80099be:	4351      	muls	r1, r2
 80099c0:	b2ab      	uxth	r3, r5
 80099c2:	4363      	muls	r3, r4
 80099c4:	0c0c      	lsrs	r4, r1, #16
 80099c6:	191c      	adds	r4, r3, r4
 80099c8:	0c22      	lsrs	r2, r4, #16
 80099ca:	d107      	bne.n	80099dc <_calloc_r+0x4e>
 80099cc:	0424      	lsls	r4, r4, #16
 80099ce:	b289      	uxth	r1, r1
 80099d0:	430c      	orrs	r4, r1
 80099d2:	e7e5      	b.n	80099a0 <_calloc_r+0x12>
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d101      	bne.n	80099dc <_calloc_r+0x4e>
 80099d8:	1c13      	adds	r3, r2, #0
 80099da:	e7ed      	b.n	80099b8 <_calloc_r+0x2a>
 80099dc:	230c      	movs	r3, #12
 80099de:	2500      	movs	r5, #0
 80099e0:	6003      	str	r3, [r0, #0]
 80099e2:	0028      	movs	r0, r5
 80099e4:	bd70      	pop	{r4, r5, r6, pc}
	...

080099e8 <_free_r>:
 80099e8:	b570      	push	{r4, r5, r6, lr}
 80099ea:	0005      	movs	r5, r0
 80099ec:	2900      	cmp	r1, #0
 80099ee:	d010      	beq.n	8009a12 <_free_r+0x2a>
 80099f0:	1f0c      	subs	r4, r1, #4
 80099f2:	6823      	ldr	r3, [r4, #0]
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	da00      	bge.n	80099fa <_free_r+0x12>
 80099f8:	18e4      	adds	r4, r4, r3
 80099fa:	0028      	movs	r0, r5
 80099fc:	f000 fab2 	bl	8009f64 <__malloc_lock>
 8009a00:	4a1d      	ldr	r2, [pc, #116]	; (8009a78 <_free_r+0x90>)
 8009a02:	6813      	ldr	r3, [r2, #0]
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d105      	bne.n	8009a14 <_free_r+0x2c>
 8009a08:	6063      	str	r3, [r4, #4]
 8009a0a:	6014      	str	r4, [r2, #0]
 8009a0c:	0028      	movs	r0, r5
 8009a0e:	f000 fab1 	bl	8009f74 <__malloc_unlock>
 8009a12:	bd70      	pop	{r4, r5, r6, pc}
 8009a14:	42a3      	cmp	r3, r4
 8009a16:	d908      	bls.n	8009a2a <_free_r+0x42>
 8009a18:	6821      	ldr	r1, [r4, #0]
 8009a1a:	1860      	adds	r0, r4, r1
 8009a1c:	4283      	cmp	r3, r0
 8009a1e:	d1f3      	bne.n	8009a08 <_free_r+0x20>
 8009a20:	6818      	ldr	r0, [r3, #0]
 8009a22:	685b      	ldr	r3, [r3, #4]
 8009a24:	1841      	adds	r1, r0, r1
 8009a26:	6021      	str	r1, [r4, #0]
 8009a28:	e7ee      	b.n	8009a08 <_free_r+0x20>
 8009a2a:	001a      	movs	r2, r3
 8009a2c:	685b      	ldr	r3, [r3, #4]
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d001      	beq.n	8009a36 <_free_r+0x4e>
 8009a32:	42a3      	cmp	r3, r4
 8009a34:	d9f9      	bls.n	8009a2a <_free_r+0x42>
 8009a36:	6811      	ldr	r1, [r2, #0]
 8009a38:	1850      	adds	r0, r2, r1
 8009a3a:	42a0      	cmp	r0, r4
 8009a3c:	d10b      	bne.n	8009a56 <_free_r+0x6e>
 8009a3e:	6820      	ldr	r0, [r4, #0]
 8009a40:	1809      	adds	r1, r1, r0
 8009a42:	1850      	adds	r0, r2, r1
 8009a44:	6011      	str	r1, [r2, #0]
 8009a46:	4283      	cmp	r3, r0
 8009a48:	d1e0      	bne.n	8009a0c <_free_r+0x24>
 8009a4a:	6818      	ldr	r0, [r3, #0]
 8009a4c:	685b      	ldr	r3, [r3, #4]
 8009a4e:	1841      	adds	r1, r0, r1
 8009a50:	6011      	str	r1, [r2, #0]
 8009a52:	6053      	str	r3, [r2, #4]
 8009a54:	e7da      	b.n	8009a0c <_free_r+0x24>
 8009a56:	42a0      	cmp	r0, r4
 8009a58:	d902      	bls.n	8009a60 <_free_r+0x78>
 8009a5a:	230c      	movs	r3, #12
 8009a5c:	602b      	str	r3, [r5, #0]
 8009a5e:	e7d5      	b.n	8009a0c <_free_r+0x24>
 8009a60:	6821      	ldr	r1, [r4, #0]
 8009a62:	1860      	adds	r0, r4, r1
 8009a64:	4283      	cmp	r3, r0
 8009a66:	d103      	bne.n	8009a70 <_free_r+0x88>
 8009a68:	6818      	ldr	r0, [r3, #0]
 8009a6a:	685b      	ldr	r3, [r3, #4]
 8009a6c:	1841      	adds	r1, r0, r1
 8009a6e:	6021      	str	r1, [r4, #0]
 8009a70:	6063      	str	r3, [r4, #4]
 8009a72:	6054      	str	r4, [r2, #4]
 8009a74:	e7ca      	b.n	8009a0c <_free_r+0x24>
 8009a76:	46c0      	nop			; (mov r8, r8)
 8009a78:	20000348 	.word	0x20000348

08009a7c <sbrk_aligned>:
 8009a7c:	b570      	push	{r4, r5, r6, lr}
 8009a7e:	4e0f      	ldr	r6, [pc, #60]	; (8009abc <sbrk_aligned+0x40>)
 8009a80:	000d      	movs	r5, r1
 8009a82:	6831      	ldr	r1, [r6, #0]
 8009a84:	0004      	movs	r4, r0
 8009a86:	2900      	cmp	r1, #0
 8009a88:	d102      	bne.n	8009a90 <sbrk_aligned+0x14>
 8009a8a:	f000 f9f7 	bl	8009e7c <_sbrk_r>
 8009a8e:	6030      	str	r0, [r6, #0]
 8009a90:	0029      	movs	r1, r5
 8009a92:	0020      	movs	r0, r4
 8009a94:	f000 f9f2 	bl	8009e7c <_sbrk_r>
 8009a98:	1c43      	adds	r3, r0, #1
 8009a9a:	d00a      	beq.n	8009ab2 <sbrk_aligned+0x36>
 8009a9c:	2303      	movs	r3, #3
 8009a9e:	1cc5      	adds	r5, r0, #3
 8009aa0:	439d      	bics	r5, r3
 8009aa2:	42a8      	cmp	r0, r5
 8009aa4:	d007      	beq.n	8009ab6 <sbrk_aligned+0x3a>
 8009aa6:	1a29      	subs	r1, r5, r0
 8009aa8:	0020      	movs	r0, r4
 8009aaa:	f000 f9e7 	bl	8009e7c <_sbrk_r>
 8009aae:	1c43      	adds	r3, r0, #1
 8009ab0:	d101      	bne.n	8009ab6 <sbrk_aligned+0x3a>
 8009ab2:	2501      	movs	r5, #1
 8009ab4:	426d      	negs	r5, r5
 8009ab6:	0028      	movs	r0, r5
 8009ab8:	bd70      	pop	{r4, r5, r6, pc}
 8009aba:	46c0      	nop			; (mov r8, r8)
 8009abc:	2000034c 	.word	0x2000034c

08009ac0 <_malloc_r>:
 8009ac0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009ac2:	2203      	movs	r2, #3
 8009ac4:	1ccb      	adds	r3, r1, #3
 8009ac6:	4393      	bics	r3, r2
 8009ac8:	3308      	adds	r3, #8
 8009aca:	0006      	movs	r6, r0
 8009acc:	001f      	movs	r7, r3
 8009ace:	2b0c      	cmp	r3, #12
 8009ad0:	d232      	bcs.n	8009b38 <_malloc_r+0x78>
 8009ad2:	270c      	movs	r7, #12
 8009ad4:	42b9      	cmp	r1, r7
 8009ad6:	d831      	bhi.n	8009b3c <_malloc_r+0x7c>
 8009ad8:	0030      	movs	r0, r6
 8009ada:	f000 fa43 	bl	8009f64 <__malloc_lock>
 8009ade:	4d32      	ldr	r5, [pc, #200]	; (8009ba8 <_malloc_r+0xe8>)
 8009ae0:	682b      	ldr	r3, [r5, #0]
 8009ae2:	001c      	movs	r4, r3
 8009ae4:	2c00      	cmp	r4, #0
 8009ae6:	d12e      	bne.n	8009b46 <_malloc_r+0x86>
 8009ae8:	0039      	movs	r1, r7
 8009aea:	0030      	movs	r0, r6
 8009aec:	f7ff ffc6 	bl	8009a7c <sbrk_aligned>
 8009af0:	0004      	movs	r4, r0
 8009af2:	1c43      	adds	r3, r0, #1
 8009af4:	d11e      	bne.n	8009b34 <_malloc_r+0x74>
 8009af6:	682c      	ldr	r4, [r5, #0]
 8009af8:	0025      	movs	r5, r4
 8009afa:	2d00      	cmp	r5, #0
 8009afc:	d14a      	bne.n	8009b94 <_malloc_r+0xd4>
 8009afe:	6823      	ldr	r3, [r4, #0]
 8009b00:	0029      	movs	r1, r5
 8009b02:	18e3      	adds	r3, r4, r3
 8009b04:	0030      	movs	r0, r6
 8009b06:	9301      	str	r3, [sp, #4]
 8009b08:	f000 f9b8 	bl	8009e7c <_sbrk_r>
 8009b0c:	9b01      	ldr	r3, [sp, #4]
 8009b0e:	4283      	cmp	r3, r0
 8009b10:	d143      	bne.n	8009b9a <_malloc_r+0xda>
 8009b12:	6823      	ldr	r3, [r4, #0]
 8009b14:	3703      	adds	r7, #3
 8009b16:	1aff      	subs	r7, r7, r3
 8009b18:	2303      	movs	r3, #3
 8009b1a:	439f      	bics	r7, r3
 8009b1c:	3708      	adds	r7, #8
 8009b1e:	2f0c      	cmp	r7, #12
 8009b20:	d200      	bcs.n	8009b24 <_malloc_r+0x64>
 8009b22:	270c      	movs	r7, #12
 8009b24:	0039      	movs	r1, r7
 8009b26:	0030      	movs	r0, r6
 8009b28:	f7ff ffa8 	bl	8009a7c <sbrk_aligned>
 8009b2c:	1c43      	adds	r3, r0, #1
 8009b2e:	d034      	beq.n	8009b9a <_malloc_r+0xda>
 8009b30:	6823      	ldr	r3, [r4, #0]
 8009b32:	19df      	adds	r7, r3, r7
 8009b34:	6027      	str	r7, [r4, #0]
 8009b36:	e013      	b.n	8009b60 <_malloc_r+0xa0>
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	dacb      	bge.n	8009ad4 <_malloc_r+0x14>
 8009b3c:	230c      	movs	r3, #12
 8009b3e:	2500      	movs	r5, #0
 8009b40:	6033      	str	r3, [r6, #0]
 8009b42:	0028      	movs	r0, r5
 8009b44:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009b46:	6822      	ldr	r2, [r4, #0]
 8009b48:	1bd1      	subs	r1, r2, r7
 8009b4a:	d420      	bmi.n	8009b8e <_malloc_r+0xce>
 8009b4c:	290b      	cmp	r1, #11
 8009b4e:	d917      	bls.n	8009b80 <_malloc_r+0xc0>
 8009b50:	19e2      	adds	r2, r4, r7
 8009b52:	6027      	str	r7, [r4, #0]
 8009b54:	42a3      	cmp	r3, r4
 8009b56:	d111      	bne.n	8009b7c <_malloc_r+0xbc>
 8009b58:	602a      	str	r2, [r5, #0]
 8009b5a:	6863      	ldr	r3, [r4, #4]
 8009b5c:	6011      	str	r1, [r2, #0]
 8009b5e:	6053      	str	r3, [r2, #4]
 8009b60:	0030      	movs	r0, r6
 8009b62:	0025      	movs	r5, r4
 8009b64:	f000 fa06 	bl	8009f74 <__malloc_unlock>
 8009b68:	2207      	movs	r2, #7
 8009b6a:	350b      	adds	r5, #11
 8009b6c:	1d23      	adds	r3, r4, #4
 8009b6e:	4395      	bics	r5, r2
 8009b70:	1aea      	subs	r2, r5, r3
 8009b72:	429d      	cmp	r5, r3
 8009b74:	d0e5      	beq.n	8009b42 <_malloc_r+0x82>
 8009b76:	1b5b      	subs	r3, r3, r5
 8009b78:	50a3      	str	r3, [r4, r2]
 8009b7a:	e7e2      	b.n	8009b42 <_malloc_r+0x82>
 8009b7c:	605a      	str	r2, [r3, #4]
 8009b7e:	e7ec      	b.n	8009b5a <_malloc_r+0x9a>
 8009b80:	6862      	ldr	r2, [r4, #4]
 8009b82:	42a3      	cmp	r3, r4
 8009b84:	d101      	bne.n	8009b8a <_malloc_r+0xca>
 8009b86:	602a      	str	r2, [r5, #0]
 8009b88:	e7ea      	b.n	8009b60 <_malloc_r+0xa0>
 8009b8a:	605a      	str	r2, [r3, #4]
 8009b8c:	e7e8      	b.n	8009b60 <_malloc_r+0xa0>
 8009b8e:	0023      	movs	r3, r4
 8009b90:	6864      	ldr	r4, [r4, #4]
 8009b92:	e7a7      	b.n	8009ae4 <_malloc_r+0x24>
 8009b94:	002c      	movs	r4, r5
 8009b96:	686d      	ldr	r5, [r5, #4]
 8009b98:	e7af      	b.n	8009afa <_malloc_r+0x3a>
 8009b9a:	230c      	movs	r3, #12
 8009b9c:	0030      	movs	r0, r6
 8009b9e:	6033      	str	r3, [r6, #0]
 8009ba0:	f000 f9e8 	bl	8009f74 <__malloc_unlock>
 8009ba4:	e7cd      	b.n	8009b42 <_malloc_r+0x82>
 8009ba6:	46c0      	nop			; (mov r8, r8)
 8009ba8:	20000348 	.word	0x20000348

08009bac <__ssputs_r>:
 8009bac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009bae:	688e      	ldr	r6, [r1, #8]
 8009bb0:	b085      	sub	sp, #20
 8009bb2:	0007      	movs	r7, r0
 8009bb4:	000c      	movs	r4, r1
 8009bb6:	9203      	str	r2, [sp, #12]
 8009bb8:	9301      	str	r3, [sp, #4]
 8009bba:	429e      	cmp	r6, r3
 8009bbc:	d83c      	bhi.n	8009c38 <__ssputs_r+0x8c>
 8009bbe:	2390      	movs	r3, #144	; 0x90
 8009bc0:	898a      	ldrh	r2, [r1, #12]
 8009bc2:	00db      	lsls	r3, r3, #3
 8009bc4:	421a      	tst	r2, r3
 8009bc6:	d034      	beq.n	8009c32 <__ssputs_r+0x86>
 8009bc8:	6909      	ldr	r1, [r1, #16]
 8009bca:	6823      	ldr	r3, [r4, #0]
 8009bcc:	6960      	ldr	r0, [r4, #20]
 8009bce:	1a5b      	subs	r3, r3, r1
 8009bd0:	9302      	str	r3, [sp, #8]
 8009bd2:	2303      	movs	r3, #3
 8009bd4:	4343      	muls	r3, r0
 8009bd6:	0fdd      	lsrs	r5, r3, #31
 8009bd8:	18ed      	adds	r5, r5, r3
 8009bda:	9b01      	ldr	r3, [sp, #4]
 8009bdc:	9802      	ldr	r0, [sp, #8]
 8009bde:	3301      	adds	r3, #1
 8009be0:	181b      	adds	r3, r3, r0
 8009be2:	106d      	asrs	r5, r5, #1
 8009be4:	42ab      	cmp	r3, r5
 8009be6:	d900      	bls.n	8009bea <__ssputs_r+0x3e>
 8009be8:	001d      	movs	r5, r3
 8009bea:	0553      	lsls	r3, r2, #21
 8009bec:	d532      	bpl.n	8009c54 <__ssputs_r+0xa8>
 8009bee:	0029      	movs	r1, r5
 8009bf0:	0038      	movs	r0, r7
 8009bf2:	f7ff ff65 	bl	8009ac0 <_malloc_r>
 8009bf6:	1e06      	subs	r6, r0, #0
 8009bf8:	d109      	bne.n	8009c0e <__ssputs_r+0x62>
 8009bfa:	230c      	movs	r3, #12
 8009bfc:	603b      	str	r3, [r7, #0]
 8009bfe:	2340      	movs	r3, #64	; 0x40
 8009c00:	2001      	movs	r0, #1
 8009c02:	89a2      	ldrh	r2, [r4, #12]
 8009c04:	4240      	negs	r0, r0
 8009c06:	4313      	orrs	r3, r2
 8009c08:	81a3      	strh	r3, [r4, #12]
 8009c0a:	b005      	add	sp, #20
 8009c0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009c0e:	9a02      	ldr	r2, [sp, #8]
 8009c10:	6921      	ldr	r1, [r4, #16]
 8009c12:	f7ff f9ea 	bl	8008fea <memcpy>
 8009c16:	89a3      	ldrh	r3, [r4, #12]
 8009c18:	4a14      	ldr	r2, [pc, #80]	; (8009c6c <__ssputs_r+0xc0>)
 8009c1a:	401a      	ands	r2, r3
 8009c1c:	2380      	movs	r3, #128	; 0x80
 8009c1e:	4313      	orrs	r3, r2
 8009c20:	81a3      	strh	r3, [r4, #12]
 8009c22:	9b02      	ldr	r3, [sp, #8]
 8009c24:	6126      	str	r6, [r4, #16]
 8009c26:	18f6      	adds	r6, r6, r3
 8009c28:	6026      	str	r6, [r4, #0]
 8009c2a:	6165      	str	r5, [r4, #20]
 8009c2c:	9e01      	ldr	r6, [sp, #4]
 8009c2e:	1aed      	subs	r5, r5, r3
 8009c30:	60a5      	str	r5, [r4, #8]
 8009c32:	9b01      	ldr	r3, [sp, #4]
 8009c34:	429e      	cmp	r6, r3
 8009c36:	d900      	bls.n	8009c3a <__ssputs_r+0x8e>
 8009c38:	9e01      	ldr	r6, [sp, #4]
 8009c3a:	0032      	movs	r2, r6
 8009c3c:	9903      	ldr	r1, [sp, #12]
 8009c3e:	6820      	ldr	r0, [r4, #0]
 8009c40:	f000 f97c 	bl	8009f3c <memmove>
 8009c44:	68a3      	ldr	r3, [r4, #8]
 8009c46:	2000      	movs	r0, #0
 8009c48:	1b9b      	subs	r3, r3, r6
 8009c4a:	60a3      	str	r3, [r4, #8]
 8009c4c:	6823      	ldr	r3, [r4, #0]
 8009c4e:	199e      	adds	r6, r3, r6
 8009c50:	6026      	str	r6, [r4, #0]
 8009c52:	e7da      	b.n	8009c0a <__ssputs_r+0x5e>
 8009c54:	002a      	movs	r2, r5
 8009c56:	0038      	movs	r0, r7
 8009c58:	f000 f994 	bl	8009f84 <_realloc_r>
 8009c5c:	1e06      	subs	r6, r0, #0
 8009c5e:	d1e0      	bne.n	8009c22 <__ssputs_r+0x76>
 8009c60:	0038      	movs	r0, r7
 8009c62:	6921      	ldr	r1, [r4, #16]
 8009c64:	f7ff fec0 	bl	80099e8 <_free_r>
 8009c68:	e7c7      	b.n	8009bfa <__ssputs_r+0x4e>
 8009c6a:	46c0      	nop			; (mov r8, r8)
 8009c6c:	fffffb7f 	.word	0xfffffb7f

08009c70 <_svfiprintf_r>:
 8009c70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009c72:	b0a1      	sub	sp, #132	; 0x84
 8009c74:	9003      	str	r0, [sp, #12]
 8009c76:	001d      	movs	r5, r3
 8009c78:	898b      	ldrh	r3, [r1, #12]
 8009c7a:	000f      	movs	r7, r1
 8009c7c:	0016      	movs	r6, r2
 8009c7e:	061b      	lsls	r3, r3, #24
 8009c80:	d511      	bpl.n	8009ca6 <_svfiprintf_r+0x36>
 8009c82:	690b      	ldr	r3, [r1, #16]
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d10e      	bne.n	8009ca6 <_svfiprintf_r+0x36>
 8009c88:	2140      	movs	r1, #64	; 0x40
 8009c8a:	f7ff ff19 	bl	8009ac0 <_malloc_r>
 8009c8e:	6038      	str	r0, [r7, #0]
 8009c90:	6138      	str	r0, [r7, #16]
 8009c92:	2800      	cmp	r0, #0
 8009c94:	d105      	bne.n	8009ca2 <_svfiprintf_r+0x32>
 8009c96:	230c      	movs	r3, #12
 8009c98:	9a03      	ldr	r2, [sp, #12]
 8009c9a:	3801      	subs	r0, #1
 8009c9c:	6013      	str	r3, [r2, #0]
 8009c9e:	b021      	add	sp, #132	; 0x84
 8009ca0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009ca2:	2340      	movs	r3, #64	; 0x40
 8009ca4:	617b      	str	r3, [r7, #20]
 8009ca6:	2300      	movs	r3, #0
 8009ca8:	ac08      	add	r4, sp, #32
 8009caa:	6163      	str	r3, [r4, #20]
 8009cac:	3320      	adds	r3, #32
 8009cae:	7663      	strb	r3, [r4, #25]
 8009cb0:	3310      	adds	r3, #16
 8009cb2:	76a3      	strb	r3, [r4, #26]
 8009cb4:	9507      	str	r5, [sp, #28]
 8009cb6:	0035      	movs	r5, r6
 8009cb8:	782b      	ldrb	r3, [r5, #0]
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d001      	beq.n	8009cc2 <_svfiprintf_r+0x52>
 8009cbe:	2b25      	cmp	r3, #37	; 0x25
 8009cc0:	d147      	bne.n	8009d52 <_svfiprintf_r+0xe2>
 8009cc2:	1bab      	subs	r3, r5, r6
 8009cc4:	9305      	str	r3, [sp, #20]
 8009cc6:	42b5      	cmp	r5, r6
 8009cc8:	d00c      	beq.n	8009ce4 <_svfiprintf_r+0x74>
 8009cca:	0032      	movs	r2, r6
 8009ccc:	0039      	movs	r1, r7
 8009cce:	9803      	ldr	r0, [sp, #12]
 8009cd0:	f7ff ff6c 	bl	8009bac <__ssputs_r>
 8009cd4:	1c43      	adds	r3, r0, #1
 8009cd6:	d100      	bne.n	8009cda <_svfiprintf_r+0x6a>
 8009cd8:	e0ae      	b.n	8009e38 <_svfiprintf_r+0x1c8>
 8009cda:	6962      	ldr	r2, [r4, #20]
 8009cdc:	9b05      	ldr	r3, [sp, #20]
 8009cde:	4694      	mov	ip, r2
 8009ce0:	4463      	add	r3, ip
 8009ce2:	6163      	str	r3, [r4, #20]
 8009ce4:	782b      	ldrb	r3, [r5, #0]
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d100      	bne.n	8009cec <_svfiprintf_r+0x7c>
 8009cea:	e0a5      	b.n	8009e38 <_svfiprintf_r+0x1c8>
 8009cec:	2201      	movs	r2, #1
 8009cee:	2300      	movs	r3, #0
 8009cf0:	4252      	negs	r2, r2
 8009cf2:	6062      	str	r2, [r4, #4]
 8009cf4:	a904      	add	r1, sp, #16
 8009cf6:	3254      	adds	r2, #84	; 0x54
 8009cf8:	1852      	adds	r2, r2, r1
 8009cfa:	1c6e      	adds	r6, r5, #1
 8009cfc:	6023      	str	r3, [r4, #0]
 8009cfe:	60e3      	str	r3, [r4, #12]
 8009d00:	60a3      	str	r3, [r4, #8]
 8009d02:	7013      	strb	r3, [r2, #0]
 8009d04:	65a3      	str	r3, [r4, #88]	; 0x58
 8009d06:	2205      	movs	r2, #5
 8009d08:	7831      	ldrb	r1, [r6, #0]
 8009d0a:	4854      	ldr	r0, [pc, #336]	; (8009e5c <_svfiprintf_r+0x1ec>)
 8009d0c:	f7ff f962 	bl	8008fd4 <memchr>
 8009d10:	1c75      	adds	r5, r6, #1
 8009d12:	2800      	cmp	r0, #0
 8009d14:	d11f      	bne.n	8009d56 <_svfiprintf_r+0xe6>
 8009d16:	6822      	ldr	r2, [r4, #0]
 8009d18:	06d3      	lsls	r3, r2, #27
 8009d1a:	d504      	bpl.n	8009d26 <_svfiprintf_r+0xb6>
 8009d1c:	2353      	movs	r3, #83	; 0x53
 8009d1e:	a904      	add	r1, sp, #16
 8009d20:	185b      	adds	r3, r3, r1
 8009d22:	2120      	movs	r1, #32
 8009d24:	7019      	strb	r1, [r3, #0]
 8009d26:	0713      	lsls	r3, r2, #28
 8009d28:	d504      	bpl.n	8009d34 <_svfiprintf_r+0xc4>
 8009d2a:	2353      	movs	r3, #83	; 0x53
 8009d2c:	a904      	add	r1, sp, #16
 8009d2e:	185b      	adds	r3, r3, r1
 8009d30:	212b      	movs	r1, #43	; 0x2b
 8009d32:	7019      	strb	r1, [r3, #0]
 8009d34:	7833      	ldrb	r3, [r6, #0]
 8009d36:	2b2a      	cmp	r3, #42	; 0x2a
 8009d38:	d016      	beq.n	8009d68 <_svfiprintf_r+0xf8>
 8009d3a:	0035      	movs	r5, r6
 8009d3c:	2100      	movs	r1, #0
 8009d3e:	200a      	movs	r0, #10
 8009d40:	68e3      	ldr	r3, [r4, #12]
 8009d42:	782a      	ldrb	r2, [r5, #0]
 8009d44:	1c6e      	adds	r6, r5, #1
 8009d46:	3a30      	subs	r2, #48	; 0x30
 8009d48:	2a09      	cmp	r2, #9
 8009d4a:	d94e      	bls.n	8009dea <_svfiprintf_r+0x17a>
 8009d4c:	2900      	cmp	r1, #0
 8009d4e:	d111      	bne.n	8009d74 <_svfiprintf_r+0x104>
 8009d50:	e017      	b.n	8009d82 <_svfiprintf_r+0x112>
 8009d52:	3501      	adds	r5, #1
 8009d54:	e7b0      	b.n	8009cb8 <_svfiprintf_r+0x48>
 8009d56:	4b41      	ldr	r3, [pc, #260]	; (8009e5c <_svfiprintf_r+0x1ec>)
 8009d58:	6822      	ldr	r2, [r4, #0]
 8009d5a:	1ac0      	subs	r0, r0, r3
 8009d5c:	2301      	movs	r3, #1
 8009d5e:	4083      	lsls	r3, r0
 8009d60:	4313      	orrs	r3, r2
 8009d62:	002e      	movs	r6, r5
 8009d64:	6023      	str	r3, [r4, #0]
 8009d66:	e7ce      	b.n	8009d06 <_svfiprintf_r+0x96>
 8009d68:	9b07      	ldr	r3, [sp, #28]
 8009d6a:	1d19      	adds	r1, r3, #4
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	9107      	str	r1, [sp, #28]
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	db01      	blt.n	8009d78 <_svfiprintf_r+0x108>
 8009d74:	930b      	str	r3, [sp, #44]	; 0x2c
 8009d76:	e004      	b.n	8009d82 <_svfiprintf_r+0x112>
 8009d78:	425b      	negs	r3, r3
 8009d7a:	60e3      	str	r3, [r4, #12]
 8009d7c:	2302      	movs	r3, #2
 8009d7e:	4313      	orrs	r3, r2
 8009d80:	6023      	str	r3, [r4, #0]
 8009d82:	782b      	ldrb	r3, [r5, #0]
 8009d84:	2b2e      	cmp	r3, #46	; 0x2e
 8009d86:	d10a      	bne.n	8009d9e <_svfiprintf_r+0x12e>
 8009d88:	786b      	ldrb	r3, [r5, #1]
 8009d8a:	2b2a      	cmp	r3, #42	; 0x2a
 8009d8c:	d135      	bne.n	8009dfa <_svfiprintf_r+0x18a>
 8009d8e:	9b07      	ldr	r3, [sp, #28]
 8009d90:	3502      	adds	r5, #2
 8009d92:	1d1a      	adds	r2, r3, #4
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	9207      	str	r2, [sp, #28]
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	db2b      	blt.n	8009df4 <_svfiprintf_r+0x184>
 8009d9c:	9309      	str	r3, [sp, #36]	; 0x24
 8009d9e:	4e30      	ldr	r6, [pc, #192]	; (8009e60 <_svfiprintf_r+0x1f0>)
 8009da0:	2203      	movs	r2, #3
 8009da2:	0030      	movs	r0, r6
 8009da4:	7829      	ldrb	r1, [r5, #0]
 8009da6:	f7ff f915 	bl	8008fd4 <memchr>
 8009daa:	2800      	cmp	r0, #0
 8009dac:	d006      	beq.n	8009dbc <_svfiprintf_r+0x14c>
 8009dae:	2340      	movs	r3, #64	; 0x40
 8009db0:	1b80      	subs	r0, r0, r6
 8009db2:	4083      	lsls	r3, r0
 8009db4:	6822      	ldr	r2, [r4, #0]
 8009db6:	3501      	adds	r5, #1
 8009db8:	4313      	orrs	r3, r2
 8009dba:	6023      	str	r3, [r4, #0]
 8009dbc:	7829      	ldrb	r1, [r5, #0]
 8009dbe:	2206      	movs	r2, #6
 8009dc0:	4828      	ldr	r0, [pc, #160]	; (8009e64 <_svfiprintf_r+0x1f4>)
 8009dc2:	1c6e      	adds	r6, r5, #1
 8009dc4:	7621      	strb	r1, [r4, #24]
 8009dc6:	f7ff f905 	bl	8008fd4 <memchr>
 8009dca:	2800      	cmp	r0, #0
 8009dcc:	d03c      	beq.n	8009e48 <_svfiprintf_r+0x1d8>
 8009dce:	4b26      	ldr	r3, [pc, #152]	; (8009e68 <_svfiprintf_r+0x1f8>)
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d125      	bne.n	8009e20 <_svfiprintf_r+0x1b0>
 8009dd4:	2207      	movs	r2, #7
 8009dd6:	9b07      	ldr	r3, [sp, #28]
 8009dd8:	3307      	adds	r3, #7
 8009dda:	4393      	bics	r3, r2
 8009ddc:	3308      	adds	r3, #8
 8009dde:	9307      	str	r3, [sp, #28]
 8009de0:	6963      	ldr	r3, [r4, #20]
 8009de2:	9a04      	ldr	r2, [sp, #16]
 8009de4:	189b      	adds	r3, r3, r2
 8009de6:	6163      	str	r3, [r4, #20]
 8009de8:	e765      	b.n	8009cb6 <_svfiprintf_r+0x46>
 8009dea:	4343      	muls	r3, r0
 8009dec:	0035      	movs	r5, r6
 8009dee:	2101      	movs	r1, #1
 8009df0:	189b      	adds	r3, r3, r2
 8009df2:	e7a6      	b.n	8009d42 <_svfiprintf_r+0xd2>
 8009df4:	2301      	movs	r3, #1
 8009df6:	425b      	negs	r3, r3
 8009df8:	e7d0      	b.n	8009d9c <_svfiprintf_r+0x12c>
 8009dfa:	2300      	movs	r3, #0
 8009dfc:	200a      	movs	r0, #10
 8009dfe:	001a      	movs	r2, r3
 8009e00:	3501      	adds	r5, #1
 8009e02:	6063      	str	r3, [r4, #4]
 8009e04:	7829      	ldrb	r1, [r5, #0]
 8009e06:	1c6e      	adds	r6, r5, #1
 8009e08:	3930      	subs	r1, #48	; 0x30
 8009e0a:	2909      	cmp	r1, #9
 8009e0c:	d903      	bls.n	8009e16 <_svfiprintf_r+0x1a6>
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d0c5      	beq.n	8009d9e <_svfiprintf_r+0x12e>
 8009e12:	9209      	str	r2, [sp, #36]	; 0x24
 8009e14:	e7c3      	b.n	8009d9e <_svfiprintf_r+0x12e>
 8009e16:	4342      	muls	r2, r0
 8009e18:	0035      	movs	r5, r6
 8009e1a:	2301      	movs	r3, #1
 8009e1c:	1852      	adds	r2, r2, r1
 8009e1e:	e7f1      	b.n	8009e04 <_svfiprintf_r+0x194>
 8009e20:	ab07      	add	r3, sp, #28
 8009e22:	9300      	str	r3, [sp, #0]
 8009e24:	003a      	movs	r2, r7
 8009e26:	0021      	movs	r1, r4
 8009e28:	4b10      	ldr	r3, [pc, #64]	; (8009e6c <_svfiprintf_r+0x1fc>)
 8009e2a:	9803      	ldr	r0, [sp, #12]
 8009e2c:	f7fc f9e2 	bl	80061f4 <_printf_float>
 8009e30:	9004      	str	r0, [sp, #16]
 8009e32:	9b04      	ldr	r3, [sp, #16]
 8009e34:	3301      	adds	r3, #1
 8009e36:	d1d3      	bne.n	8009de0 <_svfiprintf_r+0x170>
 8009e38:	89bb      	ldrh	r3, [r7, #12]
 8009e3a:	980d      	ldr	r0, [sp, #52]	; 0x34
 8009e3c:	065b      	lsls	r3, r3, #25
 8009e3e:	d400      	bmi.n	8009e42 <_svfiprintf_r+0x1d2>
 8009e40:	e72d      	b.n	8009c9e <_svfiprintf_r+0x2e>
 8009e42:	2001      	movs	r0, #1
 8009e44:	4240      	negs	r0, r0
 8009e46:	e72a      	b.n	8009c9e <_svfiprintf_r+0x2e>
 8009e48:	ab07      	add	r3, sp, #28
 8009e4a:	9300      	str	r3, [sp, #0]
 8009e4c:	003a      	movs	r2, r7
 8009e4e:	0021      	movs	r1, r4
 8009e50:	4b06      	ldr	r3, [pc, #24]	; (8009e6c <_svfiprintf_r+0x1fc>)
 8009e52:	9803      	ldr	r0, [sp, #12]
 8009e54:	f7fc fc80 	bl	8006758 <_printf_i>
 8009e58:	e7ea      	b.n	8009e30 <_svfiprintf_r+0x1c0>
 8009e5a:	46c0      	nop			; (mov r8, r8)
 8009e5c:	0800b0fc 	.word	0x0800b0fc
 8009e60:	0800b102 	.word	0x0800b102
 8009e64:	0800b106 	.word	0x0800b106
 8009e68:	080061f5 	.word	0x080061f5
 8009e6c:	08009bad 	.word	0x08009bad

08009e70 <nan>:
 8009e70:	2000      	movs	r0, #0
 8009e72:	4901      	ldr	r1, [pc, #4]	; (8009e78 <nan+0x8>)
 8009e74:	4770      	bx	lr
 8009e76:	46c0      	nop			; (mov r8, r8)
 8009e78:	7ff80000 	.word	0x7ff80000

08009e7c <_sbrk_r>:
 8009e7c:	2300      	movs	r3, #0
 8009e7e:	b570      	push	{r4, r5, r6, lr}
 8009e80:	4d06      	ldr	r5, [pc, #24]	; (8009e9c <_sbrk_r+0x20>)
 8009e82:	0004      	movs	r4, r0
 8009e84:	0008      	movs	r0, r1
 8009e86:	602b      	str	r3, [r5, #0]
 8009e88:	f7f9 f99a 	bl	80031c0 <_sbrk>
 8009e8c:	1c43      	adds	r3, r0, #1
 8009e8e:	d103      	bne.n	8009e98 <_sbrk_r+0x1c>
 8009e90:	682b      	ldr	r3, [r5, #0]
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d000      	beq.n	8009e98 <_sbrk_r+0x1c>
 8009e96:	6023      	str	r3, [r4, #0]
 8009e98:	bd70      	pop	{r4, r5, r6, pc}
 8009e9a:	46c0      	nop			; (mov r8, r8)
 8009e9c:	20000350 	.word	0x20000350

08009ea0 <strncmp>:
 8009ea0:	b530      	push	{r4, r5, lr}
 8009ea2:	0005      	movs	r5, r0
 8009ea4:	1e10      	subs	r0, r2, #0
 8009ea6:	d008      	beq.n	8009eba <strncmp+0x1a>
 8009ea8:	2400      	movs	r4, #0
 8009eaa:	3a01      	subs	r2, #1
 8009eac:	5d2b      	ldrb	r3, [r5, r4]
 8009eae:	5d08      	ldrb	r0, [r1, r4]
 8009eb0:	4283      	cmp	r3, r0
 8009eb2:	d101      	bne.n	8009eb8 <strncmp+0x18>
 8009eb4:	4294      	cmp	r4, r2
 8009eb6:	d101      	bne.n	8009ebc <strncmp+0x1c>
 8009eb8:	1a18      	subs	r0, r3, r0
 8009eba:	bd30      	pop	{r4, r5, pc}
 8009ebc:	3401      	adds	r4, #1
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d1f4      	bne.n	8009eac <strncmp+0xc>
 8009ec2:	e7f9      	b.n	8009eb8 <strncmp+0x18>

08009ec4 <__ascii_wctomb>:
 8009ec4:	0003      	movs	r3, r0
 8009ec6:	1e08      	subs	r0, r1, #0
 8009ec8:	d005      	beq.n	8009ed6 <__ascii_wctomb+0x12>
 8009eca:	2aff      	cmp	r2, #255	; 0xff
 8009ecc:	d904      	bls.n	8009ed8 <__ascii_wctomb+0x14>
 8009ece:	228a      	movs	r2, #138	; 0x8a
 8009ed0:	2001      	movs	r0, #1
 8009ed2:	601a      	str	r2, [r3, #0]
 8009ed4:	4240      	negs	r0, r0
 8009ed6:	4770      	bx	lr
 8009ed8:	2001      	movs	r0, #1
 8009eda:	700a      	strb	r2, [r1, #0]
 8009edc:	e7fb      	b.n	8009ed6 <__ascii_wctomb+0x12>
	...

08009ee0 <__assert_func>:
 8009ee0:	b530      	push	{r4, r5, lr}
 8009ee2:	0014      	movs	r4, r2
 8009ee4:	001a      	movs	r2, r3
 8009ee6:	4b09      	ldr	r3, [pc, #36]	; (8009f0c <__assert_func+0x2c>)
 8009ee8:	0005      	movs	r5, r0
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	b085      	sub	sp, #20
 8009eee:	68d8      	ldr	r0, [r3, #12]
 8009ef0:	4b07      	ldr	r3, [pc, #28]	; (8009f10 <__assert_func+0x30>)
 8009ef2:	2c00      	cmp	r4, #0
 8009ef4:	d101      	bne.n	8009efa <__assert_func+0x1a>
 8009ef6:	4b07      	ldr	r3, [pc, #28]	; (8009f14 <__assert_func+0x34>)
 8009ef8:	001c      	movs	r4, r3
 8009efa:	9301      	str	r3, [sp, #4]
 8009efc:	9100      	str	r1, [sp, #0]
 8009efe:	002b      	movs	r3, r5
 8009f00:	4905      	ldr	r1, [pc, #20]	; (8009f18 <__assert_func+0x38>)
 8009f02:	9402      	str	r4, [sp, #8]
 8009f04:	f000 f80a 	bl	8009f1c <fiprintf>
 8009f08:	f000 fa9a 	bl	800a440 <abort>
 8009f0c:	2000000c 	.word	0x2000000c
 8009f10:	0800b10d 	.word	0x0800b10d
 8009f14:	0800b148 	.word	0x0800b148
 8009f18:	0800b11a 	.word	0x0800b11a

08009f1c <fiprintf>:
 8009f1c:	b40e      	push	{r1, r2, r3}
 8009f1e:	b503      	push	{r0, r1, lr}
 8009f20:	0001      	movs	r1, r0
 8009f22:	ab03      	add	r3, sp, #12
 8009f24:	4804      	ldr	r0, [pc, #16]	; (8009f38 <fiprintf+0x1c>)
 8009f26:	cb04      	ldmia	r3!, {r2}
 8009f28:	6800      	ldr	r0, [r0, #0]
 8009f2a:	9301      	str	r3, [sp, #4]
 8009f2c:	f000 f880 	bl	800a030 <_vfiprintf_r>
 8009f30:	b002      	add	sp, #8
 8009f32:	bc08      	pop	{r3}
 8009f34:	b003      	add	sp, #12
 8009f36:	4718      	bx	r3
 8009f38:	2000000c 	.word	0x2000000c

08009f3c <memmove>:
 8009f3c:	b510      	push	{r4, lr}
 8009f3e:	4288      	cmp	r0, r1
 8009f40:	d902      	bls.n	8009f48 <memmove+0xc>
 8009f42:	188b      	adds	r3, r1, r2
 8009f44:	4298      	cmp	r0, r3
 8009f46:	d303      	bcc.n	8009f50 <memmove+0x14>
 8009f48:	2300      	movs	r3, #0
 8009f4a:	e007      	b.n	8009f5c <memmove+0x20>
 8009f4c:	5c8b      	ldrb	r3, [r1, r2]
 8009f4e:	5483      	strb	r3, [r0, r2]
 8009f50:	3a01      	subs	r2, #1
 8009f52:	d2fb      	bcs.n	8009f4c <memmove+0x10>
 8009f54:	bd10      	pop	{r4, pc}
 8009f56:	5ccc      	ldrb	r4, [r1, r3]
 8009f58:	54c4      	strb	r4, [r0, r3]
 8009f5a:	3301      	adds	r3, #1
 8009f5c:	429a      	cmp	r2, r3
 8009f5e:	d1fa      	bne.n	8009f56 <memmove+0x1a>
 8009f60:	e7f8      	b.n	8009f54 <memmove+0x18>
	...

08009f64 <__malloc_lock>:
 8009f64:	b510      	push	{r4, lr}
 8009f66:	4802      	ldr	r0, [pc, #8]	; (8009f70 <__malloc_lock+0xc>)
 8009f68:	f000 fc41 	bl	800a7ee <__retarget_lock_acquire_recursive>
 8009f6c:	bd10      	pop	{r4, pc}
 8009f6e:	46c0      	nop			; (mov r8, r8)
 8009f70:	20000354 	.word	0x20000354

08009f74 <__malloc_unlock>:
 8009f74:	b510      	push	{r4, lr}
 8009f76:	4802      	ldr	r0, [pc, #8]	; (8009f80 <__malloc_unlock+0xc>)
 8009f78:	f000 fc3a 	bl	800a7f0 <__retarget_lock_release_recursive>
 8009f7c:	bd10      	pop	{r4, pc}
 8009f7e:	46c0      	nop			; (mov r8, r8)
 8009f80:	20000354 	.word	0x20000354

08009f84 <_realloc_r>:
 8009f84:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009f86:	0007      	movs	r7, r0
 8009f88:	000e      	movs	r6, r1
 8009f8a:	0014      	movs	r4, r2
 8009f8c:	2900      	cmp	r1, #0
 8009f8e:	d105      	bne.n	8009f9c <_realloc_r+0x18>
 8009f90:	0011      	movs	r1, r2
 8009f92:	f7ff fd95 	bl	8009ac0 <_malloc_r>
 8009f96:	0005      	movs	r5, r0
 8009f98:	0028      	movs	r0, r5
 8009f9a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009f9c:	2a00      	cmp	r2, #0
 8009f9e:	d103      	bne.n	8009fa8 <_realloc_r+0x24>
 8009fa0:	f7ff fd22 	bl	80099e8 <_free_r>
 8009fa4:	0025      	movs	r5, r4
 8009fa6:	e7f7      	b.n	8009f98 <_realloc_r+0x14>
 8009fa8:	f000 fc90 	bl	800a8cc <_malloc_usable_size_r>
 8009fac:	9001      	str	r0, [sp, #4]
 8009fae:	4284      	cmp	r4, r0
 8009fb0:	d803      	bhi.n	8009fba <_realloc_r+0x36>
 8009fb2:	0035      	movs	r5, r6
 8009fb4:	0843      	lsrs	r3, r0, #1
 8009fb6:	42a3      	cmp	r3, r4
 8009fb8:	d3ee      	bcc.n	8009f98 <_realloc_r+0x14>
 8009fba:	0021      	movs	r1, r4
 8009fbc:	0038      	movs	r0, r7
 8009fbe:	f7ff fd7f 	bl	8009ac0 <_malloc_r>
 8009fc2:	1e05      	subs	r5, r0, #0
 8009fc4:	d0e8      	beq.n	8009f98 <_realloc_r+0x14>
 8009fc6:	9b01      	ldr	r3, [sp, #4]
 8009fc8:	0022      	movs	r2, r4
 8009fca:	429c      	cmp	r4, r3
 8009fcc:	d900      	bls.n	8009fd0 <_realloc_r+0x4c>
 8009fce:	001a      	movs	r2, r3
 8009fd0:	0031      	movs	r1, r6
 8009fd2:	0028      	movs	r0, r5
 8009fd4:	f7ff f809 	bl	8008fea <memcpy>
 8009fd8:	0031      	movs	r1, r6
 8009fda:	0038      	movs	r0, r7
 8009fdc:	f7ff fd04 	bl	80099e8 <_free_r>
 8009fe0:	e7da      	b.n	8009f98 <_realloc_r+0x14>

08009fe2 <__sfputc_r>:
 8009fe2:	6893      	ldr	r3, [r2, #8]
 8009fe4:	b510      	push	{r4, lr}
 8009fe6:	3b01      	subs	r3, #1
 8009fe8:	6093      	str	r3, [r2, #8]
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	da04      	bge.n	8009ff8 <__sfputc_r+0x16>
 8009fee:	6994      	ldr	r4, [r2, #24]
 8009ff0:	42a3      	cmp	r3, r4
 8009ff2:	db07      	blt.n	800a004 <__sfputc_r+0x22>
 8009ff4:	290a      	cmp	r1, #10
 8009ff6:	d005      	beq.n	800a004 <__sfputc_r+0x22>
 8009ff8:	6813      	ldr	r3, [r2, #0]
 8009ffa:	1c58      	adds	r0, r3, #1
 8009ffc:	6010      	str	r0, [r2, #0]
 8009ffe:	7019      	strb	r1, [r3, #0]
 800a000:	0008      	movs	r0, r1
 800a002:	bd10      	pop	{r4, pc}
 800a004:	f000 f94e 	bl	800a2a4 <__swbuf_r>
 800a008:	0001      	movs	r1, r0
 800a00a:	e7f9      	b.n	800a000 <__sfputc_r+0x1e>

0800a00c <__sfputs_r>:
 800a00c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a00e:	0006      	movs	r6, r0
 800a010:	000f      	movs	r7, r1
 800a012:	0014      	movs	r4, r2
 800a014:	18d5      	adds	r5, r2, r3
 800a016:	42ac      	cmp	r4, r5
 800a018:	d101      	bne.n	800a01e <__sfputs_r+0x12>
 800a01a:	2000      	movs	r0, #0
 800a01c:	e007      	b.n	800a02e <__sfputs_r+0x22>
 800a01e:	7821      	ldrb	r1, [r4, #0]
 800a020:	003a      	movs	r2, r7
 800a022:	0030      	movs	r0, r6
 800a024:	f7ff ffdd 	bl	8009fe2 <__sfputc_r>
 800a028:	3401      	adds	r4, #1
 800a02a:	1c43      	adds	r3, r0, #1
 800a02c:	d1f3      	bne.n	800a016 <__sfputs_r+0xa>
 800a02e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a030 <_vfiprintf_r>:
 800a030:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a032:	b0a1      	sub	sp, #132	; 0x84
 800a034:	0006      	movs	r6, r0
 800a036:	000c      	movs	r4, r1
 800a038:	001f      	movs	r7, r3
 800a03a:	9203      	str	r2, [sp, #12]
 800a03c:	2800      	cmp	r0, #0
 800a03e:	d004      	beq.n	800a04a <_vfiprintf_r+0x1a>
 800a040:	6983      	ldr	r3, [r0, #24]
 800a042:	2b00      	cmp	r3, #0
 800a044:	d101      	bne.n	800a04a <_vfiprintf_r+0x1a>
 800a046:	f000 fb31 	bl	800a6ac <__sinit>
 800a04a:	4b8e      	ldr	r3, [pc, #568]	; (800a284 <_vfiprintf_r+0x254>)
 800a04c:	429c      	cmp	r4, r3
 800a04e:	d11c      	bne.n	800a08a <_vfiprintf_r+0x5a>
 800a050:	6874      	ldr	r4, [r6, #4]
 800a052:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a054:	07db      	lsls	r3, r3, #31
 800a056:	d405      	bmi.n	800a064 <_vfiprintf_r+0x34>
 800a058:	89a3      	ldrh	r3, [r4, #12]
 800a05a:	059b      	lsls	r3, r3, #22
 800a05c:	d402      	bmi.n	800a064 <_vfiprintf_r+0x34>
 800a05e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a060:	f000 fbc5 	bl	800a7ee <__retarget_lock_acquire_recursive>
 800a064:	89a3      	ldrh	r3, [r4, #12]
 800a066:	071b      	lsls	r3, r3, #28
 800a068:	d502      	bpl.n	800a070 <_vfiprintf_r+0x40>
 800a06a:	6923      	ldr	r3, [r4, #16]
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d11d      	bne.n	800a0ac <_vfiprintf_r+0x7c>
 800a070:	0021      	movs	r1, r4
 800a072:	0030      	movs	r0, r6
 800a074:	f000 f96c 	bl	800a350 <__swsetup_r>
 800a078:	2800      	cmp	r0, #0
 800a07a:	d017      	beq.n	800a0ac <_vfiprintf_r+0x7c>
 800a07c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a07e:	07db      	lsls	r3, r3, #31
 800a080:	d50d      	bpl.n	800a09e <_vfiprintf_r+0x6e>
 800a082:	2001      	movs	r0, #1
 800a084:	4240      	negs	r0, r0
 800a086:	b021      	add	sp, #132	; 0x84
 800a088:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a08a:	4b7f      	ldr	r3, [pc, #508]	; (800a288 <_vfiprintf_r+0x258>)
 800a08c:	429c      	cmp	r4, r3
 800a08e:	d101      	bne.n	800a094 <_vfiprintf_r+0x64>
 800a090:	68b4      	ldr	r4, [r6, #8]
 800a092:	e7de      	b.n	800a052 <_vfiprintf_r+0x22>
 800a094:	4b7d      	ldr	r3, [pc, #500]	; (800a28c <_vfiprintf_r+0x25c>)
 800a096:	429c      	cmp	r4, r3
 800a098:	d1db      	bne.n	800a052 <_vfiprintf_r+0x22>
 800a09a:	68f4      	ldr	r4, [r6, #12]
 800a09c:	e7d9      	b.n	800a052 <_vfiprintf_r+0x22>
 800a09e:	89a3      	ldrh	r3, [r4, #12]
 800a0a0:	059b      	lsls	r3, r3, #22
 800a0a2:	d4ee      	bmi.n	800a082 <_vfiprintf_r+0x52>
 800a0a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a0a6:	f000 fba3 	bl	800a7f0 <__retarget_lock_release_recursive>
 800a0aa:	e7ea      	b.n	800a082 <_vfiprintf_r+0x52>
 800a0ac:	2300      	movs	r3, #0
 800a0ae:	ad08      	add	r5, sp, #32
 800a0b0:	616b      	str	r3, [r5, #20]
 800a0b2:	3320      	adds	r3, #32
 800a0b4:	766b      	strb	r3, [r5, #25]
 800a0b6:	3310      	adds	r3, #16
 800a0b8:	76ab      	strb	r3, [r5, #26]
 800a0ba:	9707      	str	r7, [sp, #28]
 800a0bc:	9f03      	ldr	r7, [sp, #12]
 800a0be:	783b      	ldrb	r3, [r7, #0]
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d001      	beq.n	800a0c8 <_vfiprintf_r+0x98>
 800a0c4:	2b25      	cmp	r3, #37	; 0x25
 800a0c6:	d14e      	bne.n	800a166 <_vfiprintf_r+0x136>
 800a0c8:	9b03      	ldr	r3, [sp, #12]
 800a0ca:	1afb      	subs	r3, r7, r3
 800a0cc:	9305      	str	r3, [sp, #20]
 800a0ce:	9b03      	ldr	r3, [sp, #12]
 800a0d0:	429f      	cmp	r7, r3
 800a0d2:	d00d      	beq.n	800a0f0 <_vfiprintf_r+0xc0>
 800a0d4:	9b05      	ldr	r3, [sp, #20]
 800a0d6:	0021      	movs	r1, r4
 800a0d8:	0030      	movs	r0, r6
 800a0da:	9a03      	ldr	r2, [sp, #12]
 800a0dc:	f7ff ff96 	bl	800a00c <__sfputs_r>
 800a0e0:	1c43      	adds	r3, r0, #1
 800a0e2:	d100      	bne.n	800a0e6 <_vfiprintf_r+0xb6>
 800a0e4:	e0b5      	b.n	800a252 <_vfiprintf_r+0x222>
 800a0e6:	696a      	ldr	r2, [r5, #20]
 800a0e8:	9b05      	ldr	r3, [sp, #20]
 800a0ea:	4694      	mov	ip, r2
 800a0ec:	4463      	add	r3, ip
 800a0ee:	616b      	str	r3, [r5, #20]
 800a0f0:	783b      	ldrb	r3, [r7, #0]
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d100      	bne.n	800a0f8 <_vfiprintf_r+0xc8>
 800a0f6:	e0ac      	b.n	800a252 <_vfiprintf_r+0x222>
 800a0f8:	2201      	movs	r2, #1
 800a0fa:	1c7b      	adds	r3, r7, #1
 800a0fc:	9303      	str	r3, [sp, #12]
 800a0fe:	2300      	movs	r3, #0
 800a100:	4252      	negs	r2, r2
 800a102:	606a      	str	r2, [r5, #4]
 800a104:	a904      	add	r1, sp, #16
 800a106:	3254      	adds	r2, #84	; 0x54
 800a108:	1852      	adds	r2, r2, r1
 800a10a:	602b      	str	r3, [r5, #0]
 800a10c:	60eb      	str	r3, [r5, #12]
 800a10e:	60ab      	str	r3, [r5, #8]
 800a110:	7013      	strb	r3, [r2, #0]
 800a112:	65ab      	str	r3, [r5, #88]	; 0x58
 800a114:	9b03      	ldr	r3, [sp, #12]
 800a116:	2205      	movs	r2, #5
 800a118:	7819      	ldrb	r1, [r3, #0]
 800a11a:	485d      	ldr	r0, [pc, #372]	; (800a290 <_vfiprintf_r+0x260>)
 800a11c:	f7fe ff5a 	bl	8008fd4 <memchr>
 800a120:	9b03      	ldr	r3, [sp, #12]
 800a122:	1c5f      	adds	r7, r3, #1
 800a124:	2800      	cmp	r0, #0
 800a126:	d120      	bne.n	800a16a <_vfiprintf_r+0x13a>
 800a128:	682a      	ldr	r2, [r5, #0]
 800a12a:	06d3      	lsls	r3, r2, #27
 800a12c:	d504      	bpl.n	800a138 <_vfiprintf_r+0x108>
 800a12e:	2353      	movs	r3, #83	; 0x53
 800a130:	a904      	add	r1, sp, #16
 800a132:	185b      	adds	r3, r3, r1
 800a134:	2120      	movs	r1, #32
 800a136:	7019      	strb	r1, [r3, #0]
 800a138:	0713      	lsls	r3, r2, #28
 800a13a:	d504      	bpl.n	800a146 <_vfiprintf_r+0x116>
 800a13c:	2353      	movs	r3, #83	; 0x53
 800a13e:	a904      	add	r1, sp, #16
 800a140:	185b      	adds	r3, r3, r1
 800a142:	212b      	movs	r1, #43	; 0x2b
 800a144:	7019      	strb	r1, [r3, #0]
 800a146:	9b03      	ldr	r3, [sp, #12]
 800a148:	781b      	ldrb	r3, [r3, #0]
 800a14a:	2b2a      	cmp	r3, #42	; 0x2a
 800a14c:	d016      	beq.n	800a17c <_vfiprintf_r+0x14c>
 800a14e:	2100      	movs	r1, #0
 800a150:	68eb      	ldr	r3, [r5, #12]
 800a152:	9f03      	ldr	r7, [sp, #12]
 800a154:	783a      	ldrb	r2, [r7, #0]
 800a156:	1c78      	adds	r0, r7, #1
 800a158:	3a30      	subs	r2, #48	; 0x30
 800a15a:	4684      	mov	ip, r0
 800a15c:	2a09      	cmp	r2, #9
 800a15e:	d94f      	bls.n	800a200 <_vfiprintf_r+0x1d0>
 800a160:	2900      	cmp	r1, #0
 800a162:	d111      	bne.n	800a188 <_vfiprintf_r+0x158>
 800a164:	e017      	b.n	800a196 <_vfiprintf_r+0x166>
 800a166:	3701      	adds	r7, #1
 800a168:	e7a9      	b.n	800a0be <_vfiprintf_r+0x8e>
 800a16a:	4b49      	ldr	r3, [pc, #292]	; (800a290 <_vfiprintf_r+0x260>)
 800a16c:	682a      	ldr	r2, [r5, #0]
 800a16e:	1ac0      	subs	r0, r0, r3
 800a170:	2301      	movs	r3, #1
 800a172:	4083      	lsls	r3, r0
 800a174:	4313      	orrs	r3, r2
 800a176:	602b      	str	r3, [r5, #0]
 800a178:	9703      	str	r7, [sp, #12]
 800a17a:	e7cb      	b.n	800a114 <_vfiprintf_r+0xe4>
 800a17c:	9b07      	ldr	r3, [sp, #28]
 800a17e:	1d19      	adds	r1, r3, #4
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	9107      	str	r1, [sp, #28]
 800a184:	2b00      	cmp	r3, #0
 800a186:	db01      	blt.n	800a18c <_vfiprintf_r+0x15c>
 800a188:	930b      	str	r3, [sp, #44]	; 0x2c
 800a18a:	e004      	b.n	800a196 <_vfiprintf_r+0x166>
 800a18c:	425b      	negs	r3, r3
 800a18e:	60eb      	str	r3, [r5, #12]
 800a190:	2302      	movs	r3, #2
 800a192:	4313      	orrs	r3, r2
 800a194:	602b      	str	r3, [r5, #0]
 800a196:	783b      	ldrb	r3, [r7, #0]
 800a198:	2b2e      	cmp	r3, #46	; 0x2e
 800a19a:	d10a      	bne.n	800a1b2 <_vfiprintf_r+0x182>
 800a19c:	787b      	ldrb	r3, [r7, #1]
 800a19e:	2b2a      	cmp	r3, #42	; 0x2a
 800a1a0:	d137      	bne.n	800a212 <_vfiprintf_r+0x1e2>
 800a1a2:	9b07      	ldr	r3, [sp, #28]
 800a1a4:	3702      	adds	r7, #2
 800a1a6:	1d1a      	adds	r2, r3, #4
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	9207      	str	r2, [sp, #28]
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	db2d      	blt.n	800a20c <_vfiprintf_r+0x1dc>
 800a1b0:	9309      	str	r3, [sp, #36]	; 0x24
 800a1b2:	2203      	movs	r2, #3
 800a1b4:	7839      	ldrb	r1, [r7, #0]
 800a1b6:	4837      	ldr	r0, [pc, #220]	; (800a294 <_vfiprintf_r+0x264>)
 800a1b8:	f7fe ff0c 	bl	8008fd4 <memchr>
 800a1bc:	2800      	cmp	r0, #0
 800a1be:	d007      	beq.n	800a1d0 <_vfiprintf_r+0x1a0>
 800a1c0:	4b34      	ldr	r3, [pc, #208]	; (800a294 <_vfiprintf_r+0x264>)
 800a1c2:	682a      	ldr	r2, [r5, #0]
 800a1c4:	1ac0      	subs	r0, r0, r3
 800a1c6:	2340      	movs	r3, #64	; 0x40
 800a1c8:	4083      	lsls	r3, r0
 800a1ca:	4313      	orrs	r3, r2
 800a1cc:	3701      	adds	r7, #1
 800a1ce:	602b      	str	r3, [r5, #0]
 800a1d0:	7839      	ldrb	r1, [r7, #0]
 800a1d2:	1c7b      	adds	r3, r7, #1
 800a1d4:	2206      	movs	r2, #6
 800a1d6:	4830      	ldr	r0, [pc, #192]	; (800a298 <_vfiprintf_r+0x268>)
 800a1d8:	9303      	str	r3, [sp, #12]
 800a1da:	7629      	strb	r1, [r5, #24]
 800a1dc:	f7fe fefa 	bl	8008fd4 <memchr>
 800a1e0:	2800      	cmp	r0, #0
 800a1e2:	d045      	beq.n	800a270 <_vfiprintf_r+0x240>
 800a1e4:	4b2d      	ldr	r3, [pc, #180]	; (800a29c <_vfiprintf_r+0x26c>)
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d127      	bne.n	800a23a <_vfiprintf_r+0x20a>
 800a1ea:	2207      	movs	r2, #7
 800a1ec:	9b07      	ldr	r3, [sp, #28]
 800a1ee:	3307      	adds	r3, #7
 800a1f0:	4393      	bics	r3, r2
 800a1f2:	3308      	adds	r3, #8
 800a1f4:	9307      	str	r3, [sp, #28]
 800a1f6:	696b      	ldr	r3, [r5, #20]
 800a1f8:	9a04      	ldr	r2, [sp, #16]
 800a1fa:	189b      	adds	r3, r3, r2
 800a1fc:	616b      	str	r3, [r5, #20]
 800a1fe:	e75d      	b.n	800a0bc <_vfiprintf_r+0x8c>
 800a200:	210a      	movs	r1, #10
 800a202:	434b      	muls	r3, r1
 800a204:	4667      	mov	r7, ip
 800a206:	189b      	adds	r3, r3, r2
 800a208:	3909      	subs	r1, #9
 800a20a:	e7a3      	b.n	800a154 <_vfiprintf_r+0x124>
 800a20c:	2301      	movs	r3, #1
 800a20e:	425b      	negs	r3, r3
 800a210:	e7ce      	b.n	800a1b0 <_vfiprintf_r+0x180>
 800a212:	2300      	movs	r3, #0
 800a214:	001a      	movs	r2, r3
 800a216:	3701      	adds	r7, #1
 800a218:	606b      	str	r3, [r5, #4]
 800a21a:	7839      	ldrb	r1, [r7, #0]
 800a21c:	1c78      	adds	r0, r7, #1
 800a21e:	3930      	subs	r1, #48	; 0x30
 800a220:	4684      	mov	ip, r0
 800a222:	2909      	cmp	r1, #9
 800a224:	d903      	bls.n	800a22e <_vfiprintf_r+0x1fe>
 800a226:	2b00      	cmp	r3, #0
 800a228:	d0c3      	beq.n	800a1b2 <_vfiprintf_r+0x182>
 800a22a:	9209      	str	r2, [sp, #36]	; 0x24
 800a22c:	e7c1      	b.n	800a1b2 <_vfiprintf_r+0x182>
 800a22e:	230a      	movs	r3, #10
 800a230:	435a      	muls	r2, r3
 800a232:	4667      	mov	r7, ip
 800a234:	1852      	adds	r2, r2, r1
 800a236:	3b09      	subs	r3, #9
 800a238:	e7ef      	b.n	800a21a <_vfiprintf_r+0x1ea>
 800a23a:	ab07      	add	r3, sp, #28
 800a23c:	9300      	str	r3, [sp, #0]
 800a23e:	0022      	movs	r2, r4
 800a240:	0029      	movs	r1, r5
 800a242:	0030      	movs	r0, r6
 800a244:	4b16      	ldr	r3, [pc, #88]	; (800a2a0 <_vfiprintf_r+0x270>)
 800a246:	f7fb ffd5 	bl	80061f4 <_printf_float>
 800a24a:	9004      	str	r0, [sp, #16]
 800a24c:	9b04      	ldr	r3, [sp, #16]
 800a24e:	3301      	adds	r3, #1
 800a250:	d1d1      	bne.n	800a1f6 <_vfiprintf_r+0x1c6>
 800a252:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a254:	07db      	lsls	r3, r3, #31
 800a256:	d405      	bmi.n	800a264 <_vfiprintf_r+0x234>
 800a258:	89a3      	ldrh	r3, [r4, #12]
 800a25a:	059b      	lsls	r3, r3, #22
 800a25c:	d402      	bmi.n	800a264 <_vfiprintf_r+0x234>
 800a25e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a260:	f000 fac6 	bl	800a7f0 <__retarget_lock_release_recursive>
 800a264:	89a3      	ldrh	r3, [r4, #12]
 800a266:	065b      	lsls	r3, r3, #25
 800a268:	d500      	bpl.n	800a26c <_vfiprintf_r+0x23c>
 800a26a:	e70a      	b.n	800a082 <_vfiprintf_r+0x52>
 800a26c:	980d      	ldr	r0, [sp, #52]	; 0x34
 800a26e:	e70a      	b.n	800a086 <_vfiprintf_r+0x56>
 800a270:	ab07      	add	r3, sp, #28
 800a272:	9300      	str	r3, [sp, #0]
 800a274:	0022      	movs	r2, r4
 800a276:	0029      	movs	r1, r5
 800a278:	0030      	movs	r0, r6
 800a27a:	4b09      	ldr	r3, [pc, #36]	; (800a2a0 <_vfiprintf_r+0x270>)
 800a27c:	f7fc fa6c 	bl	8006758 <_printf_i>
 800a280:	e7e3      	b.n	800a24a <_vfiprintf_r+0x21a>
 800a282:	46c0      	nop			; (mov r8, r8)
 800a284:	0800b16c 	.word	0x0800b16c
 800a288:	0800b18c 	.word	0x0800b18c
 800a28c:	0800b14c 	.word	0x0800b14c
 800a290:	0800b0fc 	.word	0x0800b0fc
 800a294:	0800b102 	.word	0x0800b102
 800a298:	0800b106 	.word	0x0800b106
 800a29c:	080061f5 	.word	0x080061f5
 800a2a0:	0800a00d 	.word	0x0800a00d

0800a2a4 <__swbuf_r>:
 800a2a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2a6:	0005      	movs	r5, r0
 800a2a8:	000e      	movs	r6, r1
 800a2aa:	0014      	movs	r4, r2
 800a2ac:	2800      	cmp	r0, #0
 800a2ae:	d004      	beq.n	800a2ba <__swbuf_r+0x16>
 800a2b0:	6983      	ldr	r3, [r0, #24]
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d101      	bne.n	800a2ba <__swbuf_r+0x16>
 800a2b6:	f000 f9f9 	bl	800a6ac <__sinit>
 800a2ba:	4b22      	ldr	r3, [pc, #136]	; (800a344 <__swbuf_r+0xa0>)
 800a2bc:	429c      	cmp	r4, r3
 800a2be:	d12e      	bne.n	800a31e <__swbuf_r+0x7a>
 800a2c0:	686c      	ldr	r4, [r5, #4]
 800a2c2:	69a3      	ldr	r3, [r4, #24]
 800a2c4:	60a3      	str	r3, [r4, #8]
 800a2c6:	89a3      	ldrh	r3, [r4, #12]
 800a2c8:	071b      	lsls	r3, r3, #28
 800a2ca:	d532      	bpl.n	800a332 <__swbuf_r+0x8e>
 800a2cc:	6923      	ldr	r3, [r4, #16]
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d02f      	beq.n	800a332 <__swbuf_r+0x8e>
 800a2d2:	6823      	ldr	r3, [r4, #0]
 800a2d4:	6922      	ldr	r2, [r4, #16]
 800a2d6:	b2f7      	uxtb	r7, r6
 800a2d8:	1a98      	subs	r0, r3, r2
 800a2da:	6963      	ldr	r3, [r4, #20]
 800a2dc:	b2f6      	uxtb	r6, r6
 800a2de:	4283      	cmp	r3, r0
 800a2e0:	dc05      	bgt.n	800a2ee <__swbuf_r+0x4a>
 800a2e2:	0021      	movs	r1, r4
 800a2e4:	0028      	movs	r0, r5
 800a2e6:	f000 f93f 	bl	800a568 <_fflush_r>
 800a2ea:	2800      	cmp	r0, #0
 800a2ec:	d127      	bne.n	800a33e <__swbuf_r+0x9a>
 800a2ee:	68a3      	ldr	r3, [r4, #8]
 800a2f0:	3001      	adds	r0, #1
 800a2f2:	3b01      	subs	r3, #1
 800a2f4:	60a3      	str	r3, [r4, #8]
 800a2f6:	6823      	ldr	r3, [r4, #0]
 800a2f8:	1c5a      	adds	r2, r3, #1
 800a2fa:	6022      	str	r2, [r4, #0]
 800a2fc:	701f      	strb	r7, [r3, #0]
 800a2fe:	6963      	ldr	r3, [r4, #20]
 800a300:	4283      	cmp	r3, r0
 800a302:	d004      	beq.n	800a30e <__swbuf_r+0x6a>
 800a304:	89a3      	ldrh	r3, [r4, #12]
 800a306:	07db      	lsls	r3, r3, #31
 800a308:	d507      	bpl.n	800a31a <__swbuf_r+0x76>
 800a30a:	2e0a      	cmp	r6, #10
 800a30c:	d105      	bne.n	800a31a <__swbuf_r+0x76>
 800a30e:	0021      	movs	r1, r4
 800a310:	0028      	movs	r0, r5
 800a312:	f000 f929 	bl	800a568 <_fflush_r>
 800a316:	2800      	cmp	r0, #0
 800a318:	d111      	bne.n	800a33e <__swbuf_r+0x9a>
 800a31a:	0030      	movs	r0, r6
 800a31c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a31e:	4b0a      	ldr	r3, [pc, #40]	; (800a348 <__swbuf_r+0xa4>)
 800a320:	429c      	cmp	r4, r3
 800a322:	d101      	bne.n	800a328 <__swbuf_r+0x84>
 800a324:	68ac      	ldr	r4, [r5, #8]
 800a326:	e7cc      	b.n	800a2c2 <__swbuf_r+0x1e>
 800a328:	4b08      	ldr	r3, [pc, #32]	; (800a34c <__swbuf_r+0xa8>)
 800a32a:	429c      	cmp	r4, r3
 800a32c:	d1c9      	bne.n	800a2c2 <__swbuf_r+0x1e>
 800a32e:	68ec      	ldr	r4, [r5, #12]
 800a330:	e7c7      	b.n	800a2c2 <__swbuf_r+0x1e>
 800a332:	0021      	movs	r1, r4
 800a334:	0028      	movs	r0, r5
 800a336:	f000 f80b 	bl	800a350 <__swsetup_r>
 800a33a:	2800      	cmp	r0, #0
 800a33c:	d0c9      	beq.n	800a2d2 <__swbuf_r+0x2e>
 800a33e:	2601      	movs	r6, #1
 800a340:	4276      	negs	r6, r6
 800a342:	e7ea      	b.n	800a31a <__swbuf_r+0x76>
 800a344:	0800b16c 	.word	0x0800b16c
 800a348:	0800b18c 	.word	0x0800b18c
 800a34c:	0800b14c 	.word	0x0800b14c

0800a350 <__swsetup_r>:
 800a350:	4b37      	ldr	r3, [pc, #220]	; (800a430 <__swsetup_r+0xe0>)
 800a352:	b570      	push	{r4, r5, r6, lr}
 800a354:	681d      	ldr	r5, [r3, #0]
 800a356:	0006      	movs	r6, r0
 800a358:	000c      	movs	r4, r1
 800a35a:	2d00      	cmp	r5, #0
 800a35c:	d005      	beq.n	800a36a <__swsetup_r+0x1a>
 800a35e:	69ab      	ldr	r3, [r5, #24]
 800a360:	2b00      	cmp	r3, #0
 800a362:	d102      	bne.n	800a36a <__swsetup_r+0x1a>
 800a364:	0028      	movs	r0, r5
 800a366:	f000 f9a1 	bl	800a6ac <__sinit>
 800a36a:	4b32      	ldr	r3, [pc, #200]	; (800a434 <__swsetup_r+0xe4>)
 800a36c:	429c      	cmp	r4, r3
 800a36e:	d10f      	bne.n	800a390 <__swsetup_r+0x40>
 800a370:	686c      	ldr	r4, [r5, #4]
 800a372:	230c      	movs	r3, #12
 800a374:	5ee2      	ldrsh	r2, [r4, r3]
 800a376:	b293      	uxth	r3, r2
 800a378:	0711      	lsls	r1, r2, #28
 800a37a:	d42d      	bmi.n	800a3d8 <__swsetup_r+0x88>
 800a37c:	06d9      	lsls	r1, r3, #27
 800a37e:	d411      	bmi.n	800a3a4 <__swsetup_r+0x54>
 800a380:	2309      	movs	r3, #9
 800a382:	2001      	movs	r0, #1
 800a384:	6033      	str	r3, [r6, #0]
 800a386:	3337      	adds	r3, #55	; 0x37
 800a388:	4313      	orrs	r3, r2
 800a38a:	81a3      	strh	r3, [r4, #12]
 800a38c:	4240      	negs	r0, r0
 800a38e:	bd70      	pop	{r4, r5, r6, pc}
 800a390:	4b29      	ldr	r3, [pc, #164]	; (800a438 <__swsetup_r+0xe8>)
 800a392:	429c      	cmp	r4, r3
 800a394:	d101      	bne.n	800a39a <__swsetup_r+0x4a>
 800a396:	68ac      	ldr	r4, [r5, #8]
 800a398:	e7eb      	b.n	800a372 <__swsetup_r+0x22>
 800a39a:	4b28      	ldr	r3, [pc, #160]	; (800a43c <__swsetup_r+0xec>)
 800a39c:	429c      	cmp	r4, r3
 800a39e:	d1e8      	bne.n	800a372 <__swsetup_r+0x22>
 800a3a0:	68ec      	ldr	r4, [r5, #12]
 800a3a2:	e7e6      	b.n	800a372 <__swsetup_r+0x22>
 800a3a4:	075b      	lsls	r3, r3, #29
 800a3a6:	d513      	bpl.n	800a3d0 <__swsetup_r+0x80>
 800a3a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a3aa:	2900      	cmp	r1, #0
 800a3ac:	d008      	beq.n	800a3c0 <__swsetup_r+0x70>
 800a3ae:	0023      	movs	r3, r4
 800a3b0:	3344      	adds	r3, #68	; 0x44
 800a3b2:	4299      	cmp	r1, r3
 800a3b4:	d002      	beq.n	800a3bc <__swsetup_r+0x6c>
 800a3b6:	0030      	movs	r0, r6
 800a3b8:	f7ff fb16 	bl	80099e8 <_free_r>
 800a3bc:	2300      	movs	r3, #0
 800a3be:	6363      	str	r3, [r4, #52]	; 0x34
 800a3c0:	2224      	movs	r2, #36	; 0x24
 800a3c2:	89a3      	ldrh	r3, [r4, #12]
 800a3c4:	4393      	bics	r3, r2
 800a3c6:	81a3      	strh	r3, [r4, #12]
 800a3c8:	2300      	movs	r3, #0
 800a3ca:	6063      	str	r3, [r4, #4]
 800a3cc:	6923      	ldr	r3, [r4, #16]
 800a3ce:	6023      	str	r3, [r4, #0]
 800a3d0:	2308      	movs	r3, #8
 800a3d2:	89a2      	ldrh	r2, [r4, #12]
 800a3d4:	4313      	orrs	r3, r2
 800a3d6:	81a3      	strh	r3, [r4, #12]
 800a3d8:	6923      	ldr	r3, [r4, #16]
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d10b      	bne.n	800a3f6 <__swsetup_r+0xa6>
 800a3de:	21a0      	movs	r1, #160	; 0xa0
 800a3e0:	2280      	movs	r2, #128	; 0x80
 800a3e2:	89a3      	ldrh	r3, [r4, #12]
 800a3e4:	0089      	lsls	r1, r1, #2
 800a3e6:	0092      	lsls	r2, r2, #2
 800a3e8:	400b      	ands	r3, r1
 800a3ea:	4293      	cmp	r3, r2
 800a3ec:	d003      	beq.n	800a3f6 <__swsetup_r+0xa6>
 800a3ee:	0021      	movs	r1, r4
 800a3f0:	0030      	movs	r0, r6
 800a3f2:	f000 fa27 	bl	800a844 <__smakebuf_r>
 800a3f6:	220c      	movs	r2, #12
 800a3f8:	5ea3      	ldrsh	r3, [r4, r2]
 800a3fa:	2001      	movs	r0, #1
 800a3fc:	001a      	movs	r2, r3
 800a3fe:	b299      	uxth	r1, r3
 800a400:	4002      	ands	r2, r0
 800a402:	4203      	tst	r3, r0
 800a404:	d00f      	beq.n	800a426 <__swsetup_r+0xd6>
 800a406:	2200      	movs	r2, #0
 800a408:	60a2      	str	r2, [r4, #8]
 800a40a:	6962      	ldr	r2, [r4, #20]
 800a40c:	4252      	negs	r2, r2
 800a40e:	61a2      	str	r2, [r4, #24]
 800a410:	2000      	movs	r0, #0
 800a412:	6922      	ldr	r2, [r4, #16]
 800a414:	4282      	cmp	r2, r0
 800a416:	d1ba      	bne.n	800a38e <__swsetup_r+0x3e>
 800a418:	060a      	lsls	r2, r1, #24
 800a41a:	d5b8      	bpl.n	800a38e <__swsetup_r+0x3e>
 800a41c:	2240      	movs	r2, #64	; 0x40
 800a41e:	4313      	orrs	r3, r2
 800a420:	81a3      	strh	r3, [r4, #12]
 800a422:	3801      	subs	r0, #1
 800a424:	e7b3      	b.n	800a38e <__swsetup_r+0x3e>
 800a426:	0788      	lsls	r0, r1, #30
 800a428:	d400      	bmi.n	800a42c <__swsetup_r+0xdc>
 800a42a:	6962      	ldr	r2, [r4, #20]
 800a42c:	60a2      	str	r2, [r4, #8]
 800a42e:	e7ef      	b.n	800a410 <__swsetup_r+0xc0>
 800a430:	2000000c 	.word	0x2000000c
 800a434:	0800b16c 	.word	0x0800b16c
 800a438:	0800b18c 	.word	0x0800b18c
 800a43c:	0800b14c 	.word	0x0800b14c

0800a440 <abort>:
 800a440:	2006      	movs	r0, #6
 800a442:	b510      	push	{r4, lr}
 800a444:	f000 fa74 	bl	800a930 <raise>
 800a448:	2001      	movs	r0, #1
 800a44a:	f7f8 fe48 	bl	80030de <_exit>
	...

0800a450 <__sflush_r>:
 800a450:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a452:	898b      	ldrh	r3, [r1, #12]
 800a454:	0005      	movs	r5, r0
 800a456:	000c      	movs	r4, r1
 800a458:	071a      	lsls	r2, r3, #28
 800a45a:	d45f      	bmi.n	800a51c <__sflush_r+0xcc>
 800a45c:	684a      	ldr	r2, [r1, #4]
 800a45e:	2a00      	cmp	r2, #0
 800a460:	dc04      	bgt.n	800a46c <__sflush_r+0x1c>
 800a462:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 800a464:	2a00      	cmp	r2, #0
 800a466:	dc01      	bgt.n	800a46c <__sflush_r+0x1c>
 800a468:	2000      	movs	r0, #0
 800a46a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a46c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800a46e:	2f00      	cmp	r7, #0
 800a470:	d0fa      	beq.n	800a468 <__sflush_r+0x18>
 800a472:	2200      	movs	r2, #0
 800a474:	2180      	movs	r1, #128	; 0x80
 800a476:	682e      	ldr	r6, [r5, #0]
 800a478:	602a      	str	r2, [r5, #0]
 800a47a:	001a      	movs	r2, r3
 800a47c:	0149      	lsls	r1, r1, #5
 800a47e:	400a      	ands	r2, r1
 800a480:	420b      	tst	r3, r1
 800a482:	d034      	beq.n	800a4ee <__sflush_r+0x9e>
 800a484:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a486:	89a3      	ldrh	r3, [r4, #12]
 800a488:	075b      	lsls	r3, r3, #29
 800a48a:	d506      	bpl.n	800a49a <__sflush_r+0x4a>
 800a48c:	6863      	ldr	r3, [r4, #4]
 800a48e:	1ac0      	subs	r0, r0, r3
 800a490:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a492:	2b00      	cmp	r3, #0
 800a494:	d001      	beq.n	800a49a <__sflush_r+0x4a>
 800a496:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a498:	1ac0      	subs	r0, r0, r3
 800a49a:	0002      	movs	r2, r0
 800a49c:	6a21      	ldr	r1, [r4, #32]
 800a49e:	2300      	movs	r3, #0
 800a4a0:	0028      	movs	r0, r5
 800a4a2:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800a4a4:	47b8      	blx	r7
 800a4a6:	89a1      	ldrh	r1, [r4, #12]
 800a4a8:	1c43      	adds	r3, r0, #1
 800a4aa:	d106      	bne.n	800a4ba <__sflush_r+0x6a>
 800a4ac:	682b      	ldr	r3, [r5, #0]
 800a4ae:	2b1d      	cmp	r3, #29
 800a4b0:	d831      	bhi.n	800a516 <__sflush_r+0xc6>
 800a4b2:	4a2c      	ldr	r2, [pc, #176]	; (800a564 <__sflush_r+0x114>)
 800a4b4:	40da      	lsrs	r2, r3
 800a4b6:	07d3      	lsls	r3, r2, #31
 800a4b8:	d52d      	bpl.n	800a516 <__sflush_r+0xc6>
 800a4ba:	2300      	movs	r3, #0
 800a4bc:	6063      	str	r3, [r4, #4]
 800a4be:	6923      	ldr	r3, [r4, #16]
 800a4c0:	6023      	str	r3, [r4, #0]
 800a4c2:	04cb      	lsls	r3, r1, #19
 800a4c4:	d505      	bpl.n	800a4d2 <__sflush_r+0x82>
 800a4c6:	1c43      	adds	r3, r0, #1
 800a4c8:	d102      	bne.n	800a4d0 <__sflush_r+0x80>
 800a4ca:	682b      	ldr	r3, [r5, #0]
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d100      	bne.n	800a4d2 <__sflush_r+0x82>
 800a4d0:	6560      	str	r0, [r4, #84]	; 0x54
 800a4d2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a4d4:	602e      	str	r6, [r5, #0]
 800a4d6:	2900      	cmp	r1, #0
 800a4d8:	d0c6      	beq.n	800a468 <__sflush_r+0x18>
 800a4da:	0023      	movs	r3, r4
 800a4dc:	3344      	adds	r3, #68	; 0x44
 800a4de:	4299      	cmp	r1, r3
 800a4e0:	d002      	beq.n	800a4e8 <__sflush_r+0x98>
 800a4e2:	0028      	movs	r0, r5
 800a4e4:	f7ff fa80 	bl	80099e8 <_free_r>
 800a4e8:	2000      	movs	r0, #0
 800a4ea:	6360      	str	r0, [r4, #52]	; 0x34
 800a4ec:	e7bd      	b.n	800a46a <__sflush_r+0x1a>
 800a4ee:	2301      	movs	r3, #1
 800a4f0:	0028      	movs	r0, r5
 800a4f2:	6a21      	ldr	r1, [r4, #32]
 800a4f4:	47b8      	blx	r7
 800a4f6:	1c43      	adds	r3, r0, #1
 800a4f8:	d1c5      	bne.n	800a486 <__sflush_r+0x36>
 800a4fa:	682b      	ldr	r3, [r5, #0]
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d0c2      	beq.n	800a486 <__sflush_r+0x36>
 800a500:	2b1d      	cmp	r3, #29
 800a502:	d001      	beq.n	800a508 <__sflush_r+0xb8>
 800a504:	2b16      	cmp	r3, #22
 800a506:	d101      	bne.n	800a50c <__sflush_r+0xbc>
 800a508:	602e      	str	r6, [r5, #0]
 800a50a:	e7ad      	b.n	800a468 <__sflush_r+0x18>
 800a50c:	2340      	movs	r3, #64	; 0x40
 800a50e:	89a2      	ldrh	r2, [r4, #12]
 800a510:	4313      	orrs	r3, r2
 800a512:	81a3      	strh	r3, [r4, #12]
 800a514:	e7a9      	b.n	800a46a <__sflush_r+0x1a>
 800a516:	2340      	movs	r3, #64	; 0x40
 800a518:	430b      	orrs	r3, r1
 800a51a:	e7fa      	b.n	800a512 <__sflush_r+0xc2>
 800a51c:	690f      	ldr	r7, [r1, #16]
 800a51e:	2f00      	cmp	r7, #0
 800a520:	d0a2      	beq.n	800a468 <__sflush_r+0x18>
 800a522:	680a      	ldr	r2, [r1, #0]
 800a524:	600f      	str	r7, [r1, #0]
 800a526:	1bd2      	subs	r2, r2, r7
 800a528:	9201      	str	r2, [sp, #4]
 800a52a:	2200      	movs	r2, #0
 800a52c:	079b      	lsls	r3, r3, #30
 800a52e:	d100      	bne.n	800a532 <__sflush_r+0xe2>
 800a530:	694a      	ldr	r2, [r1, #20]
 800a532:	60a2      	str	r2, [r4, #8]
 800a534:	9b01      	ldr	r3, [sp, #4]
 800a536:	2b00      	cmp	r3, #0
 800a538:	dc00      	bgt.n	800a53c <__sflush_r+0xec>
 800a53a:	e795      	b.n	800a468 <__sflush_r+0x18>
 800a53c:	003a      	movs	r2, r7
 800a53e:	0028      	movs	r0, r5
 800a540:	9b01      	ldr	r3, [sp, #4]
 800a542:	6a21      	ldr	r1, [r4, #32]
 800a544:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a546:	47b0      	blx	r6
 800a548:	2800      	cmp	r0, #0
 800a54a:	dc06      	bgt.n	800a55a <__sflush_r+0x10a>
 800a54c:	2340      	movs	r3, #64	; 0x40
 800a54e:	2001      	movs	r0, #1
 800a550:	89a2      	ldrh	r2, [r4, #12]
 800a552:	4240      	negs	r0, r0
 800a554:	4313      	orrs	r3, r2
 800a556:	81a3      	strh	r3, [r4, #12]
 800a558:	e787      	b.n	800a46a <__sflush_r+0x1a>
 800a55a:	9b01      	ldr	r3, [sp, #4]
 800a55c:	183f      	adds	r7, r7, r0
 800a55e:	1a1b      	subs	r3, r3, r0
 800a560:	9301      	str	r3, [sp, #4]
 800a562:	e7e7      	b.n	800a534 <__sflush_r+0xe4>
 800a564:	20400001 	.word	0x20400001

0800a568 <_fflush_r>:
 800a568:	690b      	ldr	r3, [r1, #16]
 800a56a:	b570      	push	{r4, r5, r6, lr}
 800a56c:	0005      	movs	r5, r0
 800a56e:	000c      	movs	r4, r1
 800a570:	2b00      	cmp	r3, #0
 800a572:	d102      	bne.n	800a57a <_fflush_r+0x12>
 800a574:	2500      	movs	r5, #0
 800a576:	0028      	movs	r0, r5
 800a578:	bd70      	pop	{r4, r5, r6, pc}
 800a57a:	2800      	cmp	r0, #0
 800a57c:	d004      	beq.n	800a588 <_fflush_r+0x20>
 800a57e:	6983      	ldr	r3, [r0, #24]
 800a580:	2b00      	cmp	r3, #0
 800a582:	d101      	bne.n	800a588 <_fflush_r+0x20>
 800a584:	f000 f892 	bl	800a6ac <__sinit>
 800a588:	4b14      	ldr	r3, [pc, #80]	; (800a5dc <_fflush_r+0x74>)
 800a58a:	429c      	cmp	r4, r3
 800a58c:	d11b      	bne.n	800a5c6 <_fflush_r+0x5e>
 800a58e:	686c      	ldr	r4, [r5, #4]
 800a590:	220c      	movs	r2, #12
 800a592:	5ea3      	ldrsh	r3, [r4, r2]
 800a594:	2b00      	cmp	r3, #0
 800a596:	d0ed      	beq.n	800a574 <_fflush_r+0xc>
 800a598:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a59a:	07d2      	lsls	r2, r2, #31
 800a59c:	d404      	bmi.n	800a5a8 <_fflush_r+0x40>
 800a59e:	059b      	lsls	r3, r3, #22
 800a5a0:	d402      	bmi.n	800a5a8 <_fflush_r+0x40>
 800a5a2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a5a4:	f000 f923 	bl	800a7ee <__retarget_lock_acquire_recursive>
 800a5a8:	0028      	movs	r0, r5
 800a5aa:	0021      	movs	r1, r4
 800a5ac:	f7ff ff50 	bl	800a450 <__sflush_r>
 800a5b0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a5b2:	0005      	movs	r5, r0
 800a5b4:	07db      	lsls	r3, r3, #31
 800a5b6:	d4de      	bmi.n	800a576 <_fflush_r+0xe>
 800a5b8:	89a3      	ldrh	r3, [r4, #12]
 800a5ba:	059b      	lsls	r3, r3, #22
 800a5bc:	d4db      	bmi.n	800a576 <_fflush_r+0xe>
 800a5be:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a5c0:	f000 f916 	bl	800a7f0 <__retarget_lock_release_recursive>
 800a5c4:	e7d7      	b.n	800a576 <_fflush_r+0xe>
 800a5c6:	4b06      	ldr	r3, [pc, #24]	; (800a5e0 <_fflush_r+0x78>)
 800a5c8:	429c      	cmp	r4, r3
 800a5ca:	d101      	bne.n	800a5d0 <_fflush_r+0x68>
 800a5cc:	68ac      	ldr	r4, [r5, #8]
 800a5ce:	e7df      	b.n	800a590 <_fflush_r+0x28>
 800a5d0:	4b04      	ldr	r3, [pc, #16]	; (800a5e4 <_fflush_r+0x7c>)
 800a5d2:	429c      	cmp	r4, r3
 800a5d4:	d1dc      	bne.n	800a590 <_fflush_r+0x28>
 800a5d6:	68ec      	ldr	r4, [r5, #12]
 800a5d8:	e7da      	b.n	800a590 <_fflush_r+0x28>
 800a5da:	46c0      	nop			; (mov r8, r8)
 800a5dc:	0800b16c 	.word	0x0800b16c
 800a5e0:	0800b18c 	.word	0x0800b18c
 800a5e4:	0800b14c 	.word	0x0800b14c

0800a5e8 <std>:
 800a5e8:	2300      	movs	r3, #0
 800a5ea:	b510      	push	{r4, lr}
 800a5ec:	0004      	movs	r4, r0
 800a5ee:	6003      	str	r3, [r0, #0]
 800a5f0:	6043      	str	r3, [r0, #4]
 800a5f2:	6083      	str	r3, [r0, #8]
 800a5f4:	8181      	strh	r1, [r0, #12]
 800a5f6:	6643      	str	r3, [r0, #100]	; 0x64
 800a5f8:	0019      	movs	r1, r3
 800a5fa:	81c2      	strh	r2, [r0, #14]
 800a5fc:	6103      	str	r3, [r0, #16]
 800a5fe:	6143      	str	r3, [r0, #20]
 800a600:	6183      	str	r3, [r0, #24]
 800a602:	2208      	movs	r2, #8
 800a604:	305c      	adds	r0, #92	; 0x5c
 800a606:	f7fb fd43 	bl	8006090 <memset>
 800a60a:	4b05      	ldr	r3, [pc, #20]	; (800a620 <std+0x38>)
 800a60c:	6224      	str	r4, [r4, #32]
 800a60e:	6263      	str	r3, [r4, #36]	; 0x24
 800a610:	4b04      	ldr	r3, [pc, #16]	; (800a624 <std+0x3c>)
 800a612:	62a3      	str	r3, [r4, #40]	; 0x28
 800a614:	4b04      	ldr	r3, [pc, #16]	; (800a628 <std+0x40>)
 800a616:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a618:	4b04      	ldr	r3, [pc, #16]	; (800a62c <std+0x44>)
 800a61a:	6323      	str	r3, [r4, #48]	; 0x30
 800a61c:	bd10      	pop	{r4, pc}
 800a61e:	46c0      	nop			; (mov r8, r8)
 800a620:	0800a971 	.word	0x0800a971
 800a624:	0800a999 	.word	0x0800a999
 800a628:	0800a9d1 	.word	0x0800a9d1
 800a62c:	0800a9fd 	.word	0x0800a9fd

0800a630 <_cleanup_r>:
 800a630:	b510      	push	{r4, lr}
 800a632:	4902      	ldr	r1, [pc, #8]	; (800a63c <_cleanup_r+0xc>)
 800a634:	f000 f8ba 	bl	800a7ac <_fwalk_reent>
 800a638:	bd10      	pop	{r4, pc}
 800a63a:	46c0      	nop			; (mov r8, r8)
 800a63c:	0800a569 	.word	0x0800a569

0800a640 <__sfmoreglue>:
 800a640:	b570      	push	{r4, r5, r6, lr}
 800a642:	2568      	movs	r5, #104	; 0x68
 800a644:	1e4a      	subs	r2, r1, #1
 800a646:	4355      	muls	r5, r2
 800a648:	000e      	movs	r6, r1
 800a64a:	0029      	movs	r1, r5
 800a64c:	3174      	adds	r1, #116	; 0x74
 800a64e:	f7ff fa37 	bl	8009ac0 <_malloc_r>
 800a652:	1e04      	subs	r4, r0, #0
 800a654:	d008      	beq.n	800a668 <__sfmoreglue+0x28>
 800a656:	2100      	movs	r1, #0
 800a658:	002a      	movs	r2, r5
 800a65a:	6001      	str	r1, [r0, #0]
 800a65c:	6046      	str	r6, [r0, #4]
 800a65e:	300c      	adds	r0, #12
 800a660:	60a0      	str	r0, [r4, #8]
 800a662:	3268      	adds	r2, #104	; 0x68
 800a664:	f7fb fd14 	bl	8006090 <memset>
 800a668:	0020      	movs	r0, r4
 800a66a:	bd70      	pop	{r4, r5, r6, pc}

0800a66c <__sfp_lock_acquire>:
 800a66c:	b510      	push	{r4, lr}
 800a66e:	4802      	ldr	r0, [pc, #8]	; (800a678 <__sfp_lock_acquire+0xc>)
 800a670:	f000 f8bd 	bl	800a7ee <__retarget_lock_acquire_recursive>
 800a674:	bd10      	pop	{r4, pc}
 800a676:	46c0      	nop			; (mov r8, r8)
 800a678:	20000355 	.word	0x20000355

0800a67c <__sfp_lock_release>:
 800a67c:	b510      	push	{r4, lr}
 800a67e:	4802      	ldr	r0, [pc, #8]	; (800a688 <__sfp_lock_release+0xc>)
 800a680:	f000 f8b6 	bl	800a7f0 <__retarget_lock_release_recursive>
 800a684:	bd10      	pop	{r4, pc}
 800a686:	46c0      	nop			; (mov r8, r8)
 800a688:	20000355 	.word	0x20000355

0800a68c <__sinit_lock_acquire>:
 800a68c:	b510      	push	{r4, lr}
 800a68e:	4802      	ldr	r0, [pc, #8]	; (800a698 <__sinit_lock_acquire+0xc>)
 800a690:	f000 f8ad 	bl	800a7ee <__retarget_lock_acquire_recursive>
 800a694:	bd10      	pop	{r4, pc}
 800a696:	46c0      	nop			; (mov r8, r8)
 800a698:	20000356 	.word	0x20000356

0800a69c <__sinit_lock_release>:
 800a69c:	b510      	push	{r4, lr}
 800a69e:	4802      	ldr	r0, [pc, #8]	; (800a6a8 <__sinit_lock_release+0xc>)
 800a6a0:	f000 f8a6 	bl	800a7f0 <__retarget_lock_release_recursive>
 800a6a4:	bd10      	pop	{r4, pc}
 800a6a6:	46c0      	nop			; (mov r8, r8)
 800a6a8:	20000356 	.word	0x20000356

0800a6ac <__sinit>:
 800a6ac:	b513      	push	{r0, r1, r4, lr}
 800a6ae:	0004      	movs	r4, r0
 800a6b0:	f7ff ffec 	bl	800a68c <__sinit_lock_acquire>
 800a6b4:	69a3      	ldr	r3, [r4, #24]
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d002      	beq.n	800a6c0 <__sinit+0x14>
 800a6ba:	f7ff ffef 	bl	800a69c <__sinit_lock_release>
 800a6be:	bd13      	pop	{r0, r1, r4, pc}
 800a6c0:	64a3      	str	r3, [r4, #72]	; 0x48
 800a6c2:	64e3      	str	r3, [r4, #76]	; 0x4c
 800a6c4:	6523      	str	r3, [r4, #80]	; 0x50
 800a6c6:	4b13      	ldr	r3, [pc, #76]	; (800a714 <__sinit+0x68>)
 800a6c8:	4a13      	ldr	r2, [pc, #76]	; (800a718 <__sinit+0x6c>)
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	62a2      	str	r2, [r4, #40]	; 0x28
 800a6ce:	9301      	str	r3, [sp, #4]
 800a6d0:	42a3      	cmp	r3, r4
 800a6d2:	d101      	bne.n	800a6d8 <__sinit+0x2c>
 800a6d4:	2301      	movs	r3, #1
 800a6d6:	61a3      	str	r3, [r4, #24]
 800a6d8:	0020      	movs	r0, r4
 800a6da:	f000 f81f 	bl	800a71c <__sfp>
 800a6de:	6060      	str	r0, [r4, #4]
 800a6e0:	0020      	movs	r0, r4
 800a6e2:	f000 f81b 	bl	800a71c <__sfp>
 800a6e6:	60a0      	str	r0, [r4, #8]
 800a6e8:	0020      	movs	r0, r4
 800a6ea:	f000 f817 	bl	800a71c <__sfp>
 800a6ee:	2200      	movs	r2, #0
 800a6f0:	2104      	movs	r1, #4
 800a6f2:	60e0      	str	r0, [r4, #12]
 800a6f4:	6860      	ldr	r0, [r4, #4]
 800a6f6:	f7ff ff77 	bl	800a5e8 <std>
 800a6fa:	2201      	movs	r2, #1
 800a6fc:	2109      	movs	r1, #9
 800a6fe:	68a0      	ldr	r0, [r4, #8]
 800a700:	f7ff ff72 	bl	800a5e8 <std>
 800a704:	2202      	movs	r2, #2
 800a706:	2112      	movs	r1, #18
 800a708:	68e0      	ldr	r0, [r4, #12]
 800a70a:	f7ff ff6d 	bl	800a5e8 <std>
 800a70e:	2301      	movs	r3, #1
 800a710:	61a3      	str	r3, [r4, #24]
 800a712:	e7d2      	b.n	800a6ba <__sinit+0xe>
 800a714:	0800ad08 	.word	0x0800ad08
 800a718:	0800a631 	.word	0x0800a631

0800a71c <__sfp>:
 800a71c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a71e:	0007      	movs	r7, r0
 800a720:	f7ff ffa4 	bl	800a66c <__sfp_lock_acquire>
 800a724:	4b1f      	ldr	r3, [pc, #124]	; (800a7a4 <__sfp+0x88>)
 800a726:	681e      	ldr	r6, [r3, #0]
 800a728:	69b3      	ldr	r3, [r6, #24]
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d102      	bne.n	800a734 <__sfp+0x18>
 800a72e:	0030      	movs	r0, r6
 800a730:	f7ff ffbc 	bl	800a6ac <__sinit>
 800a734:	3648      	adds	r6, #72	; 0x48
 800a736:	68b4      	ldr	r4, [r6, #8]
 800a738:	6873      	ldr	r3, [r6, #4]
 800a73a:	3b01      	subs	r3, #1
 800a73c:	d504      	bpl.n	800a748 <__sfp+0x2c>
 800a73e:	6833      	ldr	r3, [r6, #0]
 800a740:	2b00      	cmp	r3, #0
 800a742:	d022      	beq.n	800a78a <__sfp+0x6e>
 800a744:	6836      	ldr	r6, [r6, #0]
 800a746:	e7f6      	b.n	800a736 <__sfp+0x1a>
 800a748:	220c      	movs	r2, #12
 800a74a:	5ea5      	ldrsh	r5, [r4, r2]
 800a74c:	2d00      	cmp	r5, #0
 800a74e:	d11a      	bne.n	800a786 <__sfp+0x6a>
 800a750:	0020      	movs	r0, r4
 800a752:	4b15      	ldr	r3, [pc, #84]	; (800a7a8 <__sfp+0x8c>)
 800a754:	3058      	adds	r0, #88	; 0x58
 800a756:	60e3      	str	r3, [r4, #12]
 800a758:	6665      	str	r5, [r4, #100]	; 0x64
 800a75a:	f000 f847 	bl	800a7ec <__retarget_lock_init_recursive>
 800a75e:	f7ff ff8d 	bl	800a67c <__sfp_lock_release>
 800a762:	0020      	movs	r0, r4
 800a764:	2208      	movs	r2, #8
 800a766:	0029      	movs	r1, r5
 800a768:	6025      	str	r5, [r4, #0]
 800a76a:	60a5      	str	r5, [r4, #8]
 800a76c:	6065      	str	r5, [r4, #4]
 800a76e:	6125      	str	r5, [r4, #16]
 800a770:	6165      	str	r5, [r4, #20]
 800a772:	61a5      	str	r5, [r4, #24]
 800a774:	305c      	adds	r0, #92	; 0x5c
 800a776:	f7fb fc8b 	bl	8006090 <memset>
 800a77a:	6365      	str	r5, [r4, #52]	; 0x34
 800a77c:	63a5      	str	r5, [r4, #56]	; 0x38
 800a77e:	64a5      	str	r5, [r4, #72]	; 0x48
 800a780:	64e5      	str	r5, [r4, #76]	; 0x4c
 800a782:	0020      	movs	r0, r4
 800a784:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a786:	3468      	adds	r4, #104	; 0x68
 800a788:	e7d7      	b.n	800a73a <__sfp+0x1e>
 800a78a:	2104      	movs	r1, #4
 800a78c:	0038      	movs	r0, r7
 800a78e:	f7ff ff57 	bl	800a640 <__sfmoreglue>
 800a792:	1e04      	subs	r4, r0, #0
 800a794:	6030      	str	r0, [r6, #0]
 800a796:	d1d5      	bne.n	800a744 <__sfp+0x28>
 800a798:	f7ff ff70 	bl	800a67c <__sfp_lock_release>
 800a79c:	230c      	movs	r3, #12
 800a79e:	603b      	str	r3, [r7, #0]
 800a7a0:	e7ef      	b.n	800a782 <__sfp+0x66>
 800a7a2:	46c0      	nop			; (mov r8, r8)
 800a7a4:	0800ad08 	.word	0x0800ad08
 800a7a8:	ffff0001 	.word	0xffff0001

0800a7ac <_fwalk_reent>:
 800a7ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a7ae:	0004      	movs	r4, r0
 800a7b0:	0006      	movs	r6, r0
 800a7b2:	2700      	movs	r7, #0
 800a7b4:	9101      	str	r1, [sp, #4]
 800a7b6:	3448      	adds	r4, #72	; 0x48
 800a7b8:	6863      	ldr	r3, [r4, #4]
 800a7ba:	68a5      	ldr	r5, [r4, #8]
 800a7bc:	9300      	str	r3, [sp, #0]
 800a7be:	9b00      	ldr	r3, [sp, #0]
 800a7c0:	3b01      	subs	r3, #1
 800a7c2:	9300      	str	r3, [sp, #0]
 800a7c4:	d504      	bpl.n	800a7d0 <_fwalk_reent+0x24>
 800a7c6:	6824      	ldr	r4, [r4, #0]
 800a7c8:	2c00      	cmp	r4, #0
 800a7ca:	d1f5      	bne.n	800a7b8 <_fwalk_reent+0xc>
 800a7cc:	0038      	movs	r0, r7
 800a7ce:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a7d0:	89ab      	ldrh	r3, [r5, #12]
 800a7d2:	2b01      	cmp	r3, #1
 800a7d4:	d908      	bls.n	800a7e8 <_fwalk_reent+0x3c>
 800a7d6:	220e      	movs	r2, #14
 800a7d8:	5eab      	ldrsh	r3, [r5, r2]
 800a7da:	3301      	adds	r3, #1
 800a7dc:	d004      	beq.n	800a7e8 <_fwalk_reent+0x3c>
 800a7de:	0029      	movs	r1, r5
 800a7e0:	0030      	movs	r0, r6
 800a7e2:	9b01      	ldr	r3, [sp, #4]
 800a7e4:	4798      	blx	r3
 800a7e6:	4307      	orrs	r7, r0
 800a7e8:	3568      	adds	r5, #104	; 0x68
 800a7ea:	e7e8      	b.n	800a7be <_fwalk_reent+0x12>

0800a7ec <__retarget_lock_init_recursive>:
 800a7ec:	4770      	bx	lr

0800a7ee <__retarget_lock_acquire_recursive>:
 800a7ee:	4770      	bx	lr

0800a7f0 <__retarget_lock_release_recursive>:
 800a7f0:	4770      	bx	lr
	...

0800a7f4 <__swhatbuf_r>:
 800a7f4:	b570      	push	{r4, r5, r6, lr}
 800a7f6:	000e      	movs	r6, r1
 800a7f8:	001d      	movs	r5, r3
 800a7fa:	230e      	movs	r3, #14
 800a7fc:	5ec9      	ldrsh	r1, [r1, r3]
 800a7fe:	0014      	movs	r4, r2
 800a800:	b096      	sub	sp, #88	; 0x58
 800a802:	2900      	cmp	r1, #0
 800a804:	da08      	bge.n	800a818 <__swhatbuf_r+0x24>
 800a806:	220c      	movs	r2, #12
 800a808:	5eb3      	ldrsh	r3, [r6, r2]
 800a80a:	2200      	movs	r2, #0
 800a80c:	602a      	str	r2, [r5, #0]
 800a80e:	061b      	lsls	r3, r3, #24
 800a810:	d411      	bmi.n	800a836 <__swhatbuf_r+0x42>
 800a812:	2380      	movs	r3, #128	; 0x80
 800a814:	00db      	lsls	r3, r3, #3
 800a816:	e00f      	b.n	800a838 <__swhatbuf_r+0x44>
 800a818:	466a      	mov	r2, sp
 800a81a:	f000 f91b 	bl	800aa54 <_fstat_r>
 800a81e:	2800      	cmp	r0, #0
 800a820:	dbf1      	blt.n	800a806 <__swhatbuf_r+0x12>
 800a822:	23f0      	movs	r3, #240	; 0xf0
 800a824:	9901      	ldr	r1, [sp, #4]
 800a826:	021b      	lsls	r3, r3, #8
 800a828:	4019      	ands	r1, r3
 800a82a:	4b05      	ldr	r3, [pc, #20]	; (800a840 <__swhatbuf_r+0x4c>)
 800a82c:	18c9      	adds	r1, r1, r3
 800a82e:	424b      	negs	r3, r1
 800a830:	4159      	adcs	r1, r3
 800a832:	6029      	str	r1, [r5, #0]
 800a834:	e7ed      	b.n	800a812 <__swhatbuf_r+0x1e>
 800a836:	2340      	movs	r3, #64	; 0x40
 800a838:	2000      	movs	r0, #0
 800a83a:	6023      	str	r3, [r4, #0]
 800a83c:	b016      	add	sp, #88	; 0x58
 800a83e:	bd70      	pop	{r4, r5, r6, pc}
 800a840:	ffffe000 	.word	0xffffe000

0800a844 <__smakebuf_r>:
 800a844:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a846:	2602      	movs	r6, #2
 800a848:	898b      	ldrh	r3, [r1, #12]
 800a84a:	0005      	movs	r5, r0
 800a84c:	000c      	movs	r4, r1
 800a84e:	4233      	tst	r3, r6
 800a850:	d006      	beq.n	800a860 <__smakebuf_r+0x1c>
 800a852:	0023      	movs	r3, r4
 800a854:	3347      	adds	r3, #71	; 0x47
 800a856:	6023      	str	r3, [r4, #0]
 800a858:	6123      	str	r3, [r4, #16]
 800a85a:	2301      	movs	r3, #1
 800a85c:	6163      	str	r3, [r4, #20]
 800a85e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800a860:	466a      	mov	r2, sp
 800a862:	ab01      	add	r3, sp, #4
 800a864:	f7ff ffc6 	bl	800a7f4 <__swhatbuf_r>
 800a868:	9900      	ldr	r1, [sp, #0]
 800a86a:	0007      	movs	r7, r0
 800a86c:	0028      	movs	r0, r5
 800a86e:	f7ff f927 	bl	8009ac0 <_malloc_r>
 800a872:	2800      	cmp	r0, #0
 800a874:	d108      	bne.n	800a888 <__smakebuf_r+0x44>
 800a876:	220c      	movs	r2, #12
 800a878:	5ea3      	ldrsh	r3, [r4, r2]
 800a87a:	059a      	lsls	r2, r3, #22
 800a87c:	d4ef      	bmi.n	800a85e <__smakebuf_r+0x1a>
 800a87e:	2203      	movs	r2, #3
 800a880:	4393      	bics	r3, r2
 800a882:	431e      	orrs	r6, r3
 800a884:	81a6      	strh	r6, [r4, #12]
 800a886:	e7e4      	b.n	800a852 <__smakebuf_r+0xe>
 800a888:	4b0f      	ldr	r3, [pc, #60]	; (800a8c8 <__smakebuf_r+0x84>)
 800a88a:	62ab      	str	r3, [r5, #40]	; 0x28
 800a88c:	2380      	movs	r3, #128	; 0x80
 800a88e:	89a2      	ldrh	r2, [r4, #12]
 800a890:	6020      	str	r0, [r4, #0]
 800a892:	4313      	orrs	r3, r2
 800a894:	81a3      	strh	r3, [r4, #12]
 800a896:	9b00      	ldr	r3, [sp, #0]
 800a898:	6120      	str	r0, [r4, #16]
 800a89a:	6163      	str	r3, [r4, #20]
 800a89c:	9b01      	ldr	r3, [sp, #4]
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d00d      	beq.n	800a8be <__smakebuf_r+0x7a>
 800a8a2:	0028      	movs	r0, r5
 800a8a4:	230e      	movs	r3, #14
 800a8a6:	5ee1      	ldrsh	r1, [r4, r3]
 800a8a8:	f000 f8e6 	bl	800aa78 <_isatty_r>
 800a8ac:	2800      	cmp	r0, #0
 800a8ae:	d006      	beq.n	800a8be <__smakebuf_r+0x7a>
 800a8b0:	2203      	movs	r2, #3
 800a8b2:	89a3      	ldrh	r3, [r4, #12]
 800a8b4:	4393      	bics	r3, r2
 800a8b6:	001a      	movs	r2, r3
 800a8b8:	2301      	movs	r3, #1
 800a8ba:	4313      	orrs	r3, r2
 800a8bc:	81a3      	strh	r3, [r4, #12]
 800a8be:	89a0      	ldrh	r0, [r4, #12]
 800a8c0:	4307      	orrs	r7, r0
 800a8c2:	81a7      	strh	r7, [r4, #12]
 800a8c4:	e7cb      	b.n	800a85e <__smakebuf_r+0x1a>
 800a8c6:	46c0      	nop			; (mov r8, r8)
 800a8c8:	0800a631 	.word	0x0800a631

0800a8cc <_malloc_usable_size_r>:
 800a8cc:	1f0b      	subs	r3, r1, #4
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	1f18      	subs	r0, r3, #4
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	da01      	bge.n	800a8da <_malloc_usable_size_r+0xe>
 800a8d6:	580b      	ldr	r3, [r1, r0]
 800a8d8:	18c0      	adds	r0, r0, r3
 800a8da:	4770      	bx	lr

0800a8dc <_raise_r>:
 800a8dc:	b570      	push	{r4, r5, r6, lr}
 800a8de:	0004      	movs	r4, r0
 800a8e0:	000d      	movs	r5, r1
 800a8e2:	291f      	cmp	r1, #31
 800a8e4:	d904      	bls.n	800a8f0 <_raise_r+0x14>
 800a8e6:	2316      	movs	r3, #22
 800a8e8:	6003      	str	r3, [r0, #0]
 800a8ea:	2001      	movs	r0, #1
 800a8ec:	4240      	negs	r0, r0
 800a8ee:	bd70      	pop	{r4, r5, r6, pc}
 800a8f0:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d004      	beq.n	800a900 <_raise_r+0x24>
 800a8f6:	008a      	lsls	r2, r1, #2
 800a8f8:	189b      	adds	r3, r3, r2
 800a8fa:	681a      	ldr	r2, [r3, #0]
 800a8fc:	2a00      	cmp	r2, #0
 800a8fe:	d108      	bne.n	800a912 <_raise_r+0x36>
 800a900:	0020      	movs	r0, r4
 800a902:	f000 f831 	bl	800a968 <_getpid_r>
 800a906:	002a      	movs	r2, r5
 800a908:	0001      	movs	r1, r0
 800a90a:	0020      	movs	r0, r4
 800a90c:	f000 f81a 	bl	800a944 <_kill_r>
 800a910:	e7ed      	b.n	800a8ee <_raise_r+0x12>
 800a912:	2000      	movs	r0, #0
 800a914:	2a01      	cmp	r2, #1
 800a916:	d0ea      	beq.n	800a8ee <_raise_r+0x12>
 800a918:	1c51      	adds	r1, r2, #1
 800a91a:	d103      	bne.n	800a924 <_raise_r+0x48>
 800a91c:	2316      	movs	r3, #22
 800a91e:	3001      	adds	r0, #1
 800a920:	6023      	str	r3, [r4, #0]
 800a922:	e7e4      	b.n	800a8ee <_raise_r+0x12>
 800a924:	2400      	movs	r4, #0
 800a926:	0028      	movs	r0, r5
 800a928:	601c      	str	r4, [r3, #0]
 800a92a:	4790      	blx	r2
 800a92c:	0020      	movs	r0, r4
 800a92e:	e7de      	b.n	800a8ee <_raise_r+0x12>

0800a930 <raise>:
 800a930:	b510      	push	{r4, lr}
 800a932:	4b03      	ldr	r3, [pc, #12]	; (800a940 <raise+0x10>)
 800a934:	0001      	movs	r1, r0
 800a936:	6818      	ldr	r0, [r3, #0]
 800a938:	f7ff ffd0 	bl	800a8dc <_raise_r>
 800a93c:	bd10      	pop	{r4, pc}
 800a93e:	46c0      	nop			; (mov r8, r8)
 800a940:	2000000c 	.word	0x2000000c

0800a944 <_kill_r>:
 800a944:	2300      	movs	r3, #0
 800a946:	b570      	push	{r4, r5, r6, lr}
 800a948:	4d06      	ldr	r5, [pc, #24]	; (800a964 <_kill_r+0x20>)
 800a94a:	0004      	movs	r4, r0
 800a94c:	0008      	movs	r0, r1
 800a94e:	0011      	movs	r1, r2
 800a950:	602b      	str	r3, [r5, #0]
 800a952:	f7f8 fbb4 	bl	80030be <_kill>
 800a956:	1c43      	adds	r3, r0, #1
 800a958:	d103      	bne.n	800a962 <_kill_r+0x1e>
 800a95a:	682b      	ldr	r3, [r5, #0]
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	d000      	beq.n	800a962 <_kill_r+0x1e>
 800a960:	6023      	str	r3, [r4, #0]
 800a962:	bd70      	pop	{r4, r5, r6, pc}
 800a964:	20000350 	.word	0x20000350

0800a968 <_getpid_r>:
 800a968:	b510      	push	{r4, lr}
 800a96a:	f7f8 fba2 	bl	80030b2 <_getpid>
 800a96e:	bd10      	pop	{r4, pc}

0800a970 <__sread>:
 800a970:	b570      	push	{r4, r5, r6, lr}
 800a972:	000c      	movs	r4, r1
 800a974:	250e      	movs	r5, #14
 800a976:	5f49      	ldrsh	r1, [r1, r5]
 800a978:	f000 f8a4 	bl	800aac4 <_read_r>
 800a97c:	2800      	cmp	r0, #0
 800a97e:	db03      	blt.n	800a988 <__sread+0x18>
 800a980:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800a982:	181b      	adds	r3, r3, r0
 800a984:	6563      	str	r3, [r4, #84]	; 0x54
 800a986:	bd70      	pop	{r4, r5, r6, pc}
 800a988:	89a3      	ldrh	r3, [r4, #12]
 800a98a:	4a02      	ldr	r2, [pc, #8]	; (800a994 <__sread+0x24>)
 800a98c:	4013      	ands	r3, r2
 800a98e:	81a3      	strh	r3, [r4, #12]
 800a990:	e7f9      	b.n	800a986 <__sread+0x16>
 800a992:	46c0      	nop			; (mov r8, r8)
 800a994:	ffffefff 	.word	0xffffefff

0800a998 <__swrite>:
 800a998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a99a:	001f      	movs	r7, r3
 800a99c:	898b      	ldrh	r3, [r1, #12]
 800a99e:	0005      	movs	r5, r0
 800a9a0:	000c      	movs	r4, r1
 800a9a2:	0016      	movs	r6, r2
 800a9a4:	05db      	lsls	r3, r3, #23
 800a9a6:	d505      	bpl.n	800a9b4 <__swrite+0x1c>
 800a9a8:	230e      	movs	r3, #14
 800a9aa:	5ec9      	ldrsh	r1, [r1, r3]
 800a9ac:	2200      	movs	r2, #0
 800a9ae:	2302      	movs	r3, #2
 800a9b0:	f000 f874 	bl	800aa9c <_lseek_r>
 800a9b4:	89a3      	ldrh	r3, [r4, #12]
 800a9b6:	4a05      	ldr	r2, [pc, #20]	; (800a9cc <__swrite+0x34>)
 800a9b8:	0028      	movs	r0, r5
 800a9ba:	4013      	ands	r3, r2
 800a9bc:	81a3      	strh	r3, [r4, #12]
 800a9be:	0032      	movs	r2, r6
 800a9c0:	230e      	movs	r3, #14
 800a9c2:	5ee1      	ldrsh	r1, [r4, r3]
 800a9c4:	003b      	movs	r3, r7
 800a9c6:	f000 f81f 	bl	800aa08 <_write_r>
 800a9ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a9cc:	ffffefff 	.word	0xffffefff

0800a9d0 <__sseek>:
 800a9d0:	b570      	push	{r4, r5, r6, lr}
 800a9d2:	000c      	movs	r4, r1
 800a9d4:	250e      	movs	r5, #14
 800a9d6:	5f49      	ldrsh	r1, [r1, r5]
 800a9d8:	f000 f860 	bl	800aa9c <_lseek_r>
 800a9dc:	89a3      	ldrh	r3, [r4, #12]
 800a9de:	1c42      	adds	r2, r0, #1
 800a9e0:	d103      	bne.n	800a9ea <__sseek+0x1a>
 800a9e2:	4a05      	ldr	r2, [pc, #20]	; (800a9f8 <__sseek+0x28>)
 800a9e4:	4013      	ands	r3, r2
 800a9e6:	81a3      	strh	r3, [r4, #12]
 800a9e8:	bd70      	pop	{r4, r5, r6, pc}
 800a9ea:	2280      	movs	r2, #128	; 0x80
 800a9ec:	0152      	lsls	r2, r2, #5
 800a9ee:	4313      	orrs	r3, r2
 800a9f0:	81a3      	strh	r3, [r4, #12]
 800a9f2:	6560      	str	r0, [r4, #84]	; 0x54
 800a9f4:	e7f8      	b.n	800a9e8 <__sseek+0x18>
 800a9f6:	46c0      	nop			; (mov r8, r8)
 800a9f8:	ffffefff 	.word	0xffffefff

0800a9fc <__sclose>:
 800a9fc:	b510      	push	{r4, lr}
 800a9fe:	230e      	movs	r3, #14
 800aa00:	5ec9      	ldrsh	r1, [r1, r3]
 800aa02:	f000 f815 	bl	800aa30 <_close_r>
 800aa06:	bd10      	pop	{r4, pc}

0800aa08 <_write_r>:
 800aa08:	b570      	push	{r4, r5, r6, lr}
 800aa0a:	0004      	movs	r4, r0
 800aa0c:	0008      	movs	r0, r1
 800aa0e:	0011      	movs	r1, r2
 800aa10:	001a      	movs	r2, r3
 800aa12:	2300      	movs	r3, #0
 800aa14:	4d05      	ldr	r5, [pc, #20]	; (800aa2c <_write_r+0x24>)
 800aa16:	602b      	str	r3, [r5, #0]
 800aa18:	f7f8 fb8a 	bl	8003130 <_write>
 800aa1c:	1c43      	adds	r3, r0, #1
 800aa1e:	d103      	bne.n	800aa28 <_write_r+0x20>
 800aa20:	682b      	ldr	r3, [r5, #0]
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d000      	beq.n	800aa28 <_write_r+0x20>
 800aa26:	6023      	str	r3, [r4, #0]
 800aa28:	bd70      	pop	{r4, r5, r6, pc}
 800aa2a:	46c0      	nop			; (mov r8, r8)
 800aa2c:	20000350 	.word	0x20000350

0800aa30 <_close_r>:
 800aa30:	2300      	movs	r3, #0
 800aa32:	b570      	push	{r4, r5, r6, lr}
 800aa34:	4d06      	ldr	r5, [pc, #24]	; (800aa50 <_close_r+0x20>)
 800aa36:	0004      	movs	r4, r0
 800aa38:	0008      	movs	r0, r1
 800aa3a:	602b      	str	r3, [r5, #0]
 800aa3c:	f7f8 fb94 	bl	8003168 <_close>
 800aa40:	1c43      	adds	r3, r0, #1
 800aa42:	d103      	bne.n	800aa4c <_close_r+0x1c>
 800aa44:	682b      	ldr	r3, [r5, #0]
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	d000      	beq.n	800aa4c <_close_r+0x1c>
 800aa4a:	6023      	str	r3, [r4, #0]
 800aa4c:	bd70      	pop	{r4, r5, r6, pc}
 800aa4e:	46c0      	nop			; (mov r8, r8)
 800aa50:	20000350 	.word	0x20000350

0800aa54 <_fstat_r>:
 800aa54:	2300      	movs	r3, #0
 800aa56:	b570      	push	{r4, r5, r6, lr}
 800aa58:	4d06      	ldr	r5, [pc, #24]	; (800aa74 <_fstat_r+0x20>)
 800aa5a:	0004      	movs	r4, r0
 800aa5c:	0008      	movs	r0, r1
 800aa5e:	0011      	movs	r1, r2
 800aa60:	602b      	str	r3, [r5, #0]
 800aa62:	f7f8 fb8b 	bl	800317c <_fstat>
 800aa66:	1c43      	adds	r3, r0, #1
 800aa68:	d103      	bne.n	800aa72 <_fstat_r+0x1e>
 800aa6a:	682b      	ldr	r3, [r5, #0]
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d000      	beq.n	800aa72 <_fstat_r+0x1e>
 800aa70:	6023      	str	r3, [r4, #0]
 800aa72:	bd70      	pop	{r4, r5, r6, pc}
 800aa74:	20000350 	.word	0x20000350

0800aa78 <_isatty_r>:
 800aa78:	2300      	movs	r3, #0
 800aa7a:	b570      	push	{r4, r5, r6, lr}
 800aa7c:	4d06      	ldr	r5, [pc, #24]	; (800aa98 <_isatty_r+0x20>)
 800aa7e:	0004      	movs	r4, r0
 800aa80:	0008      	movs	r0, r1
 800aa82:	602b      	str	r3, [r5, #0]
 800aa84:	f7f8 fb88 	bl	8003198 <_isatty>
 800aa88:	1c43      	adds	r3, r0, #1
 800aa8a:	d103      	bne.n	800aa94 <_isatty_r+0x1c>
 800aa8c:	682b      	ldr	r3, [r5, #0]
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d000      	beq.n	800aa94 <_isatty_r+0x1c>
 800aa92:	6023      	str	r3, [r4, #0]
 800aa94:	bd70      	pop	{r4, r5, r6, pc}
 800aa96:	46c0      	nop			; (mov r8, r8)
 800aa98:	20000350 	.word	0x20000350

0800aa9c <_lseek_r>:
 800aa9c:	b570      	push	{r4, r5, r6, lr}
 800aa9e:	0004      	movs	r4, r0
 800aaa0:	0008      	movs	r0, r1
 800aaa2:	0011      	movs	r1, r2
 800aaa4:	001a      	movs	r2, r3
 800aaa6:	2300      	movs	r3, #0
 800aaa8:	4d05      	ldr	r5, [pc, #20]	; (800aac0 <_lseek_r+0x24>)
 800aaaa:	602b      	str	r3, [r5, #0]
 800aaac:	f7f8 fb7d 	bl	80031aa <_lseek>
 800aab0:	1c43      	adds	r3, r0, #1
 800aab2:	d103      	bne.n	800aabc <_lseek_r+0x20>
 800aab4:	682b      	ldr	r3, [r5, #0]
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d000      	beq.n	800aabc <_lseek_r+0x20>
 800aaba:	6023      	str	r3, [r4, #0]
 800aabc:	bd70      	pop	{r4, r5, r6, pc}
 800aabe:	46c0      	nop			; (mov r8, r8)
 800aac0:	20000350 	.word	0x20000350

0800aac4 <_read_r>:
 800aac4:	b570      	push	{r4, r5, r6, lr}
 800aac6:	0004      	movs	r4, r0
 800aac8:	0008      	movs	r0, r1
 800aaca:	0011      	movs	r1, r2
 800aacc:	001a      	movs	r2, r3
 800aace:	2300      	movs	r3, #0
 800aad0:	4d05      	ldr	r5, [pc, #20]	; (800aae8 <_read_r+0x24>)
 800aad2:	602b      	str	r3, [r5, #0]
 800aad4:	f7f8 fb0f 	bl	80030f6 <_read>
 800aad8:	1c43      	adds	r3, r0, #1
 800aada:	d103      	bne.n	800aae4 <_read_r+0x20>
 800aadc:	682b      	ldr	r3, [r5, #0]
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d000      	beq.n	800aae4 <_read_r+0x20>
 800aae2:	6023      	str	r3, [r4, #0]
 800aae4:	bd70      	pop	{r4, r5, r6, pc}
 800aae6:	46c0      	nop			; (mov r8, r8)
 800aae8:	20000350 	.word	0x20000350

0800aaec <_init>:
 800aaec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aaee:	46c0      	nop			; (mov r8, r8)
 800aaf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aaf2:	bc08      	pop	{r3}
 800aaf4:	469e      	mov	lr, r3
 800aaf6:	4770      	bx	lr

0800aaf8 <_fini>:
 800aaf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aafa:	46c0      	nop			; (mov r8, r8)
 800aafc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aafe:	bc08      	pop	{r3}
 800ab00:	469e      	mov	lr, r3
 800ab02:	4770      	bx	lr
