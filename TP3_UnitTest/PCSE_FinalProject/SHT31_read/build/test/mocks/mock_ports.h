/* AUTOGENERATED FILE. DO NOT EDIT. */
#ifndef _MOCK_PORTS_H
#define _MOCK_PORTS_H

#include "unity.h"
#include "ports.h"

/* Ignore the following warnings, since we are copying code */
#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic push
#endif
#if !defined(__clang__)
#pragma GCC diagnostic ignored "-Wpragmas"
#endif
#pragma GCC diagnostic ignored "-Wunknown-pragmas"
#pragma GCC diagnostic ignored "-Wduplicate-decl-specifier"
#endif

void mock_ports_Init(void);
void mock_ports_Destroy(void);
void mock_ports_Verify(void);




#define sendI2C_CMD_IgnoreAndReturn(cmock_retval) sendI2C_CMD_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void sendI2C_CMD_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, uint8_t cmock_to_return);
#define sendI2C_CMD_StopIgnore() sendI2C_CMD_CMockStopIgnore()
void sendI2C_CMD_CMockStopIgnore(void);
#define sendI2C_CMD_ExpectAnyArgsAndReturn(cmock_retval) sendI2C_CMD_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void sendI2C_CMD_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, uint8_t cmock_to_return);
#define sendI2C_CMD_ExpectAndReturn(addr, sendCMD, size, cmock_retval) sendI2C_CMD_CMockExpectAndReturn(__LINE__, addr, sendCMD, size, cmock_retval)
void sendI2C_CMD_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint8_t addr, uint8_t* sendCMD, int8_t size, uint8_t cmock_to_return);
typedef uint8_t (* CMOCK_sendI2C_CMD_CALLBACK)(uint8_t addr, uint8_t* sendCMD, int8_t size, int cmock_num_calls);
void sendI2C_CMD_AddCallback(CMOCK_sendI2C_CMD_CALLBACK Callback);
void sendI2C_CMD_Stub(CMOCK_sendI2C_CMD_CALLBACK Callback);
#define sendI2C_CMD_StubWithCallback sendI2C_CMD_Stub
#define sendI2C_CMD_ExpectWithArrayAndReturn(addr, sendCMD, sendCMD_Depth, size, cmock_retval) sendI2C_CMD_CMockExpectWithArrayAndReturn(__LINE__, addr, sendCMD, sendCMD_Depth, size, cmock_retval)
void sendI2C_CMD_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, uint8_t addr, uint8_t* sendCMD, int sendCMD_Depth, int8_t size, uint8_t cmock_to_return);
#define sendI2C_CMD_ReturnThruPtr_sendCMD(sendCMD) sendI2C_CMD_CMockReturnMemThruPtr_sendCMD(__LINE__, sendCMD, sizeof(uint8_t))
#define sendI2C_CMD_ReturnArrayThruPtr_sendCMD(sendCMD, cmock_len) sendI2C_CMD_CMockReturnMemThruPtr_sendCMD(__LINE__, sendCMD, cmock_len * sizeof(*sendCMD))
#define sendI2C_CMD_ReturnMemThruPtr_sendCMD(sendCMD, cmock_size) sendI2C_CMD_CMockReturnMemThruPtr_sendCMD(__LINE__, sendCMD, cmock_size)
void sendI2C_CMD_CMockReturnMemThruPtr_sendCMD(UNITY_LINE_TYPE cmock_line, uint8_t* sendCMD, size_t cmock_size);
#define sendI2C_CMD_IgnoreArg_addr() sendI2C_CMD_CMockIgnoreArg_addr(__LINE__)
void sendI2C_CMD_CMockIgnoreArg_addr(UNITY_LINE_TYPE cmock_line);
#define sendI2C_CMD_IgnoreArg_sendCMD() sendI2C_CMD_CMockIgnoreArg_sendCMD(__LINE__)
void sendI2C_CMD_CMockIgnoreArg_sendCMD(UNITY_LINE_TYPE cmock_line);
#define sendI2C_CMD_IgnoreArg_size() sendI2C_CMD_CMockIgnoreArg_size(__LINE__)
void sendI2C_CMD_CMockIgnoreArg_size(UNITY_LINE_TYPE cmock_line);
#define readI2C_Data_IgnoreAndReturn(cmock_retval) readI2C_Data_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void readI2C_Data_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, uint8_t cmock_to_return);
#define readI2C_Data_StopIgnore() readI2C_Data_CMockStopIgnore()
void readI2C_Data_CMockStopIgnore(void);
#define readI2C_Data_ExpectAnyArgsAndReturn(cmock_retval) readI2C_Data_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void readI2C_Data_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, uint8_t cmock_to_return);
#define readI2C_Data_ExpectAndReturn(addr, data, size, cmock_retval) readI2C_Data_CMockExpectAndReturn(__LINE__, addr, data, size, cmock_retval)
void readI2C_Data_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint8_t addr, uint8_t* data, int8_t size, uint8_t cmock_to_return);
typedef uint8_t (* CMOCK_readI2C_Data_CALLBACK)(uint8_t addr, uint8_t* data, int8_t size, int cmock_num_calls);
void readI2C_Data_AddCallback(CMOCK_readI2C_Data_CALLBACK Callback);
void readI2C_Data_Stub(CMOCK_readI2C_Data_CALLBACK Callback);
#define readI2C_Data_StubWithCallback readI2C_Data_Stub
#define readI2C_Data_ExpectWithArrayAndReturn(addr, data, data_Depth, size, cmock_retval) readI2C_Data_CMockExpectWithArrayAndReturn(__LINE__, addr, data, data_Depth, size, cmock_retval)
void readI2C_Data_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, uint8_t addr, uint8_t* data, int data_Depth, int8_t size, uint8_t cmock_to_return);
#define readI2C_Data_ReturnThruPtr_data(data) readI2C_Data_CMockReturnMemThruPtr_data(__LINE__, data, sizeof(uint8_t))
#define readI2C_Data_ReturnArrayThruPtr_data(data, cmock_len) readI2C_Data_CMockReturnMemThruPtr_data(__LINE__, data, cmock_len * sizeof(*data))
#define readI2C_Data_ReturnMemThruPtr_data(data, cmock_size) readI2C_Data_CMockReturnMemThruPtr_data(__LINE__, data, cmock_size)
void readI2C_Data_CMockReturnMemThruPtr_data(UNITY_LINE_TYPE cmock_line, uint8_t* data, size_t cmock_size);
#define readI2C_Data_IgnoreArg_addr() readI2C_Data_CMockIgnoreArg_addr(__LINE__)
void readI2C_Data_CMockIgnoreArg_addr(UNITY_LINE_TYPE cmock_line);
#define readI2C_Data_IgnoreArg_data() readI2C_Data_CMockIgnoreArg_data(__LINE__)
void readI2C_Data_CMockIgnoreArg_data(UNITY_LINE_TYPE cmock_line);
#define readI2C_Data_IgnoreArg_size() readI2C_Data_CMockIgnoreArg_size(__LINE__)
void readI2C_Data_CMockIgnoreArg_size(UNITY_LINE_TYPE cmock_line);
#define sendStringUart_Ignore() sendStringUart_CMockIgnore()
void sendStringUart_CMockIgnore(void);
#define sendStringUart_StopIgnore() sendStringUart_CMockStopIgnore()
void sendStringUart_CMockStopIgnore(void);
#define sendStringUart_ExpectAnyArgs() sendStringUart_CMockExpectAnyArgs(__LINE__)
void sendStringUart_CMockExpectAnyArgs(UNITY_LINE_TYPE cmock_line);
#define sendStringUart_Expect(buf, size) sendStringUart_CMockExpect(__LINE__, buf, size)
void sendStringUart_CMockExpect(UNITY_LINE_TYPE cmock_line, uint8_t* buf, uint8_t size);
typedef void (* CMOCK_sendStringUart_CALLBACK)(uint8_t* buf, uint8_t size, int cmock_num_calls);
void sendStringUart_AddCallback(CMOCK_sendStringUart_CALLBACK Callback);
void sendStringUart_Stub(CMOCK_sendStringUart_CALLBACK Callback);
#define sendStringUart_StubWithCallback sendStringUart_Stub
#define sendStringUart_ExpectWithArray(buf, buf_Depth, size) sendStringUart_CMockExpectWithArray(__LINE__, buf, buf_Depth, size)
void sendStringUart_CMockExpectWithArray(UNITY_LINE_TYPE cmock_line, uint8_t* buf, int buf_Depth, uint8_t size);
#define sendStringUart_ReturnThruPtr_buf(buf) sendStringUart_CMockReturnMemThruPtr_buf(__LINE__, buf, sizeof(uint8_t))
#define sendStringUart_ReturnArrayThruPtr_buf(buf, cmock_len) sendStringUart_CMockReturnMemThruPtr_buf(__LINE__, buf, cmock_len * sizeof(*buf))
#define sendStringUart_ReturnMemThruPtr_buf(buf, cmock_size) sendStringUart_CMockReturnMemThruPtr_buf(__LINE__, buf, cmock_size)
void sendStringUart_CMockReturnMemThruPtr_buf(UNITY_LINE_TYPE cmock_line, uint8_t* buf, size_t cmock_size);
#define sendStringUart_IgnoreArg_buf() sendStringUart_CMockIgnoreArg_buf(__LINE__)
void sendStringUart_CMockIgnoreArg_buf(UNITY_LINE_TYPE cmock_line);
#define sendStringUart_IgnoreArg_size() sendStringUart_CMockIgnoreArg_size(__LINE__)
void sendStringUart_CMockIgnoreArg_size(UNITY_LINE_TYPE cmock_line);

#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic pop
#endif
#endif

#endif
